<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>努力，奋斗</title>
  
  <subtitle>记录学习</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://shang.at/"/>
  <updated>2020-07-26T12:40:51.699Z</updated>
  <id>https://shang.at/</id>
  
  <author>
    <name>王尚</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Scala学习-9-Iterator设计模式</title>
    <link href="https://shang.at/post/Scala%E5%AD%A6%E4%B9%A0-9-Iterator%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>https://shang.at/post/Scala学习-9-Iterator设计模式/</id>
    <published>2020-07-26T08:26:23.000Z</published>
    <updated>2020-07-26T12:40:51.699Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>简介：Iterator的数据处理模式贯穿了大数据处理流程的始终，是一个非常值得借鉴的设计模式</p></blockquote><a id="more"></a><h3 id="现象"><a href="#现象" class="headerlink" title="现象"></a>现象</h3><p>使用scala编写了一段<code>wordcount</code>的代码如下：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">TestIterator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> listStr = <span class="type">List</span>(</span><br><span class="line">      <span class="string">"hello world"</span>,</span><br><span class="line">      <span class="string">"hello msb"</span>,</span><br><span class="line">      <span class="string">"good idea"</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> flatMap: <span class="type">List</span>[<span class="type">String</span>] = listStr.flatMap((x: <span class="type">String</span>) =&gt; x.split(<span class="string">" "</span>))</span><br><span class="line">    flatMap.foreach(println)</span><br><span class="line">    <span class="keyword">val</span> mapList: <span class="type">List</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = flatMap.map((_, <span class="number">1</span>))</span><br><span class="line">    mapList.foreach(println)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分析一下上面程序的执行过程：</p><ol><li>创建listStr对象</li><li>listStr调用flatMap，作用是将listStr的每个元素使用空格分隔，然后<code>合并</code>成一个大的list</li><li>继续调用map，将每个元素<code>转换</code>成一个[String,Int]的二元组</li><li>打印结果</li></ol><p>以上代码有一个致命的问题：在数据量非常的的时候，会急剧的消耗内存空间。为什么？简单分析下：第一步空间复杂度为O(N)，第二步又生成了一个全新的List[String]对象，又是O(N)的空间复杂度，第三步中又生成了一个List[(String,Int)]对象，空间复杂度依然是O(N)。通过分析可知，在数据统计的过程中，貌似并没有必要将中间过程的数据存储下来，不但占用空间，还没有任何用处。</p><p>于是，我们想到了一种设计模式-迭代器模式。迭代器模式在内部维护了一个指针，实际上并不会存储数据，在遍历数据集的时候，不断的消耗当前指针。</p><h3 id="现在开始复习一下迭代器模式"><a href="#现在开始复习一下迭代器模式" class="headerlink" title="现在开始复习一下迭代器模式"></a>现在开始复习一下迭代器模式</h3><p>迭代器一定有两个方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Iterator</span>&lt;<span class="title">E</span>&gt; </span>&#123; <span class="comment">//Element E //Type T //Key K //Value V</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span></span>;  <span class="comment">// 是否还有下一个元素</span></span><br><span class="line"></span><br><span class="line">    <span class="function">E <span class="title">next</span><span class="params">()</span></span>;  <span class="comment">// 获取下一个元素</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>集合类一定有一个返回迭代器的函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Collection</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(E o)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Iterator <span class="title">iterator</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体的集合类实现Collection接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArrayList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">implements</span> <span class="title">Collection</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    E[] objects = (E[]) <span class="keyword">new</span> Object[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(E o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index == objects.length) &#123;</span><br><span class="line">            E[] newObjects = (E[]) <span class="keyword">new</span> Object[objects.length * <span class="number">2</span>];</span><br><span class="line">            System.arraycopy(objects, <span class="number">0</span>, newObjects, <span class="number">0</span>, objects.length);</span><br><span class="line">            objects = newObjects;</span><br><span class="line">        &#125;</span><br><span class="line">        objects[index] = o;</span><br><span class="line">        index++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> index;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterator&lt;E&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ArrayListIterator();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayListIterator</span>&lt;<span class="title">E</span>&gt; <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> currentIndex = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (currentIndex &gt;= index) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> E <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            E o = (E) objects[currentIndex];</span><br><span class="line">            currentIndex++;</span><br><span class="line">            <span class="keyword">return</span> o;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以发现，迭代器中不会存数据，只是保存了一个指针，指向当前遍历到了哪一个索引，只有真正开始遍历的时候，指针才会开始移动，并且没有回退的方法，即迭代器只能遍历一次(另有设计的除外)。</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>使用迭代器实现上面的功能</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">TestIterator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> listStr = <span class="type">List</span>(</span><br><span class="line">      <span class="string">"hello world"</span>,</span><br><span class="line">      <span class="string">"hello msb"</span>,</span><br><span class="line">      <span class="string">"good idea"</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> iter: <span class="type">Iterator</span>[<span class="type">String</span>] = listStr.iterator <span class="comment">//什么是迭代器，为什么会有迭代器模式？  迭代器里不存数据！</span></span><br><span class="line">    <span class="keyword">val</span> iterFlatMap = iter.flatMap((x: <span class="type">String</span>) =&gt; x.split(<span class="string">" "</span>))</span><br><span class="line">    <span class="comment">//    iterFlatMap.foreach(println)  // 中途不能打印，否则后续就读取不到数据了</span></span><br><span class="line">    <span class="keyword">val</span> iterMapList = iterFlatMap.map((_, <span class="number">1</span>))</span><br><span class="line">    <span class="keyword">while</span> (iterMapList.hasNext) &#123;</span><br><span class="line">      <span class="keyword">val</span> tuple: (<span class="type">String</span>, <span class="type">Int</span>) = iterMapList.next()</span><br><span class="line">      println(tuple)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//1.listStr真正的数据集，有数据的</span></span><br><span class="line">    <span class="comment">//2.iter.flatMap  没有发生计算，返回了一个新的迭代器</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分析：基于迭代器的方案中，除了listStr中存储了数据，中间的过程中只有计算逻辑没有存储数据(faltMap会有一点少少的数据缓冲存储)。这和spark中的算子的思想一样啊，也可以说spark是借鉴了迭代器的编程模式。</p><ul><li>Spark的transformation算子：类比这里的flatMap/map</li><li>Spark的action算子：类比这里的foreach</li></ul><p>关于scala中flatMap、map、foreach的过程分析</p><p><img src="../../images/scala_iterator.jpg" alt="scala_iterator源码分析图"></p><ol><li><p>iter = listStr.iterator</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">iterator</span></span>: <span class="type">Iterator</span>[<span class="type">A</span>] = <span class="keyword">new</span> <span class="type">AbstractIterator</span>[<span class="type">A</span>] &#123;</span><br><span class="line">  <span class="keyword">var</span> these = self</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">hasNext</span></span>: <span class="type">Boolean</span> = !these.isEmpty</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">next</span></span>(): <span class="type">A</span> =</span><br><span class="line">    <span class="keyword">if</span> (hasNext) &#123;</span><br><span class="line">      <span class="keyword">val</span> result = these.head; these = these.tail; result</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="type">Iterator</span>.empty.next()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>iterator返回的是一个AbstractIterator对象，重写了hasNext和next函数：</p><ul><li>hasNext：调用listStr的isEmpty方法，如果为空则返回false</li><li>next：<ul><li>先检测是否有元素，有的话返回listStr的头结点，并且移动these到剩余部分的头部；</li><li>否则返回空。按理说不会为空，因为都是先判断了hasNext为true才会调用next</li></ul></li></ul></li><li><p>iterFlatMap = iter.flatMap((x:String) =&gt; x.split(“ “))</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">flatMap</span></span>[<span class="type">B</span>](f: <span class="type">A</span> =&gt; <span class="type">GenTraversableOnce</span>[<span class="type">B</span>]): <span class="type">Iterator</span>[<span class="type">B</span>] = <span class="keyword">new</span> <span class="type">AbstractIterator</span>[<span class="type">B</span>] &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">var</span> cur: <span class="type">Iterator</span>[<span class="type">B</span>] = empty</span><br><span class="line">  <span class="keyword">private</span> <span class="function"><span class="keyword">def</span> <span class="title">nextCur</span></span>() &#123; cur = f(self.next()).toIterator &#125;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">hasNext</span></span>: <span class="type">Boolean</span> = &#123;</span><br><span class="line">    <span class="comment">// Equivalent to cur.hasNext || self.hasNext &amp;&amp; &#123; nextCur(); hasNext &#125;</span></span><br><span class="line">    <span class="comment">// but slightly shorter bytecode (better JVM inlining!)</span></span><br><span class="line">    <span class="keyword">while</span> (!cur.hasNext) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!self.hasNext) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">      nextCur()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">next</span></span>(): <span class="type">B</span> = (<span class="keyword">if</span> (hasNext) cur <span class="keyword">else</span> empty).next()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>flatMap返回的也是一个AbstractIterator，也重写了hasNext和next函数：</p><ul><li><p>它在这里维护了一个cur的小迭代器，之所以说小，是因为它会缓存上一个调用节点的一条记录经过f处理之后的结果</p></li><li><p>hasNext：<strong>重点看这个函数</strong></p><ul><li>这里会先判断cur是否有元素，有的话直接返回true；</li><li>否则的话，调用父类的hasNext，判断是否还有值，没有的话，返回false；</li><li>否则的话调用父类的next获取一条新的记录，并交给处理函数f处理，处理完之后交给cur缓存起来</li></ul></li><li>next：如果有值，则直接从cur中取值，而且永远都只从cur中取值</li></ul></li><li><p>iterMapList = iterFlatMap.map((_, 1))</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">map</span></span>[<span class="type">B</span>](f: <span class="type">A</span> =&gt; <span class="type">B</span>): <span class="type">Iterator</span>[<span class="type">B</span>] = <span class="keyword">new</span> <span class="type">AbstractIterator</span>[<span class="type">B</span>] &#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">hasNext</span> </span>= self.hasNext</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">next</span></span>() = f(self.next())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>map返回的也是一个AbstractIterator，也重写了hasNext和next函数，不过他这里的逻辑比较简单了，因为map只是完成了一个映射的过程</p></li><li><p>iterMapList.foreach(println)</p><p>打印收工。</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;简介：Iterator的数据处理模式贯穿了大数据处理流程的始终，是一个非常值得借鉴的设计模式&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Scala学习" scheme="https://shang.at/categories/Scala%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Scala-Iterator设计模式" scheme="https://shang.at/tags/Scala-Iterator%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Scala学习-隐式转换</title>
    <link href="https://shang.at/post/Scala%E5%AD%A6%E4%B9%A0-8-%E9%9A%90%E5%BC%8F%E8%BD%AC%E6%8D%A2/"/>
    <id>https://shang.at/post/Scala学习-8-隐式转换/</id>
    <published>2020-07-26T08:21:03.000Z</published>
    <updated>2020-07-26T11:30:50.773Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>简介：一个从类型 <code>S</code> 到类型 <code>T</code> 的隐式转换由一个函数类型 <code>S =&gt; T</code> 的隐式值来定义，或者由一个可转换成所需值的隐式方法来定义。</p><p>隐式转换是scala中一个非常重要的特性，但同时也是挺难理解的一个特性。</p><p>隐式转换使用不当将会导致很难检查的bug</p></blockquote><a id="more"></a><h3 id="现象"><a href="#现象" class="headerlink" title="现象"></a>现象</h3><p>例如在scala项目使用创建了一个LinkedList对象，我们想要对该对象调用foreach方法，但是却发现调用的时候会报错，没有该方法</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util</span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">TestImplicit</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> list = <span class="keyword">new</span> util.<span class="type">LinkedList</span>[<span class="type">Int</span>]()</span><br><span class="line"></span><br><span class="line">    list.foreach(println)  <span class="comment">// 这里会报：Cannot resolve symbol foreach</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么我们应该怎么办呢？实际上我们可以有以下几种解决方案 不需要修改LinkedList的源代码(也修改不了)</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>分析一下<code>list.foreach(println)</code>，发现这一句中包含了三个内容：数据集list、遍历行为foreach、处理函数println，那么我们只需要通过某种方案将这三个元素组装好就可以了</p><h4 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h4><p>定义一个foreach函数帮助完成遍历</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">TestImplicit</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> list = <span class="keyword">new</span> util.<span class="type">LinkedList</span>[<span class="type">Int</span>]()</span><br><span class="line">    list.add(<span class="number">3</span>)</span><br><span class="line">    list.add(<span class="number">4</span>)</span><br><span class="line">    list.add(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//    list.foreach(println)</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">foreach</span></span>[<span class="type">T</span>](list: util.<span class="type">LinkedList</span>[<span class="type">T</span>], f: (<span class="type">T</span>) =&gt; <span class="type">Unit</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">      <span class="keyword">val</span> iter: util.<span class="type">Iterator</span>[<span class="type">T</span>] = list.iterator()</span><br><span class="line">      <span class="keyword">while</span> (iter.hasNext) f(iter.next())</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    foreach(list, println)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h4><p>通过方案一看似可以满足我们的需求，但是我们不想通过把list当做foreach的参数来完成遍历，我们就想通过调用<code>obj.foreach</code>的形式来完成这个操作。那么我们可以通过定义一个class来包装下list对象，即在新定义的class中提供foreach的方法调用，然后有一个list的属性，那么就可以这样做</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">XXX</span>[<span class="type">T</span>](<span class="params">list: util.<span class="type">LinkedList</span>[<span class="type">T</span>]</span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">foreach</span></span>(f: (<span class="type">T</span>) =&gt; <span class="type">Unit</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> iter: util.<span class="type">Iterator</span>[<span class="type">T</span>] = list.iterator()</span><br><span class="line">    <span class="keyword">while</span> (iter.hasNext) f(iter.next())</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">TestImplicit</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> list = <span class="keyword">new</span> util.<span class="type">LinkedList</span>[<span class="type">Int</span>]()</span><br><span class="line">    list.add(<span class="number">3</span>)</span><br><span class="line">    list.add(<span class="number">4</span>)</span><br><span class="line">    list.add(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> xx = <span class="keyword">new</span> <span class="type">XXX</span>(list)</span><br><span class="line">    xx.foreach(println)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="方案三"><a href="#方案三" class="headerlink" title="方案三"></a>方案三</h4><p>方案二中通过一个新的class做到了类似<code>obj.foreach</code>的调用形式，但是我们还不满足，我们不想用其他的对象来调用foreach，就是想直接<code>list.foreach</code>，用list对象本身直接调用，那该怎么办呢？首先在原始的LinkedList类中是没有foreach方法的，我们又不能去修改LinkedList的源码。实际上在scala中为我们提供了一种更加方便快捷的方案，可以在不侵入源码的情况下，给一个对象赋予新的方法。那就是<code>隐式转换(implicit)</code>，实际上scala中的隐式转换在某种程度上与我们上面的两种方案有异曲同工之妙，但是它在编译器层面做了优化，是语言层面的支持，即我们可以通过<code>implicit</code>关键字直接告诉编译器：<strong>我这个对象不存在当前我要调用的方法，但是我有在其他地方定义了一个方法转换，可以让我拥有这个方法</strong>。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">TestImplicit</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> list = <span class="keyword">new</span> util.<span class="type">LinkedList</span>[<span class="type">Int</span>]()</span><br><span class="line">    list.add(<span class="number">3</span>)</span><br><span class="line">    list.add(<span class="number">4</span>)</span><br><span class="line">    list.add(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//隐式转换：  隐式转换方法:接受一个类型，返回另外一个包含特定方法的类型</span></span><br><span class="line">    <span class="keyword">implicit</span> <span class="function"><span class="keyword">def</span> <span class="title">sdfsdf</span></span>[<span class="type">T</span>](list: util.<span class="type">LinkedList</span>[<span class="type">T</span>]) = &#123;</span><br><span class="line">      <span class="keyword">new</span> <span class="type">XXX</span>(list)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    list.foreach(println)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">XXX</span>[<span class="type">T</span>](<span class="params">list: util.<span class="type">LinkedList</span>[<span class="type">T</span>]</span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">foreach</span></span>(f: (<span class="type">T</span>) =&gt; <span class="type">Unit</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> iter: util.<span class="type">Iterator</span>[<span class="type">T</span>] = list.iterator()</span><br><span class="line">    <span class="keyword">while</span> (iter.hasNext) f(iter.next())</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你可以发现我们使用了一个新的关键字<code>implicit</code>，它修饰了一个函数，并且我们新创建的这个函数，它的名字很特殊，只是一个乱写的字符串，也许你可以猜出来了，这个函数的名字对我们来说没有用处，对的在scala中的隐式转换只关心类型，并不关心名称。但是在实际应用中一定不要如此随便的命名，这里只是做演示。</p><p>implicit关键字如注释中说的那样：<strong>接受一个类型，返回另一个包含特定方法的类型</strong>，但是我们不需要使用新的类型对象来调用foreach，这是因为scala在编译的阶段帮我们做了<em>改写</em>，其执行过程大致如下：</p><ol><li>scala编译器发现list对象并没有foreach方法 但是并不会立马报错</li><li>它回去寻找有没有implicit定义的方法，且方法的参数正好是list对象对应的类型</li><li>如果找到了，那么就可以编译通过；否则就会报错</li></ol><p>总而言之，scala编译器帮助我们完成了list类型的转换，也可以理解成编译器帮我们把代码改写了，但是这一步骤是我们所看不到，所以说是<code>隐式的</code>(个人这么理解)</p><p>方案三介绍的只是scala的一种隐式转换：<strong>隐式转换方法</strong></p><p>除此之外，scala中还有其他隐式转换形式：<strong>隐式转换类</strong>、<strong>隐式转换参数</strong></p><h4 id="隐式转换类"><a href="#隐式转换类" class="headerlink" title="隐式转换类"></a>隐式转换类</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">TestImplicit</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//隐式转换类</span></span><br><span class="line">  <span class="keyword">implicit</span> <span class="class"><span class="keyword">class</span> <span class="title">KKK</span>[<span class="type">T</span>](<span class="params">list: util.<span class="type">LinkedList</span>[<span class="type">T</span>]</span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">foreach</span></span>(f: (<span class="type">T</span>) =&gt; <span class="type">Unit</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">      <span class="keyword">val</span> iter: util.<span class="type">Iterator</span>[<span class="type">T</span>] = list.iterator()</span><br><span class="line">      <span class="keyword">while</span> (iter.hasNext) f(iter.next())</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> list = <span class="keyword">new</span> util.<span class="type">LinkedList</span>[<span class="type">Int</span>]()</span><br><span class="line">    list.add(<span class="number">3</span>)</span><br><span class="line">    list.add(<span class="number">4</span>)</span><br><span class="line">    list.add(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">    list.foreach(println)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注：这里需要注意的是：<code>implicit</code>只能用在类内部或者函数内部，<font color="red">不能使用在top-level的objects上</font>。否则会报如下的错误<code>&#39;implicit&#39; modifier cannot be used for top-level objects</code></p></blockquote><h4 id="隐式转换参数"><a href="#隐式转换参数" class="headerlink" title="隐式转换参数"></a>隐式转换参数</h4><p>最后这一种隐式转换的形式实际上对这个例子没有作用，他是在另外一些使用场景有使用</p><p>方法可以具有 <em>隐式</em> 参数列表，由参数列表开头的 <em>implicit</em> 关键字标记。 如果参数列表中的参数没有像往常一样传递， Scala 将查看它是否可以获得正确类型的隐式值，如果可以，则自动传递。</p><p>implicit如果出现在函数的参数列表中，如<code>def func(implicit name:String)</code>，那么表示在调用func函数的时候，name参数可以不传，也可以传。传与不传的区别如下：</p><ul><li>传：那么直接使用传递的参数，和普通的函数没有任何区别</li><li>不传：这种情况下，必须存在一个隐式的String类型的变量被声明，否则会编译报错</li></ul><p>使用方式如下：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">TestImplicit</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">implicit</span> <span class="keyword">val</span> str: <span class="type">String</span> = <span class="string">"lisi"</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">func</span></span>(<span class="keyword">implicit</span> name: <span class="type">String</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">      println(name)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    func   <span class="comment">// 打印 lisi</span></span><br><span class="line">    func(<span class="string">"zhangsan"</span>)  <span class="comment">// 打印 zhangsan</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>隐式转换参数使用的时候需要注意以下几点</p><ol><li><p>如果参数列表中有implicit，那么所有的参数要么都传要么都定义隐式转换变量</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span></span>(<span class="keyword">implicit</span> name: <span class="type">String</span>, age: <span class="type">Int</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">  println(name)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>同一种类型的隐私转换变量只能定义一个，否则会报错</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">implicit</span> <span class="keyword">val</span> a:<span class="type">String</span> = <span class="string">"wangwu"</span></span><br><span class="line"><span class="keyword">implicit</span> <span class="keyword">val</span> b:<span class="type">String</span> = <span class="string">"lisi"</span></span><br></pre></td></tr></table></figure></li><li><p>如果有些参数有隐式转换变量定义，但是其他的参数不需要定义，该如何解决呢？</p><p>解决方案：使用scala的<code>函数柯里化(CURRYING)</code>特性</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span></span>(age: <span class="type">Int</span>)(<span class="keyword">implicit</span> name: <span class="type">String</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">  println(name + <span class="string">" "</span> + age)</span><br><span class="line">&#125;</span><br><span class="line">func(<span class="number">66</span>)(<span class="string">"jkljkl"</span>)</span><br><span class="line">func(<span class="number">66</span>)</span><br></pre></td></tr></table></figure></li></ol><h4 id="隐式转换的作用域"><a href="#隐式转换的作用域" class="headerlink" title="隐式转换的作用域"></a>隐式转换的作用域</h4><p><a href="https://stackoverflow.com/questions/5512397/passing-scala-math-integral-as-implicit-parameter" target="_blank" rel="noopener">StackOverFlow</a></p><p>隐式转换本身是一种代码查找机制，所以下面会介绍隐式转换的查找范围：<br> -当前代码作用域。最直接的就是隐式定义和当前代码处在同一作用域中。<br> -当第一种解析方式没有找到合适的隐式转换时，编译器会继续在隐式参数类型的隐式作用域里查找。一个类型的隐式作用域指的是与该类型相关联的所有的伴生对象。</p><p><strong>对于一个类型T它的隐式搜索区域包括如下：</strong><br> -假如T是这样定义的：T with A with B with C，那么A, B, C的伴生对象都是T的搜索区域。<br> -如果T是类型参数，那么参数类型和基础类型都是T的搜索部分。比如对于类型List[Foo]，List和Foo都是搜索区域<br> -如果T是一个单例类型p.T，那么p和T都是搜索区域。<br> -如果T是类型注入p#T，那么p和T都是搜索区域。</p><p>所以，只要在上述的任何一个区域中搜索到合适的隐式转换，编译器都可以使编译通过。</p><h4 id="scala中预定义的隐式转换"><a href="#scala中预定义的隐式转换" class="headerlink" title="scala中预定义的隐式转换"></a>scala中预定义的隐式转换</h4><p>scala.Predef：scala的预定义对象，预定义了很多类型 (例如 <code>Pair</code>) 和方法 (例如 <code>assert</code>)，同时也声明了一些隐式转换。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;简介：一个从类型 &lt;code&gt;S&lt;/code&gt; 到类型 &lt;code&gt;T&lt;/code&gt; 的隐式转换由一个函数类型 &lt;code&gt;S =&amp;gt; T&lt;/code&gt; 的隐式值来定义，或者由一个可转换成所需值的隐式方法来定义。&lt;/p&gt;
&lt;p&gt;隐式转换是scala中一个非常重要的特性，但同时也是挺难理解的一个特性。&lt;/p&gt;
&lt;p&gt;隐式转换使用不当将会导致很难检查的bug&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Scala学习" scheme="https://shang.at/categories/Scala%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Scala隐式转换" scheme="https://shang.at/tags/Scala%E9%9A%90%E5%BC%8F%E8%BD%AC%E6%8D%A2/"/>
    
  </entry>
  
  <entry>
    <title>Scala学习-偏函数</title>
    <link href="https://shang.at/post/Scala%E5%AD%A6%E4%B9%A0-7-%E5%81%8F%E5%87%BD%E6%95%B0/"/>
    <id>https://shang.at/post/Scala学习-7-偏函数/</id>
    <published>2020-07-26T08:20:55.000Z</published>
    <updated>2020-07-26T12:53:35.668Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>简介：</p></blockquote><a id="more"></a><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">TestPartialFunction</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">xxx</span></span>: <span class="type">PartialFunction</span>[<span class="type">Any</span>, <span class="type">String</span>] = &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">"hello"</span> =&gt; <span class="string">"val is hello"</span></span><br><span class="line">      <span class="keyword">case</span> x: <span class="type">Int</span> =&gt; <span class="string">s"<span class="subst">$x</span>...is int"</span></span><br><span class="line">      <span class="keyword">case</span> _ =&gt; <span class="string">"none"</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> str: <span class="type">String</span> = xxx(<span class="number">44</span>)</span><br><span class="line">    println(str)</span><br><span class="line">    println(xxx(<span class="string">"hello"</span>))</span><br><span class="line">    println(xxx(<span class="string">"hi"</span>))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;简介：&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Scala学习" scheme="https://shang.at/categories/Scala%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Scala偏函数" scheme="https://shang.at/tags/Scala%E5%81%8F%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>Scala学习-模式匹配</title>
    <link href="https://shang.at/post/Scala%E5%AD%A6%E4%B9%A0-6-%E6%A8%A1%E5%BC%8F%E5%8C%B9%E9%85%8D/"/>
    <id>https://shang.at/post/Scala学习-6-模式匹配/</id>
    <published>2020-07-26T08:20:13.000Z</published>
    <updated>2020-07-26T12:55:03.558Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>简介：scala的模式匹配功能非常强大，可以支持值匹配，类型匹配等</p></blockquote><a id="more"></a><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Lesson06_match</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> tup: (<span class="type">Double</span>, <span class="type">Int</span>, <span class="type">String</span>, <span class="type">Boolean</span>, <span class="type">Int</span>) = (<span class="number">1.0</span>, <span class="number">88</span>, <span class="string">"abc"</span>, <span class="literal">false</span>, <span class="number">44</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> iter: <span class="type">Iterator</span>[<span class="type">Any</span>] = tup.productIterator</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> res: <span class="type">Iterator</span>[<span class="type">Unit</span>] = iter.map(</span><br><span class="line">      (x) =&gt; &#123;</span><br><span class="line">        x <span class="keyword">match</span> &#123;</span><br><span class="line">          <span class="keyword">case</span> <span class="number">1</span> =&gt; println(<span class="string">s"<span class="subst">$x</span>...is 1"</span>)</span><br><span class="line">          <span class="keyword">case</span> <span class="number">88</span> =&gt; println(<span class="string">s"<span class="subst">$x</span> ...is 88"</span>)</span><br><span class="line">          <span class="keyword">case</span> <span class="literal">false</span> =&gt; println(<span class="string">s"<span class="subst">$x</span>...is false"</span>)</span><br><span class="line">          <span class="keyword">case</span> w: <span class="type">Int</span> <span class="keyword">if</span> w &gt; <span class="number">50</span> =&gt; println(<span class="string">s"<span class="subst">$w</span>...is  &gt; 50"</span>)</span><br><span class="line">          <span class="keyword">case</span> _ =&gt; println(<span class="string">"wo ye bu zhi dao sha lei xing "</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">while</span> (res.hasNext) println(res.next())</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;简介：scala的模式匹配功能非常强大，可以支持值匹配，类型匹配等&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Scala学习" scheme="https://shang.at/categories/Scala%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Scala模式匹配" scheme="https://shang.at/tags/Scala%E6%A8%A1%E5%BC%8F%E5%8C%B9%E9%85%8D/"/>
    
  </entry>
  
  <entry>
    <title>Scala学习-案例类</title>
    <link href="https://shang.at/post/Scala%E5%AD%A6%E4%B9%A0-5-%E6%A1%88%E4%BE%8B%E7%B1%BB/"/>
    <id>https://shang.at/post/Scala学习-5-案例类/</id>
    <published>2020-07-26T08:19:58.000Z</published>
    <updated>2020-07-26T13:02:56.494Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>简介：</p></blockquote><a id="more"></a><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span>(<span class="params">name:<span class="type">String</span>,age:<span class="type">Int</span></span>)</span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">TestCaseClass</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> dog1 =  <span class="type">Dog</span>(<span class="string">"hsq"</span>,<span class="number">18</span>)</span><br><span class="line">    <span class="keyword">val</span> dog2 =  <span class="type">Dog</span>(<span class="string">"hsq"</span>,<span class="number">18</span>)</span><br><span class="line">    println(dog1.equals(dog2))</span><br><span class="line">    println(dog1 == dog2)</span><br><span class="line">         </span><br><span class="line">    <span class="keyword">val</span> dog3: <span class="type">Dog</span> = dog2.copy(age=<span class="number">10</span>)</span><br><span class="line">    println(dog3)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>case class感觉上类似于tuple，默认情况下：属性都是public的val的，但是case class可以将val改成var</li><li>case class构造的时候不需要使用new关键字也可以，因为case class有一个默认的<code>apply</code>方法来负责对象的创建。</li><li><p>case class在比较的时候是按值比较而非按引用比较：在消息传递的时候非常有用，不关心引用，只关心值</p></li><li><p>可以通过<code>copy</code>方法创建一个案例类实例的浅拷贝，同时可以指定构造参数来做一些改变。</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;简介：&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Scala学习" scheme="https://shang.at/categories/Scala%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Scala案例类" scheme="https://shang.at/tags/Scala%E6%A1%88%E4%BE%8B%E7%B1%BB/"/>
    
  </entry>
  
  <entry>
    <title>Scala学习-特质和抽象类型</title>
    <link href="https://shang.at/post/Scala%E5%AD%A6%E4%B9%A0-4-%E7%89%B9%E8%B4%A8%E5%92%8C%E6%8A%BD%E8%B1%A1%E7%B1%BB%E5%9E%8B/"/>
    <id>https://shang.at/post/Scala学习-4-特质和抽象类型/</id>
    <published>2020-07-26T08:19:37.000Z</published>
    <updated>2020-07-26T13:12:05.008Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>简介：特质 (Traits) 用于在类 (Class)之间共享程序接口 (Interface)和字段 (Fields)。 它们类似于Java 8的接口。 类和对象 (Objects)可以扩展特质，但是特质不能被实例化，因此特质没有参数。</p></blockquote><a id="more"></a><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">trait</span>  <span class="title">God</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">say</span></span>(): <span class="type">Unit</span> =&#123;</span><br><span class="line">    println(<span class="string">"god...say"</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">Mg</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">ku</span></span>(): <span class="type">Unit</span> =&#123;</span><br><span class="line">    println(<span class="string">"mg...say"</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">haiRen</span></span>():<span class="type">Unit</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>(<span class="params">name:<span class="type">String</span></span>)  <span class="keyword">extends</span>   <span class="title">God</span> <span class="keyword">with</span> <span class="title">Mg</span></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">hello</span></span>(): <span class="type">Unit</span> =&#123;</span><br><span class="line">    println(<span class="string">s"<span class="subst">$name</span> say hello"</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">haiRen</span></span>(): <span class="type">Unit</span> = &#123;</span><br><span class="line">    println(<span class="string">"ziji shixian ...."</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Lesson04_trait</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> p = <span class="keyword">new</span> <span class="type">Person</span>(<span class="string">"zhangsan"</span>)</span><br><span class="line">    p.hello()</span><br><span class="line">    p.say()</span><br><span class="line">    p.ku()</span><br><span class="line">    p.haiRen()</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>trait就类似于java8中的接口，特性和接口的性质相似</p><ol><li>一次继承多次实现：只能继承一个父类，但是可以实现多个trait，使用关键字extends(和java中不同)</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;简介：特质 (Traits) 用于在类 (Class)之间共享程序接口 (Interface)和字段 (Fields)。 它们类似于Java 8的接口。 类和对象 (Objects)可以扩展特质，但是特质不能被实例化，因此特质没有参数。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Scala学习" scheme="https://shang.at/categories/Scala%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Scala特质和抽象类型" scheme="https://shang.at/tags/Scala%E7%89%B9%E8%B4%A8%E5%92%8C%E6%8A%BD%E8%B1%A1%E7%B1%BB%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>Scala学习-集合</title>
    <link href="https://shang.at/post/Scala%E5%AD%A6%E4%B9%A0-3-%E9%9B%86%E5%90%88/"/>
    <id>https://shang.at/post/Scala学习-3-集合/</id>
    <published>2020-07-26T08:19:27.000Z</published>
    <updated>2020-07-26T13:34:23.114Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>简介：</p></blockquote><a id="more"></a><p>在scala中分为两种集合类型：immutable(不可变的)、mutable(可变的)</p><p>默认创建出来的集合类如：</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;简介：&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Scala学习" scheme="https://shang.at/categories/Scala%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Scala集合" scheme="https://shang.at/tags/Scala%E9%9B%86%E5%90%88/"/>
    
  </entry>
  
  <entry>
    <title>Scala学习-方法</title>
    <link href="https://shang.at/post/Scala%E5%AD%A6%E4%B9%A0-2-%E6%96%B9%E6%B3%95/"/>
    <id>https://shang.at/post/Scala学习-2-方法/</id>
    <published>2020-07-26T08:19:20.000Z</published>
    <updated>2020-07-26T13:32:18.560Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>简介：</p></blockquote><a id="more"></a><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util</span><br><span class="line"><span class="keyword">import</span> java.util.<span class="type">Date</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Lesson02_Functions</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//成员方法</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">ooxx</span></span>(): <span class="type">Unit</span> = &#123;</span><br><span class="line">    println(<span class="string">"hello object"</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">//  方法  函数</span></span><br><span class="line">    println(<span class="string">"-------1.basic----------"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回值，参数，函数体</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fun01</span></span>() &#123;</span><br><span class="line">      println(<span class="string">"hello world"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fun01()</span><br><span class="line">    <span class="keyword">var</span> x = <span class="number">3</span></span><br><span class="line">    <span class="keyword">var</span> y = fun01()</span><br><span class="line">    println(y)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//想有返回</span></span><br><span class="line">    <span class="comment">//    public void sdfsd()&#123;&#125;</span></span><br><span class="line">    <span class="comment">//    public String sdfsdf()&#123;&#125;</span></span><br><span class="line">    <span class="comment">//有return必须给出返回类型</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fun02</span></span>() = &#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">new</span> util.<span class="type">LinkedList</span>[<span class="type">String</span>]()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//参数：必须给出类型，是val</span></span><br><span class="line">    <span class="comment">//class 构造，是var，val</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fun03</span></span>(a: <span class="type">Int</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">      println(a)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fun03(<span class="number">33</span>)</span><br><span class="line"></span><br><span class="line">    println(<span class="string">"-------2.递归函数----------"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//递归先写触底！  触发什么报错呀</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fun04</span></span>(num: <span class="type">Int</span>): <span class="type">Int</span> = &#123;</span><br><span class="line">      <span class="keyword">if</span> (num == <span class="number">1</span>) &#123;</span><br><span class="line">        num</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        num * fun04(num - <span class="number">1</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> i: <span class="type">Int</span> = fun04(<span class="number">4</span>)</span><br><span class="line">    println(i)</span><br><span class="line"></span><br><span class="line">    println(<span class="string">"-------3.默认值函数----------"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fun05</span></span>(a: <span class="type">Int</span> = <span class="number">8</span>, b: <span class="type">String</span> = <span class="string">"abc"</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">      println(<span class="string">s"<span class="subst">$a</span>\t<span class="subst">$b</span>"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//    fun05(9,"def")</span></span><br><span class="line">    fun05(<span class="number">22</span>)</span><br><span class="line">    fun05(b = <span class="string">"ooxx"</span>)</span><br><span class="line"></span><br><span class="line">    println(<span class="string">"-------4.匿名函数----------"</span>)</span><br><span class="line">    <span class="comment">//函数是第一类值</span></span><br><span class="line">    <span class="comment">//函数：</span></span><br><span class="line">    <span class="comment">//1，签名 ：(Int,Int)=&gt;Int ：  （参数类型列表）=&gt; 返回值类型</span></span><br><span class="line">    <span class="comment">//2，匿名函数： (a:Int,b:Int) =&gt; &#123; a+b &#125;  ：（参数实现列表）=&gt; 函数体</span></span><br><span class="line">    <span class="keyword">var</span> xx: <span class="type">Int</span> = <span class="number">3</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> yy: (<span class="type">Int</span>, <span class="type">Int</span>) =&gt; <span class="type">Int</span> = (a: <span class="type">Int</span>, b: <span class="type">Int</span>) =&gt; &#123;</span><br><span class="line">      a + b</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> w: <span class="type">Int</span> = yy(<span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">    println(w)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    println(<span class="string">"--------5.嵌套函数---------"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fun06</span></span>(a: <span class="type">String</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">fun05</span></span>(): <span class="type">Unit</span> = &#123;</span><br><span class="line">        println(a)</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      fun05()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fun06(<span class="string">"hello"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    println(<span class="string">"--------6.偏应用函数---------"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fun07</span></span>(date: <span class="type">Date</span>, tp: <span class="type">String</span>, msg: <span class="type">String</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line"></span><br><span class="line">      println(<span class="string">s"<span class="subst">$date</span>\t<span class="subst">$tp</span>\t<span class="subst">$msg</span>"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fun07(<span class="keyword">new</span> <span class="type">Date</span>(), <span class="string">"info"</span>, <span class="string">"ok"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> info = fun07(_: <span class="type">Date</span>, <span class="string">"info"</span>, _: <span class="type">String</span>)</span><br><span class="line">    <span class="keyword">var</span> error = fun07(_: <span class="type">Date</span>, <span class="string">"error"</span>, _: <span class="type">String</span>)</span><br><span class="line">    info(<span class="keyword">new</span> <span class="type">Date</span>, <span class="string">"ok"</span>)</span><br><span class="line">    error(<span class="keyword">new</span> <span class="type">Date</span>, <span class="string">"error..."</span>)</span><br><span class="line"></span><br><span class="line">    println(<span class="string">"--------7.可变参数---------"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fun08</span></span>(a: <span class="type">Int</span>*): <span class="type">Unit</span> = &#123;</span><br><span class="line">      <span class="keyword">for</span> (e &lt;- a) &#123;</span><br><span class="line">        println(e)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//      def foreach[U](f: A =&gt; U): Unit</span></span><br><span class="line">      <span class="comment">//      a.foreach(   (x:Int)=&gt;&#123;println(x)&#125;   )</span></span><br><span class="line">      <span class="comment">//      a.foreach(   println(_)   )</span></span><br><span class="line">      a.foreach(println)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fun08(<span class="number">2</span>)</span><br><span class="line">    fun08(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)</span><br><span class="line"></span><br><span class="line">    println(<span class="string">"--------8.高阶函数---------"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//函数作为参数，函数作为返回值</span></span><br><span class="line">    <span class="comment">//函数作为参数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">computer</span></span>(a: <span class="type">Int</span>, b: <span class="type">Int</span>, f: (<span class="type">Int</span>, <span class="type">Int</span>) =&gt; <span class="type">Int</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">      <span class="keyword">val</span> res: <span class="type">Int</span> = f(a, b)</span><br><span class="line">      println(res)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    computer(<span class="number">3</span>, <span class="number">8</span>, (x: <span class="type">Int</span>, y: <span class="type">Int</span>) =&gt; &#123;</span><br><span class="line">      x + y</span><br><span class="line">    &#125;)</span><br><span class="line">    computer(<span class="number">3</span>, <span class="number">8</span>, (x: <span class="type">Int</span>, y: <span class="type">Int</span>) =&gt; &#123;</span><br><span class="line">      x * y</span><br><span class="line">    &#125;)</span><br><span class="line">    computer(<span class="number">3</span>, <span class="number">8</span>, _ * _)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//函数作为返回值：</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">factory</span></span>(i: <span class="type">String</span>): (<span class="type">Int</span>, <span class="type">Int</span>) =&gt; <span class="type">Int</span> = &#123;</span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">plus</span></span>(x: <span class="type">Int</span>, y: <span class="type">Int</span>): <span class="type">Int</span> = &#123;</span><br><span class="line">        x + y</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (i.equals(<span class="string">"+"</span>)) &#123;</span><br><span class="line">        plus</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        (x: <span class="type">Int</span>, y: <span class="type">Int</span>) =&gt; &#123;</span><br><span class="line">          x * y</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    computer(<span class="number">3</span>, <span class="number">8</span>, factory(<span class="string">"-"</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    println(<span class="string">"--------9.柯里化---------"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fun09</span></span>(a: <span class="type">Int</span>)(b: <span class="type">Int</span>)(c: <span class="type">String</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">      println(<span class="string">s"<span class="subst">$a</span>\t<span class="subst">$b</span>\t<span class="subst">$c</span>"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fun09(<span class="number">3</span>)(<span class="number">8</span>)(<span class="string">"sdfsdf"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fun10</span></span>(a: <span class="type">Int</span>*)(b: <span class="type">String</span>*): <span class="type">Unit</span> = &#123;</span><br><span class="line">      a.foreach(println)</span><br><span class="line">      b.foreach(println)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fun10(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)(<span class="string">"sdfs"</span>, <span class="string">"sss"</span>)</span><br><span class="line"></span><br><span class="line">    println(<span class="string">"--------*.方法---------"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方法不想执行，赋值给一个引用  方法名+空格+下划线</span></span><br><span class="line">    <span class="keyword">val</span> funa = ooxx</span><br><span class="line">    println(funa)</span><br><span class="line">    <span class="keyword">val</span> func = ooxx _</span><br><span class="line">    func()</span><br><span class="line"></span><br><span class="line">    <span class="comment">//语法 -&gt;  编译器  -&gt;  字节码   &lt;-  jvm规则</span></span><br><span class="line">    <span class="comment">//编译器，衔接 人  机器</span></span><br><span class="line">    <span class="comment">//java 中 +： 关键字</span></span><br><span class="line">    <span class="comment">//scala中+： 方法/函数</span></span><br><span class="line">    <span class="comment">//scala语法中，没有基本类型，所以你写一个数字  3  编辑器/语法，其实是把 3 看待成Int这个对象</span></span><br><span class="line">    <span class="comment">//    3 + 2</span></span><br><span class="line">    <span class="comment">//    3.+(2)</span></span><br><span class="line">    <span class="comment">//    3:Int</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;简介：&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Scala学习" scheme="https://shang.at/categories/Scala%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Scala方法" scheme="https://shang.at/tags/Scala%E6%96%B9%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Scala学习-控制语句</title>
    <link href="https://shang.at/post/Scala%E5%AD%A6%E4%B9%A0-1-%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5/"/>
    <id>https://shang.at/post/Scala学习-1-控制语句/</id>
    <published>2020-07-26T08:19:07.000Z</published>
    <updated>2020-07-26T08:23:54.457Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>简介：</p></blockquote><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;简介：&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Scala学习" scheme="https://shang.at/categories/Scala%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Scala控制语句" scheme="https://shang.at/tags/Scala%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5/"/>
    
  </entry>
  
  <entry>
    <title>Scala学习-类型</title>
    <link href="https://shang.at/post/Scala%E5%AD%A6%E4%B9%A0-0-%E7%B1%BB%E5%9E%8B/"/>
    <id>https://shang.at/post/Scala学习-0-类型/</id>
    <published>2020-07-26T08:18:55.000Z</published>
    <updated>2020-07-26T08:22:59.854Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>简介：</p></blockquote><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;简介：&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Scala学习" scheme="https://shang.at/categories/Scala%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Scala类型" scheme="https://shang.at/tags/Scala%E7%B1%BB%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>工具使用-编译工具-maven</title>
    <link href="https://shang.at/post/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8-%E7%BC%96%E8%AF%91%E5%B7%A5%E5%85%B7-maven/"/>
    <id>https://shang.at/post/工具使用-编译工具-maven/</id>
    <published>2020-07-24T10:06:19.000Z</published>
    <updated>2020-07-24T10:53:51.375Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>简介：</p></blockquote><a id="more"></a><h3 id="maven配置"><a href="#maven配置" class="headerlink" title="maven配置"></a>maven配置</h3><h4 id="settings"><a href="#settings" class="headerlink" title="settings"></a>settings</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--需要改成自己的maven的本地仓库地址--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>~/.m2/repository<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">mirrors</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>alimaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">name</span>&gt;</span>local private nexus<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.oschina.net/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">releases</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">name</span>&gt;</span>local private nexus<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.oschina.net/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">releases</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure><p>localRepository</p><p>​    本地maven仓库路径</p><p>pluginGroups</p><p>proxies</p><p>​    代理设置</p><p>servers</p><p>mirrors</p><p>profiles</p><p>activeProfiles</p><h4 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h4><h3 id="maven的常见命令"><a href="#maven的常见命令" class="headerlink" title="maven的常见命令"></a>maven的常见命令</h3><p>项目编译：<code>mvn clean package -Dmaven.test.skip</code></p><p>使用指定的setting.xml文件：<code>mvn clean package --settings ~/.m2/settings.xml.fast -Dmaven.test.skip</code></p><p>收集项目所依赖的lib：<code>mvn dependency:copy-dependencies -DoutputDirectory=lib</code></p><p>下载源码：<code>mvn dependency:sources</code></p><h3 id="将jar包安装到本地仓库"><a href="#将jar包安装到本地仓库" class="headerlink" title="将jar包安装到本地仓库"></a>将jar包安装到本地仓库</h3><p><code>mvn install:install-file -Dfile=... -DgroupId=... -DartifactId=... -Dversion=... -Dpackaging=jar</code></p><p>如：<code>mvn install:install-file -Dfile=IKAnalyzer2012_FF.jar -DgroupId=org.wltea.ik-analyzer -DartifactId=ik-analyzer -Dversion=5.0.0 -Dpackaging=jar</code></p><h3 id="将jar包发布到私服"><a href="#将jar包发布到私服" class="headerlink" title="将jar包发布到私服"></a>将jar包发布到私服</h3><p><code>mvn deploy:deploy-file -DgroupId=... -DartifactId=... -Dversion=... -Dgenertatepom=true -Dpackaging=jar  -Dfile=...  -Durl=...</code></p><p><code>mvn deploy:deploy-file --settings ~/.m2/settings.xml -DgroupId=sqlline -DartifactId=sqlline -Dversion=1.1.8 -Dgenertatepom=true -Dpackaging=jar  -Dfile=/Users/wangshang/.m2/repository/sqlline/sqlline/1.1.8/sqlline-1.1.8.jar -Durl=... -DrepositoryId=archiva.internal</code></p><p>如果是本地项目打包上传需要到私服，需要在pom.xml文件和maven的settings.xml配置文件中做类似如下的配置：</p><p>pom.xml   配置要上传的私服地址</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">distributionManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>archiva.internal<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>Internal Release Repository<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">url</span>&gt;</span>...<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">snapshotRepository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>archiva.snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>Internal Snapshot Repository<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>...<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">snapshotRepository</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">distributionManagement</span>&gt;</span></span><br></pre></td></tr></table></figure><p>settings.xml 配置私服的认证信息</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>archiva.internal<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">username</span>&gt;</span>...<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">password</span>&gt;</span>...<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>archiva.snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">username</span>&gt;</span>...<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">password</span>&gt;</span>...<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servers</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;简介：&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="工具使用" scheme="https://shang.at/categories/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/"/>
    
    
      <category term="maven" scheme="https://shang.at/tags/maven/"/>
    
  </entry>
  
  <entry>
    <title>数据结构与算法-左神学习笔记12-暴力递归到动态规划1-4</title>
    <link href="https://shang.at/post/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-%E5%B7%A6%E7%A5%9E%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B012-%E6%9A%B4%E5%8A%9B%E8%A7%84%E5%88%92%E5%88%B0%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%921-4/"/>
    <id>https://shang.at/post/数据结构与算法-左神学习笔记12-暴力规划到动态规划1-4/</id>
    <published>2020-07-23T04:19:14.000Z</published>
    <updated>2020-07-23T06:00:30.532Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>简介：</p></blockquote><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;简介：&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="数据结构与算法" scheme="https://shang.at/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="左神学习笔记" scheme="https://shang.at/tags/%E5%B7%A6%E7%A5%9E%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>数据结构与算法-左神学习笔记11-动态规划</title>
    <link href="https://shang.at/post/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-%E5%B7%A6%E7%A5%9E%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B011-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    <id>https://shang.at/post/数据结构与算法-左神学习笔记11-动态规划/</id>
    <published>2020-07-23T04:18:52.000Z</published>
    <updated>2020-07-23T06:00:26.672Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>简介：</p></blockquote><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;简介：&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="数据结构与算法" scheme="https://shang.at/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="左神学习笔记" scheme="https://shang.at/tags/%E5%B7%A6%E7%A5%9E%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>数据结构与算法-左神学习笔记10-暴力递归</title>
    <link href="https://shang.at/post/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-%E5%B7%A6%E7%A5%9E%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B010-%E6%9A%B4%E5%8A%9B%E9%80%92%E5%BD%92/"/>
    <id>https://shang.at/post/数据结构与算法-左神学习笔记10-暴力递归/</id>
    <published>2020-07-23T04:18:43.000Z</published>
    <updated>2020-07-23T06:00:24.432Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>简介：</p></blockquote><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;简介：&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="数据结构与算法" scheme="https://shang.at/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="左神学习笔记" scheme="https://shang.at/tags/%E5%B7%A6%E7%A5%9E%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>数据结构与算法-左神学习笔记9-并查集&amp;图</title>
    <link href="https://shang.at/post/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-%E5%B7%A6%E7%A5%9E%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B09-%E5%B9%B6%E6%9F%A5%E9%9B%86-%E5%9B%BE/"/>
    <id>https://shang.at/post/数据结构与算法-左神学习笔记9-并查集-图/</id>
    <published>2020-07-23T04:18:31.000Z</published>
    <updated>2020-07-23T06:00:21.358Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>简介：</p></blockquote><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;简介：&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="数据结构与算法" scheme="https://shang.at/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="左神学习笔记" scheme="https://shang.at/tags/%E5%B7%A6%E7%A5%9E%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>数据结构与算法-左神学习笔记8-贪心算法</title>
    <link href="https://shang.at/post/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-%E5%B7%A6%E7%A5%9E%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B08-%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/"/>
    <id>https://shang.at/post/数据结构与算法-左神学习笔记8-贪心算法/</id>
    <published>2020-07-23T04:18:15.000Z</published>
    <updated>2020-07-23T06:00:18.411Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>简介：</p></blockquote><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;简介：&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="数据结构与算法" scheme="https://shang.at/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="左神学习笔记" scheme="https://shang.at/tags/%E5%B7%A6%E7%A5%9E%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>数据结构与算法-左神学习笔记7-二叉树的递归套路</title>
    <link href="https://shang.at/post/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-%E5%B7%A6%E7%A5%9E%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B07-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%80%92%E5%BD%92%E5%A5%97%E8%B7%AF/"/>
    <id>https://shang.at/post/数据结构与算法-左神学习笔记7-二叉树的递归套路/</id>
    <published>2020-07-23T04:18:05.000Z</published>
    <updated>2020-07-23T06:00:15.894Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>简介：</p></blockquote><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;简介：&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="数据结构与算法" scheme="https://shang.at/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="左神学习笔记" scheme="https://shang.at/tags/%E5%B7%A6%E7%A5%9E%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>数据结构与算法-左神学习笔记6-链表相关面试题</title>
    <link href="https://shang.at/post/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-%E5%B7%A6%E7%A5%9E%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B06-%E9%93%BE%E8%A1%A8%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <id>https://shang.at/post/数据结构与算法-左神学习笔记6-链表相关面试题/</id>
    <published>2020-07-23T04:17:43.000Z</published>
    <updated>2020-07-24T10:06:39.139Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>简介：</p></blockquote><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;简介：&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="数据结构与算法" scheme="https://shang.at/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="左神学习笔记" scheme="https://shang.at/tags/%E5%B7%A6%E7%A5%9E%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>数据结构与算法-左神学习笔记5-Trie&amp;桶排序&amp;排序总结</title>
    <link href="https://shang.at/post/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-%E5%B7%A6%E7%A5%9E%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B05-Trie-%E6%A1%B6%E6%8E%92%E5%BA%8F-%E6%8E%92%E5%BA%8F%E6%80%BB%E7%BB%93/"/>
    <id>https://shang.at/post/数据结构与算法-左神学习笔记5-Trie-桶排序-排序总结/</id>
    <published>2020-07-23T04:17:29.000Z</published>
    <updated>2020-07-23T06:00:10.925Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>简介：</p></blockquote><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;简介：&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="数据结构与算法" scheme="https://shang.at/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="左神学习笔记" scheme="https://shang.at/tags/%E5%B7%A6%E7%A5%9E%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>数据结构与算法-左神学习笔记4-比较器&amp;堆</title>
    <link href="https://shang.at/post/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-%E5%B7%A6%E7%A5%9E%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B04-%E6%AF%94%E8%BE%83%E5%99%A8-%E5%A0%86/"/>
    <id>https://shang.at/post/数据结构与算法-左神学习笔记4-比较器-堆/</id>
    <published>2020-07-23T04:17:04.000Z</published>
    <updated>2020-07-23T06:00:08.521Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>简介：</p></blockquote><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;简介：&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="数据结构与算法" scheme="https://shang.at/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="左神学习笔记" scheme="https://shang.at/tags/%E5%B7%A6%E7%A5%9E%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
</feed>
