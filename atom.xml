<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>努力，奋斗</title>
  
  <subtitle>记录学习</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://shang.at/"/>
  <updated>2020-05-31T23:37:26.809Z</updated>
  <id>https://shang.at/</id>
  
  <author>
    <name>王尚</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>数据结构与算法学习笔记-内存不足</title>
    <link href="https://shang.at/post/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%86%85%E5%AD%98%E4%B8%8D%E8%B6%B3/"/>
    <id>https://shang.at/post/数据结构与算法学习笔记-内存不足/</id>
    <published>2020-05-31T23:35:34.000Z</published>
    <updated>2020-05-31T23:37:26.809Z</updated>
    
    <content type="html"><![CDATA[<p>中位数定义：数字排序之后，位于中间的那个数。比如将100亿个数字进行排序，排序之后，位于第50亿个位置的那个数 就是中位数。 </p><p>  ①内存够：内存够还慌什么啊，直接把100亿个全部排序了，你用冒泡都可以…然后找到中间那个就可以了。但是你以为面试官会给你内存？？ </p><p>  ②内存不够：题目说是整数，我们认为是带符号的int,所以4字节，占32位。 </p><p>  假设100亿个数字保存在一个大文件中，依次读一部分文件到内存(不超过内存的限制)，将每个数字用二进制表示，比较二进制的最高位(第32位，符号位，0是正，1是负)，如果数字的最高位为0，则将这个数字写入 file_0文件中；如果最高位为 1，则将该数字写入file_1文件中。 </p><p>  从而将100亿个数字分成了两个文件，假设 file_0文件中有 60亿 个数字，file_1文件中有 40亿 个数字。那么中位数就在 file_0 文件中，并且是 file_0 文件中所有数字排序之后的第 10亿 个数字。（file_1中的数都是负数，file_0中的数都是正数，也即这里一共只有40亿个负数，那么排序之后的第50亿个数一定位于file_0中） </p><p>  现在，我们只需要处理 file_0 文件了（不需要再考虑file_1文件）。对于 file_0 文件，同样采取上面的措施处理：将file_0文件依次读一部分到内存(不超内存限制)，将每个数字用二进制表示，比较二进制的 次高位（第31位），如果数字的次高位为0，写入file_0_0文件中；如果次高位为1，写入file_0_1文件 中。 </p><p>  现假设 file_0_0文件中有30亿个数字，file_0_1中也有30亿个数字，则中位数就是：file_0_0文件中的数字从小到大排序之后的第10亿个数字。 </p><p>  抛弃file_0_1文件，继续对 file_0_0文件 根据 次次高位(第30位) 划分，假设此次划分的两个文件为：file_0_0_0中有5亿个数字，file_0_0_1中有25亿个数字，那么中位数就是 file_0_0_1文件中的所有数字排序之后的 第 5亿 个数。 </p><p>  按照上述思路，直到划分的文件可直接加载进内存时，就可以直接对数字进行快速排序，找出中位数了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;中位数定义：数字排序之后，位于中间的那个数。比如将100亿个数字进行排序，排序之后，位于第50亿个位置的那个数 就是中位数。 &lt;/p&gt;
&lt;p&gt;  ①内存够：内存够还慌什么啊，直接把100亿个全部排序了，你用冒泡都可以…然后找到中间那个就可以了。但是你以为面试官会给你内存？？
      
    
    </summary>
    
      <category term="数据结构与算法" scheme="https://shang.at/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="外排-分组归并-桶排序" scheme="https://shang.at/tags/%E5%A4%96%E6%8E%92-%E5%88%86%E7%BB%84%E5%BD%92%E5%B9%B6-%E6%A1%B6%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>Java学习-Future</title>
    <link href="https://shang.at/post/Java%E5%AD%A6%E4%B9%A0-Future/"/>
    <id>https://shang.at/post/Java学习-Future/</id>
    <published>2020-05-31T22:44:35.000Z</published>
    <updated>2020-05-31T22:45:01.561Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="JAVA源码" scheme="https://shang.at/categories/JAVA%E6%BA%90%E7%A0%81/"/>
    
    
      <category term="并发编程-Future" scheme="https://shang.at/tags/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-Future/"/>
    
  </entry>
  
  <entry>
    <title>Python学习-一些常见的操作</title>
    <link href="https://shang.at/post/Python%E5%AD%A6%E4%B9%A0-%E4%B8%80%E4%BA%9B%E5%B8%B8%E8%A7%81%E7%9A%84%E6%93%8D%E4%BD%9C/"/>
    <id>https://shang.at/post/Python学习-一些常见的操作/</id>
    <published>2020-05-29T09:15:13.000Z</published>
    <updated>2020-05-30T01:49:14.370Z</updated>
    
    <content type="html"><![CDATA[<ul><li>如何初始化一个一维数组</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n=<span class="number">10</span></span><br><span class="line">l = [<span class="number">0</span>]*n</span><br><span class="line">l1 = [<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> range(n)]</span><br></pre></td></tr></table></figure><ul><li>如何初始化一个二维数组</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">m, n = <span class="number">10</span>, <span class="number">7</span></span><br><span class="line">l = [[<span class="number">0</span>]*m]*n   <span class="comment"># 会有赋值问题：n个[0]*m 实际上都是同一个对象</span></span><br><span class="line">l1 = [[<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> range(m)] <span class="keyword">for</span> _ <span class="keyword">in</span> range(n)]  <span class="comment"># 没有赋值问题</span></span><br></pre></td></tr></table></figure><ul><li>如何初始化一个二维数组并且设置右边界和下边界为1(根据实际情况处理)</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">m, n = <span class="number">10</span>, <span class="number">7</span></span><br><span class="line">dp = [[<span class="number">1</span> <span class="keyword">if</span> i == m - <span class="number">1</span> <span class="keyword">or</span> j == n - <span class="number">1</span> <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(m)] <span class="keyword">for</span> j <span class="keyword">in</span> range(n)]</span><br></pre></td></tr></table></figure><ul><li>正序遍历</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n=<span class="number">10</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure><ul><li>倒序遍历</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n=<span class="number">10</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(n<span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure><ul><li>二维数组一维化</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> chain</span><br><span class="line">b=[[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>], [<span class="number">5</span>,<span class="number">8</span>], [<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]]</span><br><span class="line">c=list(chain(*b))</span><br><span class="line">print(c)</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line"><span class="comment">### --------------------------------------------------------------------------------</span></span><br><span class="line">ab = [[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>], [<span class="number">5</span>,<span class="number">8</span>], [<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]]</span><br><span class="line">print([i <span class="keyword">for</span> item <span class="keyword">in</span> ab <span class="keyword">for</span> i <span class="keyword">in</span> item])</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line"><span class="comment">### --------------------------------------------------------------------------------</span></span><br><span class="line"><span class="keyword">import</span> operator</span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line">a = [[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>], [<span class="number">4</span>,<span class="number">6</span>], [<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">8</span>]]</span><br><span class="line">print(reduce(operator.add, a))</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">8</span>]</span><br><span class="line"><span class="comment">### --------------------------------------------------------------------------------</span></span><br><span class="line">a = [[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>], [<span class="number">5</span>, <span class="number">8</span>], [<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]]</span><br><span class="line">l=[]</span><br><span class="line"><span class="keyword">for</span> m <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">3</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> a[m]:</span><br><span class="line">        l.append(i)</span><br><span class="line">print(l)</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line"><span class="comment">### --------------------------------------------------------------------------------</span></span><br><span class="line">a=[[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>], [<span class="number">5</span>,<span class="number">8</span>], [<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]]</span><br><span class="line">a= eval(<span class="string">'['</span>+str(a).replace(<span class="string">' '</span>,<span class="string">''</span>).replace(<span class="string">'['</span>,<span class="string">''</span>).replace(<span class="string">']'</span>,<span class="string">''</span>)+<span class="string">']'</span>)</span><br><span class="line">print(a)</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line"><span class="comment">### --------------------------------------------------------------------------------</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">flatten</span><span class="params">(a)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> isinstance(a, (list, )):</span><br><span class="line">        <span class="keyword">return</span> [a]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        b = []</span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> a:</span><br><span class="line">            b += flatten(item)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    a = [[[<span class="number">1</span>,<span class="number">2</span>],<span class="number">3</span>],[<span class="number">4</span>,[<span class="number">5</span>,<span class="number">6</span>]],[<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]]</span><br><span class="line">    print(flatten(a))</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line"><span class="comment">### --------------------------------------------------------------------------------</span></span><br></pre></td></tr></table></figure><ul><li>如何拷贝一个一维数组</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">y = x[:]</span><br></pre></td></tr></table></figure><ul><li>如何拷贝一个二维数组</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">### --------------------------------------------------------------------------------</span></span><br><span class="line">x=[[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>], [<span class="number">4</span>,<span class="number">6</span>]]</span><br><span class="line">y = [row[:] <span class="keyword">for</span> row <span class="keyword">in</span> x]</span><br><span class="line"><span class="comment">### --------------------------------------------------------------------------------</span></span><br><span class="line">x=[[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>], [<span class="number">4</span>,<span class="number">6</span>]]</span><br><span class="line"><span class="keyword">from</span> copy <span class="keyword">import</span> copy, deepcopy</span><br><span class="line">y = deepcopy(x)</span><br><span class="line"><span class="comment">### --------------------------------------------------------------------------------</span></span><br><span class="line">old_array = [[<span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>]]</span><br><span class="line"><span class="comment"># python2.*</span></span><br><span class="line">new_array = map(list, old_array)</span><br><span class="line"><span class="comment"># python3.*</span></span><br><span class="line">new_array = list(map(list, old_array))</span><br><span class="line"><span class="comment">### --------------------------------------------------------------------------------</span></span><br><span class="line">arr = [[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>]]</span><br><span class="line"></span><br><span class="line">deepcopy1d2d = <span class="keyword">lambda</span> lVals: [x <span class="keyword">if</span> <span class="keyword">not</span> isinstance(x, list) <span class="keyword">else</span> x[:] <span class="keyword">for</span> x <span class="keyword">in</span> lVals]</span><br><span class="line"></span><br><span class="line">dst = deepcopy1d2d(arr)</span><br><span class="line"></span><br><span class="line">dst[<span class="number">1</span>][<span class="number">1</span>]=<span class="number">150</span></span><br><span class="line"><span class="keyword">print</span> dst</span><br><span class="line"><span class="keyword">print</span> arr</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;如何初始化一个一维数组&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;n=&lt;span class=&quot;number&quot;&gt;
      
    
    </summary>
    
      <category term="Python" scheme="https://shang.at/categories/Python/"/>
    
    
      <category term="常见操作技巧" scheme="https://shang.at/tags/%E5%B8%B8%E8%A7%81%E6%93%8D%E4%BD%9C%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>Python学习-lru_cache</title>
    <link href="https://shang.at/post/Python%E5%AD%A6%E4%B9%A0-lru-cache/"/>
    <id>https://shang.at/post/Python学习-lru-cache/</id>
    <published>2020-05-28T01:48:49.000Z</published>
    <updated>2020-05-28T01:49:40.668Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="Python" scheme="https://shang.at/categories/Python/"/>
    
    
      <category term="lru_cache" scheme="https://shang.at/tags/lru-cache/"/>
    
  </entry>
  
  <entry>
    <title>Java学习-Thread</title>
    <link href="https://shang.at/post/Java%E5%AD%A6%E4%B9%A0-Thread/"/>
    <id>https://shang.at/post/Java学习-Thread/</id>
    <published>2020-05-24T11:17:33.000Z</published>
    <updated>2020-05-25T10:04:55.397Z</updated>
    
    <content type="html"><![CDATA[<h4 id="线程的基本概念"><a href="#线程的基本概念" class="headerlink" title="线程的基本概念"></a>线程的基本概念</h4><p>进程：每个进程都有独立的代码和数据空间（进程上下文），进程间的切换会有较大的开销，一个进程包含1–n个线程。（进程是资源分配的最小单位）<br>线程：同一类线程共享代码和数据空间，每个线程有独立的运行栈和程序计数器(PC)，线程切换开销小。（线程是cpu调度的最小单位）</p><h4 id="线程的状态"><a href="#线程的状态" class="headerlink" title="线程的状态"></a>线程的状态</h4><p>创建、就绪、运行、阻塞、终止</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gf4q1vrvkuj30fa0awaal.jpg" alt></p><ol><li>创建：新创建的一个线程对象</li><li>就绪：线程对象创建成功后，其他的线程调用该对象的start方法。该状态的线程位于可运行线程池内，变的可运行，等待获取CPU的使用权呢</li><li>运行：就绪状态的线程获取了CPU使用权，执行程序代码</li><li>阻塞：阻塞状态是线程因为某种原因放弃了CPU使用权，暂停运行。直到线程再次进入就绪状态，才有机会转到运行状态。阻塞的情况分为以下三种：<ol><li>等待阻塞：运行的线程执行wait方法，JVM会把该线程放入等待池中<strong>(wait会释放持有的锁)</strong></li><li>同步阻塞：运行的线程在获取对象同步锁的时，如果该同步锁被别的线程占用，则JVM会把改线程放入锁池中</li><li>其他阻塞：运行的线程执行sleep或join方法，或者发出了I/O(文件读写、网络请求)请求，JVM会把该线程置为阻塞状态。当sleep状态超时、join等待线程终止或者超时、或者I/O处理完毕时，线程重新转入就绪状态<strong>(sleep不会释放持有的锁)</strong></li></ol></li><li>终止：线程执行完了或者因异常推出了run方法，该线程结束生命周期</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;线程的基本概念&quot;&gt;&lt;a href=&quot;#线程的基本概念&quot; class=&quot;headerlink&quot; title=&quot;线程的基本概念&quot;&gt;&lt;/a&gt;线程的基本概念&lt;/h4&gt;&lt;p&gt;进程：每个进程都有独立的代码和数据空间（进程上下文），进程间的切换会有较大的开销，一个进程包含1–n
      
    
    </summary>
    
      <category term="JAVA源码" scheme="https://shang.at/categories/JAVA%E6%BA%90%E7%A0%81/"/>
    
    
      <category term="并发编程-Thread" scheme="https://shang.at/tags/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-Thread/"/>
    
  </entry>
  
  <entry>
    <title>Java学习-并发编程</title>
    <link href="https://shang.at/post/Java%E5%AD%A6%E4%B9%A0-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    <id>https://shang.at/post/Java学习-并发编程/</id>
    <published>2020-05-24T10:46:42.000Z</published>
    <updated>2020-05-24T11:18:03.790Z</updated>
    
    <content type="html"><![CDATA[<p>Java中的并发编程是指：如何协调多个线程来共同完成一件任务，其中最主要的就是如何处理共享数据</p><p>并发编程是为了充分利用计算机处理器资源，提高系统吞吐量，提高程序执行效率而逐步演化出来的一种编程模式，它主要解决了以下的一些问题：</p><ol><li>充分发挥多处理器的强大能力<ol><li>现在处理器的基本调度单位是线程，多线程程序可以充分发挥多处理器的能力</li></ol></li><li>让异步编程更加简单<ol><li>对于一个需要IO操作(耗时)的事件，可以让它在一个独立的线程中处理，而不会使主流程卡顿</li></ol></li><li>让程序建模更加简单<ol><li>可以将复杂的工作流分解为一组简单的工作流，每个工作流放到一个线程中独立执行，只在特定的同步位置进行交互</li></ol></li><li>等</li></ol><p>JAVA中的并发编程实际上就是面向线程编程，其中最主要的问题就是处理线程间数据共享的问题。因此诞生了很多同步技术：</p><ul><li><a href="/post/Java学习-Thread">JAVA中的Thread</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Java中的并发编程是指：如何协调多个线程来共同完成一件任务，其中最主要的就是如何处理共享数据&lt;/p&gt;
&lt;p&gt;并发编程是为了充分利用计算机处理器资源，提高系统吞吐量，提高程序执行效率而逐步演化出来的一种编程模式，它主要解决了以下的一些问题：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;充分发
      
    
    </summary>
    
      <category term="JAVA源码" scheme="https://shang.at/categories/JAVA%E6%BA%90%E7%A0%81/"/>
    
    
      <category term="并发编程" scheme="https://shang.at/tags/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Java学习-JVM</title>
    <link href="https://shang.at/post/Java%E5%AD%A6%E4%B9%A0-JVM/"/>
    <id>https://shang.at/post/Java学习-JVM/</id>
    <published>2020-05-24T10:42:22.000Z</published>
    <updated>2020-05-24T10:42:57.262Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="JAVA学习" scheme="https://shang.at/categories/JAVA%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="JVM" scheme="https://shang.at/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>Java学习-wait&amp;notify</title>
    <link href="https://shang.at/post/Java%E5%AD%A6%E4%B9%A0-wait-notify/"/>
    <id>https://shang.at/post/Java学习-wait-notify/</id>
    <published>2020-05-22T05:09:37.000Z</published>
    <updated>2020-05-24T10:46:59.543Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="JAVA源码" scheme="https://shang.at/categories/JAVA%E6%BA%90%E7%A0%81/"/>
    
    
      <category term="并发编程" scheme="https://shang.at/tags/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Java学习-Timer</title>
    <link href="https://shang.at/post/Java%E5%AD%A6%E4%B9%A0-Timer/"/>
    <id>https://shang.at/post/Java学习-Timer/</id>
    <published>2020-05-22T02:31:16.000Z</published>
    <updated>2020-05-22T02:31:16.871Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Java学习-NIO</title>
    <link href="https://shang.at/post/Java%E5%AD%A6%E4%B9%A0-NIO/"/>
    <id>https://shang.at/post/Java学习-NIO/</id>
    <published>2020-05-19T18:46:53.000Z</published>
    <updated>2020-05-20T02:54:52.451Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/duanxz/p/6782783.html" target="_blank" rel="noopener">Java NIO系列教程（六） 多路复用器Selector</a></p><p>ServerSocketChannel：一个面向流的侦听套接字 通道。用于监听是否有新的连接到来，可以调用accept函数获取到来的连接(SocketChannel)</p><p>SocketChannel：一个面向流的连接套接字 通道。用于从连接中读取数据，和向连接写入数据</p><p>Selector：选择器，可以管理一批注册的通道集合的信息和它们的就绪状态(OP_CONNECT|OP_ACCEPT|OP_READ|OP_WRITE)</p><p>SelectionKey：选择键封装了特定的<strong>通道</strong>与<strong>特定的选择器</strong>的注册关系，一个key就代表了一个channel</p><p>SelectableChannel可以被注册到Selector对象上，然后调用Selector.select()方法可以更新SelectionKeys(即处于某种就绪状态的通道集合)，然后我们就可以遍历这些通过处理相应的事件。比如连接就绪的通道，我们会把他们注册成读状态，等待它读就绪；连接读就绪，我们就可以从中读取数据；连接写就绪，我们就可以向连接写数据</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/duanxz/p/6782783.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Java NIO系列教程（六） 多路复用器Selector&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ServerSoc
      
    
    </summary>
    
      <category term="JAVA源码" scheme="https://shang.at/categories/JAVA%E6%BA%90%E7%A0%81/"/>
    
    
      <category term="NIO" scheme="https://shang.at/tags/NIO/"/>
    
  </entry>
  
  <entry>
    <title>Java学习-线程安全的集合类</title>
    <link href="https://shang.at/post/Java%E5%AD%A6%E4%B9%A0-%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E7%9A%84%E9%9B%86%E5%90%88%E7%B1%BB/"/>
    <id>https://shang.at/post/Java学习-线程安全的集合类/</id>
    <published>2020-05-17T15:16:15.000Z</published>
    <updated>2020-05-17T15:16:15.157Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Java学习-Iterator</title>
    <link href="https://shang.at/post/Java%E5%AD%A6%E4%B9%A0-Iterator/"/>
    <id>https://shang.at/post/Java学习-Iterator/</id>
    <published>2020-05-17T07:27:13.000Z</published>
    <updated>2020-05-17T07:55:27.700Z</updated>
    
    <content type="html"><![CDATA[<p>在看Iterator之前，先看一个早期版本的迭代器java.util.Enumeration</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Enumeration</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">hasMoreElements</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">E <span class="title">nextElement</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* NOTE: The functionality of this interface is duplicated by the Iterator</span><br><span class="line">* interface.  In addition, Iterator adds an optional remove operation, and</span><br><span class="line">* has shorter method names.  New implementations should consider using</span><br><span class="line">* Iterator in preference to Enumeration.</span><br></pre></td></tr></table></figure><p>现在来看Iterator：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Iterator</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">E <span class="title">next</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(<span class="string">"remove"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">forEachRemaining</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> E&gt; action)</span> </span>&#123;</span><br><span class="line">        Objects.requireNonNull(action);</span><br><span class="line">        <span class="keyword">while</span> (hasNext())</span><br><span class="line">            action.accept(next());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意的点：</p><ul><li>Iterator在好的设计下可以在遍历的过程中对列表进行增加和删除和修改元素</li><li>Iterator在遍历的过程只能进行一遍，即遍历完的对象不能再次遍历，<ul><li>因为大多数Iterator在实现的过程中都是维护了了cursor指针，这个指针一般只会增加，不会减少</li><li>同时大都没有充值cursor指针的接口</li><li>关键是看Iterator的设计如何</li></ul></li></ul><p>例如下面的ListIterator</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ListIterator</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">Iterator</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">E <span class="title">next</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">hasPrevious</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">E <span class="title">previous</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">nextIndex</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">previousIndex</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">set</span><span class="params">(E e)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(E e)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ListIterator在原来的Iterator的基础上扩展了，使之可以往前遍历，同时可以修改和增加元素</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在看Iterator之前，先看一个早期版本的迭代器java.util.Enumeration&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;sp
      
    
    </summary>
    
      <category term="JAVA源码" scheme="https://shang.at/categories/JAVA%E6%BA%90%E7%A0%81/"/>
    
    
      <category term="JAVA-Iterator" scheme="https://shang.at/tags/JAVA-Iterator/"/>
    
  </entry>
  
  <entry>
    <title>Java学习-函数式编程</title>
    <link href="https://shang.at/post/Java%E5%AD%A6%E4%B9%A0-%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
    <id>https://shang.at/post/Java学习-函数式编程/</id>
    <published>2020-05-17T00:38:33.000Z</published>
    <updated>2020-05-17T03:28:07.220Z</updated>
    
    <content type="html"><![CDATA[<p>Java8之后加入了一种全新的方式来实现方法(功能)作为参数传递的机制：lambda表达式</p><blockquote><p>像python语言，天生就支持将function作为参数传递给函数.</p></blockquote><p>可以想象，既然是一种实现方法作为参数传递的机制，java是一种面向对象的编程语言，也就是说在java中除了原始数据类型之外，都是对象：</p><blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&gt; <span class="meta">@FunctionalInterface</span></span><br><span class="line">&gt; <span class="class"><span class="keyword">interface</span> <span class="title">CharBinaryOperator</span> </span>&#123;</span><br><span class="line">&gt;     <span class="function">String <span class="title">applyAsChar</span><span class="params">(<span class="keyword">char</span> left, <span class="keyword">char</span> right)</span></span>;</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt; CharBinaryOperator charBinaryOperator = (<span class="keyword">char</span> a, <span class="keyword">char</span> b) -&gt; &#123;</span><br><span class="line">&gt;     System.out.println(a);</span><br><span class="line">&gt;     System.out.println(b);</span><br><span class="line">&gt;     <span class="keyword">return</span> String.valueOf(a + b);</span><br><span class="line">&gt; &#125;;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><ul><li>charBinaryOperator instanceof CharBinaryOperator<ul><li>charBinaryOperator是CharBinaryOperator的一个实例</li></ul></li><li>CharBinaryOperator.class instanceof Class<ul><li>CharBinaryOperator.class是Class的一个实例</li></ul></li><li>Class.class instanceof Class<ul><li>Class.class同时也是Class的一个实例</li></ul></li></ul></blockquote><p>在java中，传递的参数要么是原始数据类型，要么是对象(类型也是对象，所以能够传递)，不能是其他的类型。在JDK8之前，要想将一个功能传递到函数内部(<strong>这一般会被称为函数回调</strong>，是大多数异步编程的常用套路：到达某个时间节点或满足某中情况触发一个操作)，那么就只能<strong>显示的</strong>先定义一个接口，然后创建一个实现了这个接口的类，然后再实例化这个类得到一个对象，最后将这个对象作为参数传入函数，函数内部调用对象实现的方法，如：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">CharBinaryOperator charBinaryOperator1 = <span class="keyword">new</span> CharBinaryOperator() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">applyAsChar</span><span class="params">(<span class="keyword">char</span> a, <span class="keyword">char</span> b)</span> </span>&#123;</span><br><span class="line">        System.out.println(a);</span><br><span class="line">        System.out.println(b);</span><br><span class="line">        <span class="keyword">return</span> String.valueOf(a + b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">charBinaryOperator.applyAsChar(<span class="string">'a'</span>, <span class="string">'b'</span>);</span><br></pre></td></tr></table></figure><p>在JDK8及之后，我们不需要再显示的做这一系列的事情(当然你这么做也不会有问题)。</p><p>在JDK8及之后，所有满足条件的interface都会被解释函数式接口，即都可以通过lambda表达式的形式代替上述流程</p><blockquote><p>什么样的interface才算满足条件呢？</p><p>只声明了一个未实现的函数的interface就可以。在JDK8及以后，interface中定义的函数也可以有默认的实现</p><p>在声明接口的时候，可以使用java.lang.FunctionalInterface注解，表示该interface是一个函数式接口(当然可以不加，compiler会自动判断)</p><p>如果在有多个未实现的函数的interface上加这个注解的时候，编译阶段就会报错：Multiple non-overriding abstract methods found in interface OOXX</p></blockquote><blockquote><p>lambda表达式只不过是为了实现这个机制的一种解决方案，可以提高开发效率，同时隐藏了interface的定义细节，<del>compilier完全是按照参数列表来推断当前的lambda表达式是和哪一个interface绑定的</del>(compilier直接找到接口的定义，不是推断的)。如果没有预定义的，那么就会在编译期间报错，所以在java中lambda表达式的使用是有一定的限制的。</p><p>同时，在使用JDK预定义的操作时，在内部是调用了接口内定义的那个具体的函数的，所以对于开发者来说也是透明的，如列表的forEach()函数</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&gt;     <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">forEach</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> T&gt; action)</span> </span>&#123;</span><br><span class="line">&gt;         Objects.requireNonNull(action);</span><br><span class="line">&gt;         <span class="keyword">for</span> (T t : <span class="keyword">this</span>) &#123;</span><br><span class="line">&gt;             action.accept(t);</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt; <span class="comment">// 我们在使用的时候是这样的</span></span><br><span class="line">&gt;         List&lt;Integer&gt; integers = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">&gt;         integers.add(<span class="number">1</span>);</span><br><span class="line">&gt;         integers.forEach(i -&gt; &#123;</span><br><span class="line">&gt;             System.out.println(i);</span><br><span class="line">&gt;         &#125;);</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>本质上，还是要先有interface的定义(在JDK中已经预定义了大部分的interface，所以我们才不用自己手动定义，我上面的例子中就是一个没有被预定义的例子)，运行结果也是创建了一个实现了指定接口的对象，然后将对象作为参数传递给函数</p><p>如果我们完全脱离了JDK预定义的操作，那么我们就需要自己定义innterface，并且在我们使用该接口的地方显示的声明方法的使用，但是在外层传递方法参数的调用，我们仍可以使用简洁明了的lambda表达式，无论怎么说，lambda表达式的这种机制极大的方便了开发人员</p></blockquote><p>Lambda 表达式和匿名类之间的区别</p><blockquote><p><code>this</code> 关键字。对于匿名类 <code>this</code> 关键字解析为匿名类，而对于 Lambda 表达式，<code>this</code> 关键字解析为包含写入 Lambda 的类。</p></blockquote><h6 id="JDK中预定义的interface"><a href="#JDK中预定义的interface" class="headerlink" title="JDK中预定义的interface"></a>JDK中预定义的interface</h6><p>在<code>java.util.function</code>可以看到全部的预定义的interface，以下四种是最有代表性的</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gev9okl2qkj30fg04sjrk.jpg" alt></p><ul><li>Function<img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gev9t81dwtj30ch03kdg0.jpg" alt="image-20200517110913472"><ul><li>R apply(T)</li><li>Function&lt;V, R&gt; compose(Function&lt;? super V, ? extends T&gt; before)</li><li>Function&lt;T, V&gt; andThen(Function&lt;? super R, ? extends V&gt; after)</li><li>Function&lt;T, T&gt; identity()</li></ul></li><li>Consumer<img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gev9v9l0w5j30ae02jglk.jpg" alt="image-20200517111112190"><ul><li>void accept(T)</li><li>Consumer&lt; T&gt; addThen(Consumer&lt;? super T&gt;)</li></ul></li><li>Predicate<img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gev9vnldldj30a804b74d.jpg" alt="image-20200517111135143"><ul><li>boolean test()</li><li>Predicate&lt; T&gt; add(Predicate&lt;? super T&gt;)</li><li>Predicate&lt; T&gt; negate()</li><li>Predicate&lt; T&gt; or(Predicate&lt;? super T&gt;)</li><li>Predicate&lt; T&gt; isEqual(Object) </li></ul></li><li>Supplier<img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gev9ukowqdj303k01uq2r.jpg" alt="image-20200517111031489"><ul><li>T get()</li></ul></li></ul><h1 id="Lambda-表达式的例子"><a href="#Lambda-表达式的例子" class="headerlink" title="Lambda 表达式的例子"></a><a href="https://segmentfault.com/a/1190000009186509" target="_blank" rel="noopener">Lambda 表达式的例子</a></h1><h2 id="1-线程初始化"><a href="#1-线程初始化" class="headerlink" title="1 线程初始化"></a>1 线程初始化</h2><p>线程可以初始化如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Old way</span></span><br><span class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Hello world"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).start();</span><br><span class="line"></span><br><span class="line"><span class="comment">// New way</span></span><br><span class="line"><span class="keyword">new</span> Thread(</span><br><span class="line">    () -&gt; System.out.println(<span class="string">"Hello world"</span>)</span><br><span class="line">).start();</span><br></pre></td></tr></table></figure><h2 id="2-事件处理"><a href="#2-事件处理" class="headerlink" title="2 事件处理"></a>2 事件处理</h2><p>事件处理可以用 Java 8 使用 Lambda 表达式来完成。以下代码显示了将 <code>ActionListener</code> 添加到 UI 组件的新旧方式：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Old way</span></span><br><span class="line">button.addActionListener(<span class="keyword">new</span> ActionListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Hello world"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// New way</span></span><br><span class="line">button.addActionListener( (e) -&gt; &#123;</span><br><span class="line">        System.out.println(<span class="string">"Hello world"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="3-遍例输出（方法引用）"><a href="#3-遍例输出（方法引用）" class="headerlink" title="3 遍例输出（方法引用）"></a>3 遍例输出（方法引用）</h2><p>输出给定数组的所有元素的简单代码。请注意，还有一种使用 Lambda 表达式的方式。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// old way</span></span><br><span class="line">List&lt;Integer&gt; list = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>);</span><br><span class="line"><span class="keyword">for</span> (Integer n : list) &#123;</span><br><span class="line">    System.out.println(n);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 -&gt; 的 Lambda 表达式</span></span><br><span class="line">list.forEach(n -&gt; System.out.println(n));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 :: 的 Lambda 表达式</span></span><br><span class="line">list.forEach(System.out::println);</span><br></pre></td></tr></table></figure><h2 id="6-4-逻辑操作"><a href="#6-4-逻辑操作" class="headerlink" title="6.4 逻辑操作"></a>6.4 逻辑操作</h2><p>输出通过逻辑判断的数据。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wuxianjiezh.demo.lambda;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Predicate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; list = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>);</span><br><span class="line"></span><br><span class="line">        System.out.print(<span class="string">"输出所有数字："</span>);</span><br><span class="line">        evaluate(list, (n) -&gt; <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        System.out.print(<span class="string">"不输出："</span>);</span><br><span class="line">        evaluate(list, (n) -&gt; <span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">        System.out.print(<span class="string">"输出偶数："</span>);</span><br><span class="line">        evaluate(list, (n) -&gt; n % <span class="number">2</span> == <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        System.out.print(<span class="string">"输出奇数："</span>);</span><br><span class="line">        evaluate(list, (n) -&gt; n % <span class="number">2</span> == <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        System.out.print(<span class="string">"输出大于 5 的数字："</span>);</span><br><span class="line">        evaluate(list, (n) -&gt; n &gt; <span class="number">5</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">evaluate</span><span class="params">(List&lt;Integer&gt; list, Predicate&lt;Integer&gt; predicate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Integer n : list) &#123;</span><br><span class="line">            <span class="keyword">if</span> (predicate.test(n)) &#123;</span><br><span class="line">                System.out.print(n + <span class="string">" "</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输出所有数字：1 2 3 4 5 6 7 </span><br><span class="line">不输出：</span><br><span class="line">输出偶数：2 4 6 </span><br><span class="line">输出奇数：1 3 5 7 </span><br><span class="line">输出大于 5 的数字：6 7</span><br></pre></td></tr></table></figure><h2 id="6-4-Stream-API-示例"><a href="#6-4-Stream-API-示例" class="headerlink" title="6.4 Stream API 示例"></a>6.4 Stream API 示例</h2><p><code>java.util.stream.Stream</code>接口 和 Lambda 表达式一样，都是 Java 8 新引入的。所有 <code>Stream</code> 的操作必须以 Lambda 表达式为参数。<code>Stream</code> 接口中带有大量有用的方法，比如 <code>map()</code> 的作用就是将 input Stream 的每个元素，映射成output Stream 的另外一个元素。</p><p>下面的例子，我们将 Lambda 表达式 <code>x -&gt; x*x</code> 传递给 <code>map()</code> 方法，将其应用于流的所有元素。之后，我们使用 <code>forEach</code> 打印列表的所有元素。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// old way</span></span><br><span class="line">List&lt;Integer&gt; list = Arrays.asList(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>);</span><br><span class="line"><span class="keyword">for</span>(Integer n : list) &#123;</span><br><span class="line">    <span class="keyword">int</span> x = n * n;</span><br><span class="line">    System.out.println(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// new way</span></span><br><span class="line">List&lt;Integer&gt; list = Arrays.asList(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>);</span><br><span class="line">list.stream().map((x) -&gt; x*x).forEach(System.out::println);</span><br></pre></td></tr></table></figure><p>下面的示例中，我们给定一个列表，然后求列表中每个元素的平方和。这个例子中，我们使用了 <code>reduce()</code> 方法，这个方法的主要作用是把 Stream 元素组合起来。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// old way</span></span><br><span class="line">List&lt;Integer&gt; list = Arrays.asList(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>);</span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(Integer n : list) &#123;</span><br><span class="line">    <span class="keyword">int</span> x = n * n;</span><br><span class="line">    sum = sum + x;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(sum);</span><br><span class="line"></span><br><span class="line"><span class="comment">// new way</span></span><br><span class="line">List&lt;Integer&gt; list = Arrays.asList(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>);</span><br><span class="line"><span class="keyword">int</span> sum = list.stream().map(x -&gt; x*x).reduce((x,y) -&gt; x + y).get();</span><br><span class="line">System.out.println(sum);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Java8之后加入了一种全新的方式来实现方法(功能)作为参数传递的机制：lambda表达式&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;像python语言，天生就支持将function作为参数传递给函数.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;可以想象，既然是一种实现方法作
      
    
    </summary>
    
      <category term="JAVA源码" scheme="https://shang.at/categories/JAVA%E6%BA%90%E7%A0%81/"/>
    
    
      <category term="函数式编程" scheme="https://shang.at/tags/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Java学习-集合类</title>
    <link href="https://shang.at/post/Java%E5%AD%A6%E4%B9%A0-%E9%9B%86%E5%90%88%E7%B1%BB/"/>
    <id>https://shang.at/post/Java学习-集合类/</id>
    <published>2020-05-16T23:27:00.000Z</published>
    <updated>2020-05-17T09:06:31.786Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h4 id="总览"><a href="#总览" class="headerlink" title="总览"></a>总览</h4><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gev3hd1fgnj30ye0u0jws.jpg" alt></p><blockquote><p>注：这里只列举了单一线线程使用的集合对象(Vector除外)</p></blockquote><p>JVAV中列表类集合，按照数据的存储方式可以分为两大类：基于数组和基于链表。两种方式各有好处，需要根据实际业务场景做出选择。</p><ul><li><p>数组</p><ul><li>优点<ul><li>支持随机访问，给定下标的访问是O(1)的时间复杂度</li></ul></li><li>缺点<ul><li>内存必须是连续的，否则会申请空间失败</li><li>查找、插入、扩容、删除都是O(n)的时间复杂度</li><li>有容量的限制，增加节点时，可能会因为数组大小不够导致扩容，扩容的时间复杂度是O(n)的</li></ul></li><li>使用注意<ul><li>最好能够预估数据的最大容量，可以预先设计capacity，尽量避免扩容操作</li><li>但是在特别的使用场景下，基于数组的实现效率会更好，比如下面要说的ArrayDeque</li></ul></li><li>具体实现<ul><li>ArrayList</li><li>Vector</li><li>Stack</li><li>ArrayDeque</li></ul></li></ul></li><li><p>链表</p><ul><li><p>优点</p><ul><li>内存不用是连续的</li><li>插入、删除都是O(1)的时间复杂度</li><li>没有容量的限制，按理说限制就是JVAV堆的大小限制</li></ul></li><li><p>缺点</p><ul><li>查找是O(n)的时间复杂度</li></ul></li><li><p>使用</p><ul><li>单独使用链表的时候，还挺少的，毕竟一个没有附加特性的链表结构，仅仅只能够做到新增和删除的时间复杂度为O(1)，但是查询却需要O(n)，并且还需要额外的空间存储链表结构。数组可以通过预估容量的方式尽量减少扩容的操作，对比发现，使用基于数组的集合性价比更高</li></ul></li><li><p>具体实现</p><ul><li><p>LinkList</p></li><li><p>LinkList在定位低index个元素的时候，有个优化的点可以学习</p></li><li><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">Node&lt;E&gt; <span class="title">node</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// assert isElementIndex(index);</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (index &lt; (size &gt;&gt; <span class="number">1</span>)) &#123;</span><br><span class="line">        Node&lt;E&gt; x = first;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; index; i++)</span><br><span class="line">            x = x.next;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        Node&lt;E&gt; x = last;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = size - <span class="number">1</span>; i &gt; index; i--)</span><br><span class="line">            x = x.prev;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li></li></ul></li></ul></li></ul><blockquote><p>总结：可以发现，基于数组和基于链表的集合实现方式，想要从他们中查询到具体的元素，时间复杂度都是O(n)的，这是因为，这里仅仅考虑了数据的存储方式，并没有额外的信息给出来，所以是没有办法加速查询的。要想实现加速查询，那么就必须在这基础上增加新的特性：</p></blockquote><ul><li>数组<ul><li>有序性：可以借助有序性使用二分查找，把查找时间复杂度降到O(log n)</li></ul></li><li>链表<ul><li>建立树结构：<ul><li>二叉搜索树：前序遍历就是正向排序，可以把查询的时间复杂度降到O(log n)，但是要维护二叉搜索，尽量保证他是平衡的(但是这个的时间复杂度是O(1)的)</li><li>堆：查找最大(最小)值是O(1)的时间复杂度</li></ul></li><li>升维：比如跳表，就是在有序的链表上建立多级索引来实现加速查询的，可以把查找时间复杂度降到O(log n)，但是在新增和删除节点时需要维护多级索引(但是这个的时间复杂度是O(1)的)</li></ul></li></ul><h4 id="List"><a href="#List" class="headerlink" title="List"></a>List</h4><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gevgxzxj4uj30iw0ij0uy.jpg" alt="image-20200517151558262"></p><p>接口信息如下：</p><table><thead><tr><th></th><th>Method</th><th>Return</th><th>Comment</th></tr></thead><tbody><tr><td>Insert</td><td>add(E)</td><td>boolean</td><td>向队列加入元素，如果空间不足，会触发扩容</td></tr><tr><td>Insert</td><td>add(int, E)</td><td>void</td><td>向指定位置插入元素，可能会抛IndexOutOfBoundsException</td></tr><tr><td>Remove</td><td>remove(Object)</td><td>boolean</td><td>移除指定的元素，没有的话返回false，有的话返回true</td></tr><tr><td>Remove</td><td>remove(int)</td><td>E</td><td>移除指定index的元素，可能会抛IndexOutOfBoundsException</td></tr><tr><td>Examine</td><td>get(int)</td><td>E</td><td>返回指定index的元素，可能会抛IndexOutOfBoundsException</td></tr><tr><td>Update</td><td>set(int, E)</td><td>E</td><td>更新指定index的元素，可能会抛IndexOutOfBoundsException</td></tr></tbody></table><p>在List的源码中发现多处这样的代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 只返回第一个遇到的o，当o为null的时候，o.equals会报错</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">            <span class="keyword">if</span> (elementData[i]==<span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">            <span class="keyword">if</span> (o.equals(elementData[i]))</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>详看扩容操作</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">   ensureCapacityInternal(size + <span class="number">1</span>);  <span class="comment">// Increments modCount!!</span></span><br><span class="line">   elementData[size++] = e;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// DEFAULT_CAPACITY=10</span></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureCapacityInternal</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123;</span><br><span class="line">           minCapacity = Math.max(DEFAULT_CAPACITY, minCapacity);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       ensureExplicitCapacity(minCapacity);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureExplicitCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">       modCount++;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// overflow-conscious code</span></span><br><span class="line">       <span class="keyword">if</span> (minCapacity - elementData.length &gt; <span class="number">0</span>)</span><br><span class="line">           grow(minCapacity);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">grow</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">       <span class="comment">// overflow-conscious code</span></span><br><span class="line">       <span class="keyword">int</span> oldCapacity = elementData.length;</span><br><span class="line">       <span class="comment">// newCapacity = int(1.5*oldCapacity)</span></span><br><span class="line">       <span class="keyword">int</span> newCapacity = oldCapacity + (oldCapacity &gt;&gt; <span class="number">1</span>);</span><br><span class="line">       <span class="keyword">if</span> (newCapacity - minCapacity &lt; <span class="number">0</span>)</span><br><span class="line">           newCapacity = minCapacity;</span><br><span class="line">       <span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>)</span><br><span class="line">           newCapacity = hugeCapacity(minCapacity);</span><br><span class="line">       <span class="comment">// minCapacity is usually close to size, so this is a win:</span></span><br><span class="line">       elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 整形溢出：Integer.MAX_VALUE + 8&lt;0</span></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">hugeCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (minCapacity &lt; <span class="number">0</span>) <span class="comment">// overflow</span></span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> OutOfMemoryError();</span><br><span class="line">       <span class="keyword">return</span> (minCapacity &gt; MAX_ARRAY_SIZE) ?</span><br><span class="line">           Integer.MAX_VALUE :</span><br><span class="line">           MAX_ARRAY_SIZE;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="Queue"><a href="#Queue" class="headerlink" title="Queue"></a>Queue</h4><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gevjdx0lvfj305o056aa0.jpg" alt="image-20200517164030856"></p><p>设计了一套支持队列操作的接口，如下：</p><table><thead><tr><th></th><th>Method</th><th>Return</th><th>Comment</th></tr></thead><tbody><tr><td>Insert</td><td>add(E)</td><td>boolean</td><td>向队列添加一个元素，如果没有空间会抛出IllegalStateException</td></tr><tr><td>Insert</td><td>offer(E)</td><td>boolean</td><td>向队列添加一个元素，如果没有空间会返回false</td></tr><tr><td>Remove</td><td>remove()</td><td>E</td><td>移除并返回头结点，如果队列为空的话，会抛NoSuchElementException</td></tr><tr><td>Remove</td><td>poll()</td><td>E</td><td>移除并返回头结点，如果队列为空的话，会返回null</td></tr><tr><td>Examine</td><td>element()</td><td>E</td><td>返回头结点，如果队列为空的话，会抛NoSuchElementException</td></tr><tr><td>Examine</td><td>peek()</td><td>E</td><td>返回头结点，如果队列为空的话，会返回null</td></tr></tbody></table><h4 id="Deque"><a href="#Deque" class="headerlink" title="Deque"></a>Deque</h4><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gevjrosqnyj30g80i8dhk.jpg" alt="image-20200517165344428"></p><h4 id="Stack"><a href="#Stack" class="headerlink" title="Stack"></a>Stack</h4><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gevk1e2lppj306v04s0sp.jpg" alt="image-20200517170304083"></p><h4 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h4><p>通常使用ArrayDeque来作为先进先出的Queue，后进先出的Stack</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[TOC]&lt;/p&gt;
&lt;h4 id=&quot;总览&quot;&gt;&lt;a href=&quot;#总览&quot; class=&quot;headerlink&quot; title=&quot;总览&quot;&gt;&lt;/a&gt;总览&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;https://tva1.sinaimg.cn/large/007S8ZIlly1gev3hd
      
    
    </summary>
    
      <category term="JAVA源码" scheme="https://shang.at/categories/JAVA%E6%BA%90%E7%A0%81/"/>
    
    
      <category term="JAVA集合类-列表" scheme="https://shang.at/tags/JAVA%E9%9B%86%E5%90%88%E7%B1%BB-%E5%88%97%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>分布式服务框架-IPC&amp;RPC</title>
    <link href="https://shang.at/post/%E5%88%86%E5%B8%83%E5%BC%8F%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6-IPC-RPC/"/>
    <id>https://shang.at/post/分布式服务框架-IPC-RPC/</id>
    <published>2020-05-14T03:38:18.000Z</published>
    <updated>2020-05-15T01:43:48.472Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="分布式" scheme="https://shang.at/categories/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
    
      <category term="IPC&amp;RPC" scheme="https://shang.at/tags/IPC-RPC/"/>
    
  </entry>
  
  <entry>
    <title>Java学习-代理</title>
    <link href="https://shang.at/post/Java%E5%AD%A6%E4%B9%A0-%E4%BB%A3%E7%90%86/"/>
    <id>https://shang.at/post/Java学习-代理/</id>
    <published>2020-05-14T03:34:00.000Z</published>
    <updated>2020-05-15T01:44:12.636Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="JAVA" scheme="https://shang.at/categories/JAVA/"/>
    
    
      <category term="代理" scheme="https://shang.at/tags/%E4%BB%A3%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>Mysql学习-事务和隔离级别</title>
    <link href="https://shang.at/post/Mysql%E5%AD%A6%E4%B9%A0-%E4%BA%8B%E5%8A%A1%E5%92%8C%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB/"/>
    <id>https://shang.at/post/Mysql学习-事务和隔离级别/</id>
    <published>2020-05-12T17:31:26.000Z</published>
    <updated>2020-05-13T03:30:51.247Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MYSQL事务和隔离级别"><a href="#MYSQL事务和隔离级别" class="headerlink" title="MYSQL事务和隔离级别"></a>MYSQL事务和隔离级别</h1><h2 id="一、事务"><a href="#一、事务" class="headerlink" title="一、事务"></a>一、事务</h2><p>事务是由一组SQL语句组成的逻辑处理单元，是满足 ACID 特性的一组操作，可以通过 Commit 提交一个事务，也可以使用 Rollback 进行回滚。事务具有以下4个属性，通常简称为事务的ACID属性:</p><ul><li>原子性（Atomicity）：<strong>事务是一个原子操作单元，其对数据的修改，要么全都执行，要么全都不执行</strong>。比如在同一个事务中的SQL语句，要么全部执行成功，要么全部执行失败。回滚可以用日志来实现，日志记录着事务所执行的修改操作，在回滚时反向执行这些修改操作即可。</li><li>一致性（Consistent）：<strong>在事务开始和完成时，数据都必须保持一致状态</strong>。这意味着所有相关的数据规则都必须应用于事务的修改，以保持数据的完整性；事务结束时，所有的内部数据结构（如B树索引或双向链表）也都必须是正确的。 以转账为例子，A向B转账，假设转账之前这两个用户的钱加起来总共是2000，那么A向B转账之后，不管这两个账户怎么转，A用户的钱和B用户的钱加起来的总额还是2000，这个就是事务的一致性。</li><li>隔离性（Isolation）：数据库系统提供一定的隔离机制，保证事务在不受外部并发操作影响的“独立”环境执行。 <strong>隔离性是当多个用户并发访问数据库时，比如操作同一张表时，数据库为每一个用户开启的事务，不能被其他事务的操作所干扰，多个并发事务之间要相互隔离</strong>。即要达到这么一种效果：对于任意两个并发的事务 T1 和 T2，在事务 T1 看来，T2 要么在 T1 开始之前就已经结束，要么在 T1 结束之后才开始，这样每个事务都感觉不到有其他事务在并发地执行。</li><li>持久性（Durable）：事务完成之后，它对于数据的修改是永久性的，即使出现系统故障也能够保持。 　可以通过数据库备份和恢复来实现，在系统发生奔溃时，使用备份的数据库进行数据恢复。</li></ul><blockquote><p>MySQL 默认采用<strong>自动提交模式</strong>。也就是说，如果不显式使用 <code>START TRANSACTION</code> 语句来开始一个事务，那么每个查询都会被当做一个事务自动提交。</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1geqnms749pj30zo0qggre.jpg" alt="image-20200513111933684"></p></blockquote><blockquote><p>这几个特性不是一种平级关系：</p><ul><li>只有满足一致性，事务的执行结果才是正确的。</li><li>在无并发的情况下，事务串行执行，隔离性一定能够满足。此时要只要能满足原子性，就一定能满足一致性。</li><li>在并发的情况下，多个事务并发执行，事务不仅要满足原子性，还需要满足隔离性，才能满足一致性。</li><li>事务满足持久化是为了能应对数据库奔溃的情况。</li></ul></blockquote><h2 id="二、并发一致性问题"><a href="#二、并发一致性问题" class="headerlink" title="二、并发一致性问题"></a>二、并发一致性问题</h2><h3 id="1、更新丢失-Lost-Update"><a href="#1、更新丢失-Lost-Update" class="headerlink" title="1、更新丢失(Lost Update)"></a>1、更新丢失(Lost Update)</h3><p><strong>T1 和 T2 两个事务都对一个数据进行修改，T1 先修改，T2 随后修改，T2 的修改覆盖了 T1 的修改</strong>。</p><p>例如，两个程序员修改同一java文件。每程序员独立地更改其副本，然后保存更改后的副本，这样就覆盖了原始文档。最后保存其更改副本的编辑人员覆盖前一个程序员所做的更改。</p><p><strong>如果在一个程序员完成并提交事务之前，另一个程序员不能访问同一文件，则可避免此问题</strong>。 </p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1geqnnepde0j31540u0gqk.jpg" alt="image-20200513112012076"></p><h3 id="2、脏读"><a href="#2、脏读" class="headerlink" title="2、脏读"></a>2、脏读</h3><p>一句话：事务B读取到了事务A已修改但尚未提交的的数据，还在这个数据基础上做了操作。此时，如果A事务回滚<code>Rollback</code>，B读取的数据无效，不符合一致性要求。</p><p>解决办法: 把数据库的事务隔离级别调整到 <code>READ_COMMITTED</code></p><p><strong>T1 修改一个数据，T2 随后读取这个数据。如果 T1 撤销了这次修改，那么 T2 读取的数据是脏数据</strong>。</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1geqno2ih8oj314s0u044g.jpg" alt="image-20200513112050855"></p><h3 id="3、不可重复读-Non-Repeatable-Reads"><a href="#3、不可重复读-Non-Repeatable-Reads" class="headerlink" title="3、不可重复读(Non-Repeatable Reads)"></a>3、不可重复读(Non-Repeatable Reads)</h3><p>  在一个事务内，多次读同一个数据。在这个事务还没有结束时，另一个事务也访问该同一数据。那么，在第一个事务的两次读数据之间。由于第二个事务的修改，那么第一个事务读到的数据可能不一样，这样就发生了在一个事务内两次读到的数据是不一样的，因此称为不可重复读，即原始读取不可重复。</p><p> <strong>一句话：一个事务范围内两个相同的查询却返回了不同数据</strong>。</p><p>同时操作，事务1分别读取事务2操作时和提交后的数据，读取的记录内容不一致。<strong>不可重复读是指在同一个事务内，两个相同的查询返回了不同的结果</strong>。</p><p>解决办法: 如果只有在修改事务完全提交之后才可以读取数据，则可以避免该问题。把数据库的事务隔离级别调整到<code>REPEATABLE_READ</code></p><p><strong>T2 读取一个数据，T1 对该数据做了修改。如果 T2 再次读取这个数据，此时读取的结果和第一次读取的结果不同</strong>。</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1geqnxkk82wj313l0u0grm.jpg" alt="image-20200513112958117"></p><h3 id="4、幻读"><a href="#4、幻读" class="headerlink" title="4、幻读"></a>4、幻读</h3><p>一个事务T1按相同的查询条件重新读取以前检索过的数据，却发现其他事务T2插入了满足其查询条件的新数据，这种现象就称为“幻读”。（和可重复读类似，但是事务 T2 的数据操作仅仅是插入和删除，不是修改数据，读取的记录数量前后不一致）</p><p>一句话：事务A 读取到了事务B提交的新增数据，不符合隔离性。 </p><p>解决办法: 如果在操作事务完成数据处理之前，任何其他事务都不可以添加新数据，则可避免该问题。把数据库的事务隔离级别调整到 <code>SERIALIZABLE_READ</code>。</p><p>T1 读取某个范围的数据，T2 在这个范围内插入新的数据，T1 再次读取这个范围的数据，此时读取的结果和和第一次读取的结果不同。</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1geqnxye5ghj31360u0gq5.jpg" alt="image-20200513113020849"></p><h2 id="三、事务隔离级别"><a href="#三、事务隔离级别" class="headerlink" title="三、事务隔离级别"></a>三、事务隔离级别</h2><p>“脏读”、”不可重复读”和”幻读”，其实都是数据库读一致性问题，<strong>必须由数据库提供一定的事务隔离机制来解决</strong>。</p><p> 数据库的事务隔离越严格，并发副作用越小，但付出的代价也就越大，因为事务隔离实质上就是使事务在一定程度上 “串行化”进行，这显然与“并发”是矛盾的。同时，不同的应用对读一致性和事务隔离程度的要求也是不同的，比如许多应用对“不可重复读”和“幻读”并不敏感，可能更关心数据并发访问的能力。 </p><p>MYSQL常看当前数据库的事务隔离级别：<code>show variables like &#39;tx_isolation&#39;;</code></p><h3 id="1、读未提交-Read-Uncommitted"><a href="#1、读未提交-Read-Uncommitted" class="headerlink" title="1、读未提交 (Read Uncommitted)"></a>1、读未提交 (Read Uncommitted)</h3><p>最低的隔离等级，<strong>允许其他事务看到没有提交的数据</strong>，会导致脏读。</p><h3 id="2、读已提交-Read-Committed"><a href="#2、读已提交-Read-Committed" class="headerlink" title="2、读已提交 (Read Committed)"></a>2、读已提交 (Read Committed)</h3><p><strong>被读取的数据可以被其他事务修改，这样可能导致不可重复读</strong>。<strong>也就是说，事务读取的时候获取读锁，但是在读完之后立即释放(不需要等事务结束)，而写锁则是事务提交之后才释放</strong>，释放读锁之后，就可能被其他事务修改数据。该等级也是 SQL Server 默认的隔离等级。</p><h3 id="3、可重复读-Repeatable-Read"><a href="#3、可重复读-Repeatable-Read" class="headerlink" title="3、可重复读(Repeatable Read)"></a>3、可重复读(Repeatable Read)</h3><p><strong>所有被 Select 获取的数据都不能被修改，这样就可以避免一个事务前后读取数据不一致的情况</strong>。但是却没有办法控制幻读，因为这个时候其他事务不能更改所选的数据，但是可以增加数据，即前一个事务有读锁但是没有范围锁，为什么叫做可重复读等级呢？那是因为该等级解决了下面的不可重复读问题。(引申：现在主流数据库都使用 MVCC 并发控制，使用之后<code>RR</code>（可重复读）隔离级别下是不会出现幻读的现象。)</p><p>MYSQL默认是<code>REPEATABLE-READ</code>。 </p><h3 id="4、串行化-Serializable"><a href="#4、串行化-Serializable" class="headerlink" title="4、串行化(Serializable)"></a>4、串行化(Serializable)</h3><p>所有事务一个接着一个的执行，这样可以避免幻读 (phantom read)，对于基于锁来实现并发控制的数据库来说，串行化要求在执行范围查询的时候，需要获取范围锁，如果不是基于锁实现并发控制的数据库，则检查到有违反串行操作的事务时，需回滚该事务。</p><h3 id="5、总结"><a href="#5、总结" class="headerlink" title="5、总结"></a>5、总结</h3><ul><li>读未提交: <strong>一个事务还没提交时，它做的变更就能被别的事务看到</strong>。</li><li>读提交: 一个事务提交<strong>之后</strong>，它做的变更<strong>才</strong>会被其他事务看到。</li><li>可重复读 : <strong>一个事务执行过程中看到的数据，总是跟这个事务在启动时看到的数据是一致的</strong>。当然在可重复读隔离级别下，未提交变更对其他事务也是不可见的。</li><li>串行化: 顾名思义是对于同一行记录，“写”会加“写锁”，“读”会加“读锁”。当出现读写锁冲突的时候，后访问的事务必须等前一个事务执行完成，才能继续执行。</li></ul><p>四个级别逐渐增强，每个级别解决一个问题，事务级别越高，性能越差，大多数环境(<code>Read committed</code> 就可以用了)</p><table><thead><tr><th>隔离级别</th><th>读数据一致性</th><th>脏读</th><th>不可重复读</th><th>幻读</th></tr></thead><tbody><tr><td>未提交读</td><td>最低级别</td><td>√</td><td>√</td><td>√</td></tr><tr><td>提交读</td><td>语句级</td><td>×</td><td>√</td><td>√</td></tr><tr><td>可重复读</td><td>事务级</td><td>×</td><td>×</td><td>√</td></tr><tr><td>可串行化</td><td>最高级别,事务级</td><td>×</td><td>×</td><td>×</td></tr></tbody></table><p><a href="https://github.com/ZXZxin/ZXBlog" target="_blank" rel="noopener">参考</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;MYSQL事务和隔离级别&quot;&gt;&lt;a href=&quot;#MYSQL事务和隔离级别&quot; class=&quot;headerlink&quot; title=&quot;MYSQL事务和隔离级别&quot;&gt;&lt;/a&gt;MYSQL事务和隔离级别&lt;/h1&gt;&lt;h2 id=&quot;一、事务&quot;&gt;&lt;a href=&quot;#一、事务&quot; cla
      
    
    </summary>
    
      <category term="Mysql" scheme="https://shang.at/categories/Mysql/"/>
    
    
      <category term="事务和隔离级别" scheme="https://shang.at/tags/%E4%BA%8B%E5%8A%A1%E5%92%8C%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB/"/>
    
  </entry>
  
  <entry>
    <title>Mysql学习-第三范式</title>
    <link href="https://shang.at/post/Mysql%E5%AD%A6%E4%B9%A0-%E7%AC%AC%E4%B8%89%E8%8C%83%E5%BC%8F/"/>
    <id>https://shang.at/post/Mysql学习-第三范式/</id>
    <published>2020-05-12T17:19:15.000Z</published>
    <updated>2020-05-13T02:56:08.500Z</updated>
    
    <content type="html"><![CDATA[<h4 id="第一范式-1NF"><a href="#第一范式-1NF" class="headerlink" title="第一范式(1NF)"></a>第一范式(1NF)</h4><blockquote><p>数据库表的每一列都是不可分割的基本数据项，同一列中不能有多个值，即实体中的某个属性不能有多个值或者不能有重复的属性</p><p>符合1NF的关系中的每个属性都不可再分</p></blockquote><p>有两点要求：</p><ul><li>schema定义：每个属性不可再分，即字段的含义要明确，同一个字段不应该有多于1个的含义<ul><li><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1geqm6y05xoj314m08c77c.jpg" alt="image-20200513102942067"></li><li>图中的这种schema在RDBMS中是不可能存在的，也就是无法创建的。可以改成如下的schema:</li><li><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1geqm8stpcij313w05c412.jpg" alt="image-20200513103132122"></li></ul></li><li>存储的数据：同一列中不能有多个值<ul><li><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1geqm622kgkj318s0bcgs2.jpg" alt="image-20200513102837775"></li><li>图中的一个字段里面存了多个值，这种情况在RDBMS中是可以存在的，但是该字段是可再分的，应该。可以将数据分成多条存储，如下图</li><li><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1geqmclbtx1j318k0batey.jpg" alt="image-20200513103510685"></li></ul></li></ul><h4 id="第二范式-2NF"><a href="#第二范式-2NF" class="headerlink" title="第二范式(2NF)"></a>第二范式(2NF)</h4><blockquote><p>满足第一范式</p><p>没有部分依赖</p></blockquote><p>在同一个表中，不能存在某些字段依赖一些键，而另一些字段依赖另外一些键</p><p>员工表的一个候选键是{id，mobile，deptNo}，而deptName依赖于deptNo，同样 name 依赖于 id，因此不是 2NF的。为了满足第二范式的条件，需要将这个表拆分成employee、dept、employee_dept、employee_mobile四个表</p><p>不满足2NF的表，可能存在的问题：修改异常、新增异常、删除异常</p><h4 id="第三范式-3NF"><a href="#第三范式-3NF" class="headerlink" title="第三范式(3NF)"></a>第三范式(3NF)</h4><blockquote><p>满足第二范式</p><p>没有传递依赖</p></blockquote><p>在同一个表中，不要存在字段A依赖字段B，同时字段B依赖字段C，推导出来字段A间接依赖字段C的关系。</p><p>员工表的province、city、district依赖于zip，而zip依赖于id，换句话说，province、city、district传递依赖于id，违反了 3NF 规则。为了满足第三范式的条件，可以将这个表拆分成employee和zip两个表</p><p><em>但是这种关系也不是一定不能存在，视具体的业务而定吧</em></p><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><p>假设有一个名为<code>employee</code>的员工表，它有九个属性：<code>id</code>(员工编号)、<code>name</code>(员工名称)、<code>mobile</code>(电话)、<code>zip</code>(邮编)、<code>province</code>(省份)、<code>city</code>(城市)、<code>district</code>(区县)、<code>deptNo</code>(所属部门编号)、<code>deptName</code>(所属部门名称)、表总数据如下：</p><table><br><thead><br><tr><br><th>id</th><br><th>name</th><br><th>mobile</th><br><th>zip</th><br><th>province</th><br><th>city</th><br><th>district</th><br><th>deptNo</th><br><th>deptName</th><br></tr><br></thead><br><tbody><br><tr><br><td>101</td><br><td>张三</td><br>    <td>13910000001<br>13910000002</td><br><td>100001</td><br><td>北京</td><br><td>北京</td><br><td>海淀区</td><br><td>D1</td><br><td>部门1</td><br></tr><br><tr><br><td>101</td><br><td>张三</td><br><td>13910000001<br>13910000002</td><br><td>100001</td><br><td>北京</td><br><td>北京</td><br><td>海淀区</td><br><td>D2</td><br><td>部门2</td><br></tr><br><tr><br><td>102</td><br><td>李四</td><br><td>13910000003</td><br><td>200001</td><br><td>上海</td><br><td>上海</td><br><td>静安区</td><br><td>D3</td><br><td>部门3</td><br></tr><br><tr><br><td>103</td><br><td>王五</td><br><td>13910000004</td><br><td>510001</td><br><td>广东省</td><br><td>广州</td><br><td>白云区</td><br><td>D4</td><br><td>部门4</td><br></tr><br><tr><br><td>103</td><br><td>王五</td><br><td>13910000004</td><br><td>510001</td><br><td>广东省</td><br><td>广州</td><br><td>白云区</td><br><td>D5</td><br><td>部门 5</td><br></tr><br></tbody><br></table><p>将上表改成满足第1范式，如下：</p><table><br><thead><br><tr><br><th>id</th><br><th>name</th><br><th>mobile</th><br><th>zip</th><br><th>province</th><br><th>city</th><br><th>district</th><br><th>deptNo</th><br><th>deptName</th><br></tr><br></thead><br><tbody><br><tr><br><td>101</td><br><td>张三</td><br><td>13910000001</td><br><td>100001</td><br><td>北京</td><br><td>北京</td><br><td>海淀区</td><br><td>D1</td><br><td>部门1</td><br></tr><br><tr><br><td>101</td><br><td>张三</td><br><td>13910000002</td><br><td>100001</td><br><td>北京</td><br><td>北京</td><br><td>海淀区</td><br><td>D1</td><br><td>部门1</td><br></tr><br><tr><br><td>101</td><br><td>张三</td><br><td>13910000001</td><br><td>100001</td><br><td>北京</td><br><td>北京</td><br><td>海淀区</td><br><td>D2</td><br><td>部门2</td><br></tr><br><tr><br><td>101</td><br><td>张三</td><br><td>13910000002</td><br><td>100001</td><br><td>北京</td><br><td>北京</td><br><td>海淀区</td><br><td>D2</td><br><td>部门2</td><br></tr><br><tr><br><td>102</td><br><td>李四</td><br><td>13910000003</td><br><td>200001</td><br><td>上海</td><br><td>上海</td><br><td>静安区</td><br><td>D3</td><br><td>部门3</td><br></tr><br><tr><br><td>103</td><br><td>王五</td><br><td>13910000004</td><br><td>510001</td><br><td>广东省</td><br><td>广州</td><br><td>白云区</td><br><td>D4</td><br><td>部门4</td><br></tr><br><tr><br><td>103</td><br><td>王五</td><br><td>13910000004</td><br><td>510001</td><br><td>广东省</td><br><td>广州</td><br><td>白云区</td><br><td>D5</td><br><td>部门5</td><br></tr><br></tbody><br></table><h6 id="仍存在的问题"><a href="#仍存在的问题" class="headerlink" title="仍存在的问题"></a>仍存在的问题</h6><ol><li><strong>修改异常</strong>：上表中张三、王五都有多条记录，因为他隶属于两个部门。如果我们要修改王五的地址，必修修改两行记录。假如一个部门得到了王五的新地址并进行了更新，而另一个部门没有，那么此时王五在表中会存在两个不同的地址，导致了数据不一致</li><li><strong>新增异常：</strong>假如一个新员工假如公司，他正处于入职培训阶段，还没有被正式分配到某个部门，如果<code>deptNo</code>字段不允许为空，我们就无法向<code>employee</code>表中新增该员工的数据。</li><li><strong>删除异常：</strong>假设公司撤销了D3部门，那么在删除<code>deptNo</code>为D3的行时，会将李四的信息也一并删除。因为他隶属于D3这一部门。</li></ol><p>为了解决上面的问题，我们可以将上述表设计成满足3NF</p><p>在关系数据库模型设计中，一般需要满足第三范式的要求。如果一个表具有良好的主外键设计，就应该是满足3NF的表。规范化带来的好处是通过减少数据冗余提高更新数据的效率，同时保证数据完整性。然而，我们在实际应用中也要防止过度规范化的问题。规范化程度越高，划分的表就越多，在查询数据时越有可能使用表连接操作。而如果连接的表过多，会影响查询性能。关键的问题是要依据业务需求，仔细权衡数据查询和数据更新关系，指定最合适的规范化程度。不要为了遵循严格的规范化规则而修改业务需求。</p><p><a href="https://www.jianshu.com/p/5a8bb84289a9" target="_blank" rel="noopener">参考</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;第一范式-1NF&quot;&gt;&lt;a href=&quot;#第一范式-1NF&quot; class=&quot;headerlink&quot; title=&quot;第一范式(1NF)&quot;&gt;&lt;/a&gt;第一范式(1NF)&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;数据库表的每一列都是不可分割的基本数据项，同一列中不能有多个值
      
    
    </summary>
    
      <category term="Mysql" scheme="https://shang.at/categories/Mysql/"/>
    
    
      <category term="第三范式" scheme="https://shang.at/tags/%E7%AC%AC%E4%B8%89%E8%8C%83%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Python学习-函数参数传递</title>
    <link href="https://shang.at/post/Python%E5%AD%A6%E4%B9%A0-%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0%E4%BC%A0%E9%80%92/"/>
    <id>https://shang.at/post/Python学习-函数参数传递/</id>
    <published>2020-04-19T04:00:49.000Z</published>
    <updated>2020-04-19T04:26:43.749Z</updated>
    
    <content type="html"><![CDATA[<p>在Python(估计也适用于其他的语言)中，函数参数的传递分为两类 值传递和引用传递，实际上这两类传递类型都是属于变量传值，即：</p><blockquote><p>值传递：将实际参数值复制一份传递到函数内，这样在函数内对参数进行修改，就不会影响到原参数</p><p>引用传递：将实际参数的地址直接传递到函数内，那么在函数内对参数所进行的修改，将可能会影响到原参数</p></blockquote><p>要注意的是，在函数内修改参数，实际上又分为两种情况(仅说引用传递)：</p><blockquote><p>1、对参数(a)重新进行赋值操作(a=new_obj)，此时，实际上修改的已经不是传递给函数的最初的参数(a)了，它已经指向了其他的内存地址，这时再修改a，实际上就和之前的对象没有任何关系了</p><p>2、直接对a进行修改，比如说a.name=’sdd’，这时，原始的对象就会发生变化</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在Python(估计也适用于其他的语言)中，函数参数的传递分为两类 值传递和引用传递，实际上这两类传递类型都是属于变量传值，即：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;值传递：将实际参数值复制一份传递到函数内，这样在函数内对参数进行修改，就不会影响到原参数&lt;/p&gt;
&lt;p&gt;
      
    
    </summary>
    
      <category term="Python" scheme="https://shang.at/categories/Python/"/>
    
    
      <category term="python学习" scheme="https://shang.at/tags/python%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Python学习-OrderedDict</title>
    <link href="https://shang.at/post/Python%E5%AD%A6%E4%B9%A0-OrderedDict/"/>
    <id>https://shang.at/post/Python学习-OrderedDict/</id>
    <published>2020-04-16T08:50:57.000Z</published>
    <updated>2020-04-16T08:51:22.122Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> OrderedDict  <span class="comment"># 记录插入顺序的dict，操作方式和dict一样。</span></span><br><span class="line"><span class="comment"># 是基于dict和双端队列实现，可以用来实现LRUcache</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; collections &lt;span cla
      
    
    </summary>
    
      <category term="Python" scheme="https://shang.at/categories/Python/"/>
    
    
      <category term="python源码学习" scheme="https://shang.at/tags/python%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
</feed>
