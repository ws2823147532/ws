<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>努力，奋斗</title>
  
  <subtitle>记录学习</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://shang.at/"/>
  <updated>2021-02-27T08:06:13.658Z</updated>
  <id>https://shang.at/</id>
  
  <author>
    <name>王尚</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>机器学习-数据探索流程</title>
    <link href="https://shang.at/post/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-%E6%95%B0%E6%8D%AE%E6%8E%A2%E7%B4%A2%E6%B5%81%E7%A8%8B/"/>
    <id>https://shang.at/post/机器学习-数据探索流程/</id>
    <published>2021-02-27T08:02:38.000Z</published>
    <updated>2021-02-27T08:06:13.658Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>简介：</p></blockquote><a id="more"></a><p><img src="/images/data-探索流程.png" alt="数据探索流程"></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;简介：&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="机器学习" scheme="https://shang.at/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="机器学习" scheme="https://shang.at/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Spark学习-json数据操作</title>
    <link href="https://shang.at/post/Spark%E5%AD%A6%E4%B9%A0-json%E6%95%B0%E6%8D%AE%E6%93%8D%E4%BD%9C/"/>
    <id>https://shang.at/post/Spark学习-json数据操作/</id>
    <published>2021-02-07T07:03:49.000Z</published>
    <updated>2021-02-07T08:18:11.048Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>简介：</p></blockquote><a id="more"></a><p>有以下的<code>json</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"status"</span>: <span class="string">"0x0000"</span>,</span><br><span class="line">    <span class="attr">"msg"</span>: <span class="string">"执行成功"</span>,</span><br><span class="line">    <span class="attr">"result"</span>: <span class="string">"通过"</span>,</span><br><span class="line">    <span class="attr">"score"</span>: <span class="string">"0"</span>,</span><br><span class="line">    <span class="attr">"engineName"</span>: <span class="string">"credit_unit_salim"</span>,</span><br><span class="line">    <span class="attr">"versionCode"</span>: <span class="string">"20200702credit_salim"</span>,</span><br><span class="line">    <span class="attr">"versionId"</span>: <span class="number">356307673651200</span>,</span><br><span class="line">    <span class="attr">"engineId"</span>: <span class="number">355251417716736</span>,</span><br><span class="line">    <span class="attr">"outputFields"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"code"</span>: <span class="string">"return_reason"</span>,</span><br><span class="line">            <span class="attr">"name"</span>: <span class="string">"输出打回原因"</span>,</span><br><span class="line">            <span class="attr">"value"</span>: <span class="string">"null"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"code"</span>: <span class="string">"deny_days"</span>,</span><br><span class="line">            <span class="attr">"name"</span>: <span class="string">"输出拒绝天数"</span>,</span><br><span class="line">            <span class="attr">"value"</span>: <span class="string">"0"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"code"</span>: <span class="string">"deny_reason"</span>,</span><br><span class="line">            <span class="attr">"name"</span>: <span class="string">"输出拒绝原因"</span>,</span><br><span class="line">            <span class="attr">"value"</span>: <span class="string">"null"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"code"</span>: <span class="string">"decision"</span>,</span><br><span class="line">            <span class="attr">"name"</span>: <span class="string">"输出决策"</span>,</span><br><span class="line">            <span class="attr">"value"</span>: <span class="string">"forward_manual"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"code"</span>: <span class="string">"limit"</span>,</span><br><span class="line">            <span class="attr">"name"</span>: <span class="string">"输出授信额度"</span>,</span><br><span class="line">            <span class="attr">"value"</span>: <span class="string">"0"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"code"</span>: <span class="string">"cash_limit"</span>,</span><br><span class="line">            <span class="attr">"name"</span>: <span class="string">"现金贷款额度"</span>,</span><br><span class="line">            <span class="attr">"value"</span>: <span class="string">"0"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"inputFields"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"indo_id_check"</span>: <span class="string">"DEDY DWI SETYAWAN"</span>,</span><br><span class="line">            <span class="attr">"indo_identical_accuracy_ktp"</span>: <span class="string">"-2.0"</span>,</span><br><span class="line">            <span class="attr">"indo_mobile_number_approving"</span>: <span class="string">"1"</span>,</span><br><span class="line">            <span class="attr">"indo_name_diff_id_check"</span>: <span class="string">"0"</span>,</span><br><span class="line">            <span class="attr">"indo_name_diff_ocr"</span>: <span class="string">"1"</span>,</span><br><span class="line">            <span class="attr">"indo_nik_approving"</span>: <span class="string">"1"</span>,</span><br><span class="line">            <span class="attr">"indo_nik_diff_employee_nik"</span>: <span class="string">"0"</span>,</span><br><span class="line">            <span class="attr">"indo_nik_diff_ocr"</span>: <span class="string">"1"</span>,</span><br><span class="line">            <span class="attr">"indo_ocr_name"</span>: <span class="string">"DEDY DWI SEVYAWAN"</span>,</span><br><span class="line">            <span class="attr">"indo_ocr_nik"</span>: <span class="string">"3525051812850002"</span>,</span><br><span class="line">            <span class="attr">"indo_reject_his_nik"</span>: <span class="string">"0"</span>,</span><br><span class="line">            <span class="attr">"indo_reject_his_tel"</span>: <span class="string">"0"</span>,</span><br><span class="line">            <span class="attr">"同一个申请下return次数"</span>: <span class="string">"0"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"outputFieldInfo"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"输出打回原因"</span>: <span class="string">"null"</span>,</span><br><span class="line">            <span class="attr">"输出拒绝天数"</span>: <span class="string">"0"</span>,</span><br><span class="line">            <span class="attr">"输出拒绝原因"</span>: <span class="string">"null"</span>,</span><br><span class="line">            <span class="attr">"输出决策"</span>: <span class="string">"forward_manual"</span>,</span><br><span class="line">            <span class="attr">"输出授信额度"</span>: <span class="string">"0"</span>,</span><br><span class="line">            <span class="attr">"现金贷款额度"</span>: <span class="string">"0"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="sql版本取json中的array，array的每个元素作为一个map结构"><a href="#sql版本取json中的array，array的每个元素作为一个map结构" class="headerlink" title="sql版本取json中的array，array的每个元素作为一个map结构"></a>sql版本取json中的array，array的每个元素作为一个map结构</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">spark.sql(<span class="string">"""</span></span><br><span class="line"><span class="string">select</span></span><br><span class="line"><span class="string">    from_json(data, 'array&lt;map&lt;string,string&gt;&gt;') r</span></span><br><span class="line"><span class="string">from (</span></span><br><span class="line"><span class="string">select json_tuple(json, 'inputFields') data</span></span><br><span class="line"><span class="string">) t</span></span><br><span class="line"><span class="string">"""</span>).printSchema()</span><br><span class="line"></span><br><span class="line">root</span><br><span class="line"> |-- r: array (nullable = true)</span><br><span class="line"> |    |-- element: map (containsNull = true)</span><br><span class="line"> |    |    |-- key: string</span><br><span class="line"> |    |    |-- value: string (valueContainsNull = true)</span><br></pre></td></tr></table></figure><p><code>array&lt;map&lt;string,string&gt;&gt;</code>这个是如何得来的呢？是这样的，可以使用<code>schema_of_json</code>函数来获取一个json的结构是怎样的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">spark.sql(<span class="string">"""</span></span><br><span class="line"><span class="string">select schema_of_json(json)</span></span><br><span class="line"><span class="string">"""</span>).toPandas()</span><br><span class="line"></span><br><span class="line"><span class="comment">#array&lt;struct&lt;indo_id_check:string,indo_identical_accuracy_ktp:string,indo_mobile_number_approving:string,indo_name_diff_id_check:string,indo_name_diff_ocr:string,indo_nik_approving:string,indo_nik_diff_employee_nik:string,indo_nik_diff_ocr:string,indo_ocr_name:string,indo_ocr_nik:string,indo_reject_his_nik:string,indo_reject_his_tel:string,同一个申请下return次数:string&gt;&gt;</span></span><br></pre></td></tr></table></figure><p>但是通过上述方式得到的结果不能直接拿来用，需要做一些变形：如果array的每个元素的字段都是固定的，那么可以将array的元素定义为一个<code>struct</code>，但是我们的需求中的数据，array的每个元素的字段是不固定的，且我们没有将其字段都穷举出来，所以我们就把它定义为一个map类型的，后续将它使用explode_outer展开再进行处理。通过查询spark的api，可以知道MapType的构造方法需要两个参数，分别为key的Type和value的Type，这里我们直接使用最通用的String类型代替了</p><h5 id="pyspark"><a href="#pyspark" class="headerlink" title="pyspark"></a>pyspark</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pyspark.sql.functions <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pyspark.sql.types <span class="keyword">import</span> *</span><br><span class="line">schema = ArrayType(MapType(StringType(), StringType()))</span><br><span class="line">spark.sql(<span class="string">"""</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">select json_tuple(json, 'inputFields') items</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"""</span>).withColumn(</span><br><span class="line">    <span class="string">'items'</span>,</span><br><span class="line">    from_json(<span class="string">'items'</span>, schema)</span><br><span class="line">).toPandas()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">spark.sql(<span class="string">"""</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">select json_tuple(json, 'inputFields') items</span></span><br><span class="line"><span class="string">-- from atome_id_mysql_snapshot_ruleengine.t_result_catalog limit 1</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"""</span>).withColumn(</span><br><span class="line">    <span class="string">'items'</span>,</span><br><span class="line">    from_json(<span class="string">'items'</span>, schema)</span><br><span class="line">).withColumn(</span><br><span class="line">    <span class="string">'item'</span>, explode(<span class="string">'items'</span>)</span><br><span class="line">).withColumn(</span><br><span class="line">    <span class="string">'keys'</span>, map_keys(<span class="string">'item'</span>)</span><br><span class="line">).withColumn(</span><br><span class="line">    <span class="string">'values'</span>, map_values(<span class="string">'item'</span>)</span><br><span class="line">).withColumn(</span><br><span class="line">    <span class="string">'k_v'</span>, arrays_zip(<span class="string">'keys'</span>, <span class="string">'values'</span>)</span><br><span class="line">).withColumn(</span><br><span class="line">    <span class="string">'kv'</span>, explode_outer(<span class="string">'k_v'</span>)</span><br><span class="line">).printSchema()</span><br><span class="line"></span><br><span class="line">root</span><br><span class="line"> |-- items: array (nullable = true)</span><br><span class="line"> |    |-- element: map (containsNull = true)</span><br><span class="line"> |    |    |-- key: string</span><br><span class="line"> |    |    |-- value: string (valueContainsNull = true)</span><br><span class="line"> |-- item: map (nullable = true)</span><br><span class="line"> |    |-- key: string</span><br><span class="line"> |    |-- value: string (valueContainsNull = true)</span><br><span class="line"> |-- keys: array (nullable = true)</span><br><span class="line"> |    |-- element: string (containsNull = true)</span><br><span class="line"> |-- values: array (nullable = true)</span><br><span class="line"> |    |-- element: string (containsNull = true)</span><br><span class="line"> |-- k_v: array (nullable = true)</span><br><span class="line"> |    |-- element: struct (containsNull = false)</span><br><span class="line"> |    |    |-- keys: string (nullable = true)</span><br><span class="line"> |    |    |-- values: string (nullable = true)</span><br><span class="line"> |-- kv: struct (nullable = true)</span><br><span class="line"> |    |-- keys: string (nullable = true)</span><br><span class="line"> |    |-- values: string (nullable = true)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">df = spark.sql(<span class="string">"""</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">select json_tuple(json, 'inputFields') items</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"""</span>).withColumn(</span><br><span class="line">    <span class="string">'items'</span>,</span><br><span class="line">    from_json(<span class="string">'items'</span>, schema)</span><br><span class="line">).withColumn(</span><br><span class="line">    <span class="string">'item'</span>, explode(<span class="string">'items'</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># df.printSchema()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># df.select(expr("posexplode(d)")).printSchema</span></span><br><span class="line">df.select(expr(<span class="string">'explode(item)'</span>)).toPandas()  <span class="comment"># 将map 展开  posexplode会多一个pos的字段</span></span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th></th><th>key</th><th>value</th></tr></thead><tbody><tr><td>0</td><td>indo_id_check</td><td>DEDY DWI SETYAWAN</td></tr><tr><td>1</td><td>indo_identical_accuracy_ktp</td><td>-2.0</td></tr><tr><td>2</td><td>indo_mobile_number_approving</td><td>1</td></tr><tr><td>3</td><td>indo_name_diff_id_check</td><td>0</td></tr><tr><td>4</td><td>indo_name_diff_ocr</td><td>1</td></tr><tr><td>5</td><td>indo_nik_approving</td><td>1</td></tr><tr><td>6</td><td>indo_nik_diff_employee_nik</td><td>0</td></tr><tr><td>7</td><td>indo_nik_diff_ocr</td><td>1</td></tr><tr><td>8</td><td>indo_ocr_name</td><td>DEDY DWI SEVYAWAN</td></tr><tr><td>9</td><td>indo_ocr_nik</td><td>3525051812850002</td></tr><tr><td>10</td><td>indo_reject_his_nik</td><td>0</td></tr><tr><td>11</td><td>indo_reject_his_tel</td><td>0</td></tr><tr><td>12</td><td>同一个申请下return次数</td><td>0</td></tr></tbody></table></div><p><a href="https://blog.csdn.net/wang_wbq/article/details/79678168" target="_blank" rel="noopener">Spark SQL集合数据类型array\map的取值方式</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;简介：&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Spark学习" scheme="https://shang.at/categories/Spark%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="json数据操作" scheme="https://shang.at/tags/json%E6%95%B0%E6%8D%AE%E6%93%8D%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>操作系统</title>
    <link href="https://shang.at/post/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    <id>https://shang.at/post/操作系统/</id>
    <published>2021-02-01T02:21:35.000Z</published>
    <updated>2021-02-01T03:00:38.252Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>简介：</p></blockquote><a id="more"></a><h1 id="汇编语言"><a href="#汇编语言" class="headerlink" title="汇编语言"></a>汇编语言</h1><p>汇编语言的本质：机器语言的助记符，它就是机器语言</p><p>汇编的执行过程：</p><p>计算机通电-》CPU读取内存中固定位置的程序（电信号输入）-》时钟发生器不断震荡通断电-》推动CPU内部一步一步执行（执行多少步取决于指令需要的时钟周期）-》计算完成-》写回（电信号）-》写给显卡输出（sout，或者图形）</p><h1 id="计算机的组成"><a href="#计算机的组成" class="headerlink" title="计算机的组成"></a>计算机的组成</h1><p>冯诺依曼体系结构：计算器，控制器，主存储器，输入设备，输出设备</p><p><img src="/images/image-20210201104446406.png" alt="image-20210201104446406"></p><p>计算机有一个主板，它实际上是一个集成电路板，上面有很多插槽，CPU、内存、磁盘控制器、磁盘、显卡、网卡驱动都可以插在上面，一旦插上，整体就组成了一个连通的电路状态</p><p>32位、64位表示的是CPU一次性可以读取的位数，寄存器可以存储的位数</p><h1 id="CPU的基本组成"><a href="#CPU的基本组成" class="headerlink" title="CPU的基本组成"></a>CPU的基本组成</h1><p>PC：Program Counter 程序计数器 记录当前指令地址</p><p>Registers：暂时存储CPU计算需要用到的数据</p><p>ALU：Arithmetic &amp; Logic Unit 运算单元</p><p>CU：Control Unit 控制单元</p><p>MMU：Memory Management Unit 内存管理单元</p><p>cache：</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;简介：&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="操作系统" scheme="https://shang.at/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="操作系统" scheme="https://shang.at/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>大数据-zookeeper</title>
    <link href="https://shang.at/post/%E5%A4%A7%E6%95%B0%E6%8D%AE-zookeeper/"/>
    <id>https://shang.at/post/大数据-zookeeper/</id>
    <published>2021-01-14T11:26:42.000Z</published>
    <updated>2021-01-14T11:31:29.312Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>简介：</p></blockquote><a id="more"></a><p>1、client向集群请求创建一个节点，集群内部会经过两阶段的提交，半数通过，才能最终创建成功，第一阶段是写磁盘日志，第二阶段是在内存中创建节点。看上去很复杂，为什么zk集群还能很快速的响应？</p><p>2、leader挂掉之后，如果有节点的Zxid不是最大的，那么选举了新的leader之后，该节点的Zxid如何更新</p><p>3、如果一个client请求数据的follower，该follower返回的数据如何保证是最新的</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;简介：&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="大数据" scheme="https://shang.at/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
      <category term="zookeeper" scheme="https://shang.at/tags/zookeeper/"/>
    
  </entry>
  
  <entry>
    <title>Mysql学习-优化案例</title>
    <link href="https://shang.at/post/Mysql%E5%AD%A6%E4%B9%A0-%E4%BC%98%E5%8C%96%E6%A1%88%E4%BE%8B/"/>
    <id>https://shang.at/post/Mysql学习-优化案例/</id>
    <published>2020-12-18T02:22:47.000Z</published>
    <updated>2021-02-18T09:03:56.877Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>简介：</p></blockquote><a id="more"></a><p>在进行优化案例之前，先看一下几个概念：索引、聚集索引、普通索引、回表查询、索引覆盖</p><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>数据库表结构：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">user</span> (</span><br><span class="line">    <span class="keyword">id</span> <span class="built_in">int</span> primary <span class="keyword">key</span>,</span><br><span class="line">    <span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">20</span>),</span><br><span class="line">    sex <span class="built_in">varchar</span>(<span class="number">5</span>),</span><br><span class="line">    <span class="keyword">index</span>(<span class="keyword">name</span>)</span><br><span class="line">)<span class="keyword">engine</span>=<span class="keyword">innodb</span>;</span><br></pre></td></tr></table></figure><p><strong>多查询了一个属性，为何检索过程完全不同？</strong></p><p>　　<strong>什么是回表查询？</strong></p><p>　　<strong>什么是索引覆盖？</strong></p><p>　　<strong>如何实现索引覆盖？</strong></p><p><strong>哪些场景，可以利用索引覆盖来优化SQL？</strong></p><p>这些，这是今天要分享的内容。</p><p><em>画外音：本文试验基于MySQL5.6-InnoDB。</em></p><p><strong>一、什么是回表查询？</strong></p><p>这先要从InnoDB的索引实现说起，InnoDB有两大类索引：</p><ul><li>聚集索引(clustered index)</li><li>普通索引(secondary index)</li></ul><p><strong>InnoDB聚集索引和普通索引有什么差异？</strong></p><p>InnoDB<strong>聚集索引</strong>的叶子节点存储行记录，因此， InnoDB必须要有，且只有一个聚集索引：</p><p>（1）如果表定义了PK，则PK就是聚集索引；</p><p>（2）如果表没有定义PK，则第一个not NULL unique列是聚集索引；</p><p>（3）否则，InnoDB会创建一个隐藏的row-id作为聚集索引；</p><p><em>画外音：所以PK查询非常快，直接定位行记录。</em></p><p>InnoDB<strong>普通索引</strong>的叶子节点存储主键值。</p><p>　<em>画外音：注意，不是存储行记录头指针，MyISAM的索引叶子节点存储记录指针。</em></p><p>举个栗子，不妨设有表：</p><p>　　<em>t(id PK, name KEY, sex, flag);</em></p><p><em>画外音：id是聚集索引，name是普通索引。</em></p><p>表中有四条记录：</p><p>　　<em>1, shenjian, m, A</em></p><p>　　<em>3, zhangsan, m, A</em></p><p>　　<em>5, lisi, m, A</em></p><p>　　<em>9, wangwu, f, B</em></p><p><img src="/images/image-20201218102716562.png" alt="image-20201218102716562"></p><p>两个B+树索引分别如上图：</p><p>　　（1）id为PK，聚集索引，叶子节点存储行记录；</p><p>　　（2）name为KEY，普通索引，叶子节点存储PK值，即id；</p><p>既然从普通索引无法直接定位行记录，那<strong>普通索引的查询过程是怎么样的呢？</strong></p><p>通常情况下，需要扫码两遍索引树。</p><p>例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> t <span class="keyword">where</span> <span class="keyword">name</span>=<span class="string">'lisi'</span></span><br></pre></td></tr></table></figure><p><strong>是如何执行的呢？</strong></p><p><img src="/images/image-20201218102815012.png" alt="image-20201218102815012"></p><p>如<strong>粉红色</strong>路径，需要扫码两遍索引树：</p><p>（1）先通过普通索引定位到主键值id=5；</p><p>（2）在通过聚集索引定位到行记录；</p><p>这就是所谓的<strong>回表查询</strong>，先定位主键值，再定位行记录，它的性能较扫一遍索引树更低。</p><p><strong>二、什么是索引覆盖(Covering index)？</strong></p><p>额，楼主并没有在MySQL的官网找到这个概念。</p><p><em>画外音：治学严谨吧？</em></p><p>借用一下SQL-Server官网的说法。</p><p><img src="/images/image-20201218102840583.png" alt="image-20201218102840583"></p><p>MySQL官网，类似的说法出现在explain查询计划优化章节，即explain的输出结果Extra字段为<strong>Using index</strong>时，能够触发索引覆盖。</p><p><img src="/images/image-20201218102853587.png" alt="image-20201218102853587"></p><p>不管是SQL-Server官网，还是MySQL官网，都表达了：只需要在一棵索引树上就能获取SQL所需的所有列数据，无需回表，速度更快。</p><p><strong>三、如何实现索引覆盖？</strong></p><p>常见的方法是：将被查询的字段，建立到联合索引里去。</p><p>仍是之前中的例子：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">user</span> (</span><br><span class="line">    <span class="keyword">id</span> <span class="built_in">int</span> primary <span class="keyword">key</span>,</span><br><span class="line">    <span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">20</span>),</span><br><span class="line">    sex <span class="built_in">varchar</span>(<span class="number">5</span>),</span><br><span class="line">    <span class="keyword">index</span>(<span class="keyword">name</span>)</span><br><span class="line">)<span class="keyword">engine</span>=<span class="keyword">innodb</span>;</span><br></pre></td></tr></table></figure><p>第一个SQL语句：　　</p><p><img src="/images/image-20201218102918820.png" alt="image-20201218102918820"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">id</span>,<span class="keyword">name</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> <span class="keyword">name</span>=<span class="string">'shenjian'</span></span><br></pre></td></tr></table></figure><p>能够命中name索引，索引叶子节点存储了主键id，通过name的索引树即可获取id和name，无需回表，符合索引覆盖，效率较高。</p><p><em>画外音，Extra：<strong>Using index</strong>。</em></p><p>第二个SQL语句：                 </p><p><img src="/images/image-20201218102941301.png" alt="image-20201218102941301"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">id</span>,<span class="keyword">name</span>,sex <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> <span class="keyword">name</span>=<span class="string">'shenjian'</span></span><br></pre></td></tr></table></figure><p>能够命中name索引，索引叶子节点存储了主键id，但sex字段必须回表查询才能获取到，不符合索引覆盖，需要再次通过id值扫码聚集索引获取sex字段，效率会降低。</p><p><em>画外音，Extra：<strong>Using index condition</strong>。</em></p><p>如果把(name)单列索引升级为联合索引(name, sex)就不同了。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">user</span> (</span><br><span class="line">    <span class="keyword">id</span> <span class="built_in">int</span> primary <span class="keyword">key</span>,</span><br><span class="line">    <span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">20</span>),</span><br><span class="line">    sex <span class="built_in">varchar</span>(<span class="number">5</span>),</span><br><span class="line">    <span class="keyword">index</span>(<span class="keyword">name</span>, sex)</span><br><span class="line">)<span class="keyword">engine</span>=<span class="keyword">innodb</span>;</span><br></pre></td></tr></table></figure><p><img src="/images/image-20201218103012729.png" alt="image-20201218103012729"></p><p>可以看到：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">id</span>,name... <span class="keyword">where</span> <span class="keyword">name</span>=<span class="string">'shenjian'</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">id</span>,<span class="keyword">name</span>,sex ... <span class="keyword">where</span> <span class="keyword">name</span>=<span class="string">'shenjian'</span></span><br></pre></td></tr></table></figure><p>都能够命中索引覆盖，无需回表。</p><p><em>画外音，Extra：<strong>Using index</strong>。</em></p><p><strong>四、哪些场景可以利用索引覆盖来优化SQL？</strong></p><p><strong>场景1：全表count查询优化</strong></p><p><img src="/images/image-20201218103034250.png" alt="image-20201218103034250"></p><p>原表为：</p><p><em>user(PK id, name, sex)；</em></p><p>直接：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(<span class="keyword">name</span>) <span class="keyword">from</span> <span class="keyword">user</span>;</span><br></pre></td></tr></table></figure><p>不能利用索引覆盖。</p><p>添加索引：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> <span class="keyword">user</span> <span class="keyword">add</span> <span class="keyword">key</span>(<span class="keyword">name</span>);</span><br></pre></td></tr></table></figure><p>就能够利用索引覆盖提效。</p><p><strong>场景2：列查询回表优化</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">id</span>,<span class="keyword">name</span>,sex ... <span class="keyword">where</span> <span class="keyword">name</span>=<span class="string">'shenjian'</span></span><br></pre></td></tr></table></figure><p>这个例子不再赘述，将单列索引(name)升级为联合索引(name, sex)，即可避免回表。</p><p><strong>场景3：分页查询</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">id</span>,<span class="keyword">name</span>,sex ... <span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">name</span> <span class="keyword">limit</span> <span class="number">500</span>,<span class="number">100</span></span><br></pre></td></tr></table></figure><p>将单列索引(name)升级为联合索引(name, sex)，也可以避免回表。</p><h2 id="优化案例"><a href="#优化案例" class="headerlink" title="优化案例"></a>优化案例</h2>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;简介：&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Mysql" scheme="https://shang.at/categories/Mysql/"/>
    
    
      <category term="mysql优化" scheme="https://shang.at/tags/mysql%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Mysql学习-索引</title>
    <link href="https://shang.at/post/Mysql%E5%AD%A6%E4%B9%A0-%E7%B4%A2%E5%BC%95/"/>
    <id>https://shang.at/post/Mysql学习-索引/</id>
    <published>2020-12-15T01:48:57.000Z</published>
    <updated>2020-12-15T08:56:13.741Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>简介：唯一索引（unique index）和非唯一索引（普通索引）（index） 区别</p></blockquote><a id="more"></a><p>如果在一个列上同时建唯一索引和普通索引的话，mysql会自动选择唯一索引。</p><p>谷歌一下：</p><p>唯一索引和普通索引使用的结构都是B-tree,执行时间复杂度都是O(log n)。</p><p>补充下概念：</p><p><strong>1、普通索引(非唯一索引)</strong></p><p>　　普通索引（由关键字KEY或INDEX定义的索引）的唯一任务是加快对数据的访问速度。因此，应该只为那些最经常出现在查询条件（WHEREcolumn=）或排序条件（ORDERBYcolumn）中的数据列创建索引。只要有可能，就应该选择一个数据最整齐、最紧凑的数据列（如一个整数类型的数据列）来创建索引。</p><p><strong>2、唯一索引</strong></p><p>　　普通索引允许被索引的数据列包含重复的值。比如说，因为人有可能同名，所以同一个姓名在同一个“员工个人资料”数据表里可能出现两次或更多次。</p><p>如果能确定某个数据列将只包含彼此各不相同的值，在为这个数据列创建索引的时候就应该用关键字UNIQUE把它定义为一个唯一索引。这么做的好处：一是简化了MySQL对这个索引的管理工作，这个索引也因此而变得更有效率；二是MySQL会在有新记录插入数据表时，自动检查新记录的这个字段的值是否已经在某个记录的这个字段里出现过了；如果是，MySQL将拒绝插入那条新记录。也就是说，唯一索引可以保证数据记录的唯一性。事实上，在许多场合，人们创建唯一索引的目的往往不是为了提高访问速度，而只是为了避免数据出现重复。</p><p><strong>主键索引</strong><br>主键索引是唯一索引的特殊类型。<br>数据库表通常有一列或列组合，其值用来唯一标识表中的每一行。该列称为表的主键。<br>在数据库关系图中为表定义一个主键将自动创建主键索引，主键索引是唯一索引的特殊类型。主键索引要求主键中的每个值是唯一的。当在查询中使用主键索引时，它还允许快速访问数据。</p><p>它们的一些比较：<br>(1)对于主健/unique constraint ， oracle/sql server/mysql等都会自动建立唯一索引；<br>(2)主键不一定只包含一个字段，所以如果你在主键的其中一个字段建唯一索引还是必要的；<br>(3)主健可作外健，唯一索引不可；<br>(4)主健不可为空，唯一索引可；<br>(5)主健也可是多个字段的组合；<br>(6)主键与唯一索引不同的是：<br>a.有not null属性；<br>b.每个表只能有一个。</p><p><strong>3.  实例：</strong></p><p>索引的作用是“排列好次序，使得查询时可以快速找到”</p><p>》唯一索引：被索引的字段组合，其数据在全表中唯一。<br>如下表中，为’学号‘建索引：<br>学号        姓名<br>-———————————<br>001         张三<br>002         李四</p><p>》非唯一索引：数据可以不唯一。<br>如下表中，为Score建索引，不可唯一：</p><p>Score | Name<br>-—————————-<br>98        张三<br>98        李四<br>96        <a href="http://zhidao.baidu.com/question/456499708168710645.html?gossl=http%3A%2F%2Fwww.baidu.com%2Fs%3Fwd%3D%25E7%258E%258B%25E4%25BA%2594%26tn%3D44039180_cpr%26fenlei%3Dmv6quAkxTZn0IZRqIHckPjm4nH00T1Y3Pyu-nhm1uj6srHn1ryNh0ZwV5Hcvrjm3rH6sPfKWUMw85HfYnjn4nH6sgvPsT6KdThsqpZwYTjCEQLGCpyw9Uz4Bmy-bIi4WUvYETgN-TLwGUv3EPjRvPjb4P103nHm3P1DsPWfd" target="_blank" rel="noopener">王五</a></p><p>-————————————————————————————————————————————————————-</p><p><strong>CREATE INDEX 语句用于在表中创建索引。</strong></p><p><strong>在不读取整个表的情况下，索引使数据库应用程序可以更快地查找数据。</strong></p><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><p>您可以在表中创建索引，以便更加快速高效地查询数据。</p><p>用户无法看到索引，它们只能被用来加速搜索/查询。</p><p>注释：更新一个包含索引的表需要比更新一个没有索引的表更多的时间，这是由于索引本身也需要更新。因此，理想的做法是仅仅在常常被搜索的列（以及表）上面创建索引。</p><h3 id="SQL-CREATE-INDEX-语法"><a href="#SQL-CREATE-INDEX-语法" class="headerlink" title="SQL CREATE INDEX 语法"></a>SQL CREATE INDEX 语法</h3><p>在表上创建一个简单的索引。允许使用重复的值：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">INDEX</span> index_name <span class="keyword">ON</span> table_name (column_name)</span><br></pre></td></tr></table></figure><p>注释：”column_name” 规定需要索引的列。</p><h3 id="SQL-CREATE-UNIQUE-INDEX-语法"><a href="#SQL-CREATE-UNIQUE-INDEX-语法" class="headerlink" title="SQL CREATE UNIQUE INDEX 语法"></a>SQL CREATE UNIQUE INDEX 语法</h3><p>在表上创建一个唯一的索引。唯一的索引意味着两个行不能拥有相同的索引值。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">UNIQUE</span> <span class="keyword">INDEX</span> index_name <span class="keyword">ON</span> table_name (column_name)</span><br></pre></td></tr></table></figure><h2 id="CREATE-INDEX-实例"><a href="#CREATE-INDEX-实例" class="headerlink" title="CREATE INDEX 实例"></a>CREATE INDEX 实例</h2><p>本例会创建一个简单的索引，名为 “PersonIndex”，在 Person 表的 LastName 列：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">INDEX</span> PersonIndex <span class="keyword">ON</span> Person (LastName)</span><br></pre></td></tr></table></figure><p>如果您希望以<em>降序</em>索引某个列中的值，您可以在列名称之后添加保留字 <em>DESC</em>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">INDEX</span> PersonIndex <span class="keyword">ON</span> Person (LastName <span class="keyword">DESC</span>)</span><br></pre></td></tr></table></figure><p>假如您希望索引不止一个列，您可以在括号中列出这些列的名称，用逗号隔开：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">INDEX</span> PersonIndex <span class="keyword">ON</span> Person (LastName, FirstName)</span><br></pre></td></tr></table></figure><p><strong>Drop INDEX 实例</strong></p><p>drop index idx_name on db;</p><p>From:</p><p> <a href="http://blog.chinaunix.net/uid-30041424-id-5680256.html" target="_blank" rel="noopener">http://blog.chinaunix.net/uid-30041424-id-5680256.html</a> </p><p><a href="https://zhidao.baidu.com/question/456499708168710645.html" target="_blank" rel="noopener">https://zhidao.baidu.com/question/456499708168710645.html</a></p><p><a href="http://www.cnblogs.com/ymj0906/p/4240856.html" target="_blank" rel="noopener">http://www.cnblogs.com/ymj0906/p/4240856.html</a> </p><p><a href="http://www.cnblogs.com/woodytu/p/4560478.html" target="_blank" rel="noopener">索引键的唯一性（1/4）：堆表上的唯一与非唯一非聚集索引的区别</a> </p><p><a href="http://www.cnblogs.com/woodytu/p/4560478.html" target="_blank" rel="noopener">http://www.cnblogs.com/woodytu/p/4560478.html</a> </p><p><a href="http://www.cnblogs.com/Joe-T/p/3573672.html" target="_blank" rel="noopener">唯一索引和非唯一索引的区别简析</a></p><p><a href="http://www.cnblogs.com/Joe-T/p/3573672.html" target="_blank" rel="noopener">http://www.cnblogs.com/Joe-T/p/3573672.html</a></p><p><a href="http://www.w3school.com.cn/sql/sql_create_index.asp" target="_blank" rel="noopener">http://www.w3school.com.cn/sql/sql_create_index.asp</a> </p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;简介：唯一索引（unique index）和非唯一索引（普通索引）（index） 区别&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Mysql" scheme="https://shang.at/categories/Mysql/"/>
    
    
      <category term="索引" scheme="https://shang.at/tags/%E7%B4%A2%E5%BC%95/"/>
    
  </entry>
  
  <entry>
    <title>Python学习-正则</title>
    <link href="https://shang.at/post/Python%E5%AD%A6%E4%B9%A0-%E6%AD%A3%E5%88%99/"/>
    <id>https://shang.at/post/Python学习-正则/</id>
    <published>2020-12-08T10:18:33.000Z</published>
    <updated>2020-12-08T10:19:14.366Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>简介：</p></blockquote><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;简介：&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="正则" scheme="https://shang.at/categories/%E6%AD%A3%E5%88%99/"/>
    
    
      <category term="正则" scheme="https://shang.at/tags/%E6%AD%A3%E5%88%99/"/>
    
  </entry>
  
  <entry>
    <title>Python学习-Literal String Interpolation</title>
    <link href="https://shang.at/post/Python%E5%AD%A6%E4%B9%A0-Literal-String-Interpolation/"/>
    <id>https://shang.at/post/Python学习-Literal-String-Interpolation/</id>
    <published>2020-12-08T10:18:18.000Z</published>
    <updated>2020-12-08T10:19:07.362Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>简介：</p></blockquote><a id="more"></a><p><a href="https://www.python.org/dev/peps/pep-0498/" target="_blank" rel="noopener">https://www.python.org/dev/peps/pep-0498/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;简介：&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="python-lsi" scheme="https://shang.at/categories/python-lsi/"/>
    
    
      <category term="python-lsi" scheme="https://shang.at/tags/python-lsi/"/>
    
  </entry>
  
  <entry>
    <title>大数据-flink</title>
    <link href="https://shang.at/post/%E5%A4%A7%E6%95%B0%E6%8D%AE-flink/"/>
    <id>https://shang.at/post/大数据-flink/</id>
    <published>2020-12-07T02:51:11.000Z</published>
    <updated>2021-01-31T01:39:53.471Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>简介：</p></blockquote><a id="more"></a><p><a href="https://ci.apache.org/projects/flink/flink-docs-release-1.11/try-flink/table_api.html5" target="_blank" rel="noopener">https://ci.apache.org/projects/flink/flink-docs-release-1.11/try-flink/table_api.html5</a></p><p>-</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;简介：&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="大数据" scheme="https://shang.at/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
      <category term="flink" scheme="https://shang.at/tags/flink/"/>
    
  </entry>
  
  <entry>
    <title>java学习-Date和时区转换</title>
    <link href="https://shang.at/post/java%E5%AD%A6%E4%B9%A0-Date%E5%92%8C%E6%97%B6%E5%8C%BA%E8%BD%AC%E6%8D%A2/"/>
    <id>https://shang.at/post/java学习-Date和时区转换/</id>
    <published>2020-11-06T02:07:20.000Z</published>
    <updated>2020-11-06T02:09:36.492Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>简介：</p></blockquote><a id="more"></a><p><strong>1.Date中保存的是什么</strong> </p><p>  在java中，只要我们执行 </p><p>  Date date = new Date(); </p><p>  就可以得到当前时间。如： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Date date = <span class="keyword">new</span> Date();</span><br><span class="line">System.out.println(date);</span><br></pre></td></tr></table></figure><p>  输出结果是： </p><p>  Thu Aug 24 10:15:29 CST 2017 </p><p>  也就是我执行上述代码的时刻：2017年8月24日10点15分29秒。是不是Date对象里存了年月日时分秒呢？不是的，Date对象里存的只是一个long型的变量，其值为自1970年1月1日0点至Date对象所记录时刻经过的毫秒数，调用Date对象getTime()方法就可以返回这个毫秒数，如下代码： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Date date = <span class="keyword">new</span> Date();</span><br><span class="line">System.out.println(date + <span class="string">", "</span> + date.getTime());</span><br></pre></td></tr></table></figure><p>  输出如下： </p><p>  Thu Aug 24 10:48:05 CST 2017, 1503542885955 </p><p>  即上述程序执行的时刻是2017年8月24日10点48分05秒，该时刻距离1970年1月1日0点经过了1503542885955毫秒。反过来说，输出的年月日时分秒其实是根据这个毫秒数来反算出来的。 </p><p>  <strong>2.时区</strong> </p><p>  全球分为24个时区，相邻时区时间相差1个小时。比如北京处于东八时区，东京处于东九时区，北京时间比东京时间晚1个小时，而英国伦敦时间比北京晚7个小时（英国采用夏令时时，8月英国处于夏令时）。比如此刻北京时间是2017年8月24日11:17:10，则东京时间是2017年8月24日12:17:10，伦敦时间是2017年8月24日4:17:10。 </p><p>  既然Date里存放的是当前时刻距1970年1月1日0点时刻的毫秒数，如果此刻在伦敦、北京、东京有三个程序员同时执行如下语句： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Date date = <span class="keyword">new</span> Date();</span><br></pre></td></tr></table></figure><p>  那这三个date对象里存的毫秒数是相同的吗？还是北京的比东京的小3600000（北京时间比东京时间晚1小时，1小时为3600秒即3600000毫秒）？答案是，这3个Date里的毫秒数是完全一样的。确切的说，Date对象里存的是自格林威治时间（   GMT）1970年1月1日0点至Date对象所表示时刻所经过的毫秒数。所以，如果某一时刻遍布于世界各地的程序员同时执行new Date语句，这些Date对象所存的毫秒数是完全一样的。也就是说，Date里存放的毫秒数是与时区无关的。 </p><p>  继续上述例子，如果上述3个程序员调用那一刻的时间是北京时间2017年8月24日11:17:10，他们继续调用 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(date);</span><br></pre></td></tr></table></figure><p>  那么北京的程序员将会打印出2017年8月24日11:17:10，而东京的程序员会打印出2017年8月24日12:17:10，伦敦的程序员会打印出2017年8月24日4:17:10。既然Date对象只存了一个毫秒数，为什么这3个毫秒数完全相同的Date对象，可以打印出不同的时间呢？这是因为Sysytem.out.println函数在打印时间时，会取操作系统当前所设置的时区，然后根据这个时区将同毫秒数解释成该时区的时间。当然我们也可以手动设置时区，以将同一个Date对象按不同的时区输出。可以做如下实验验证： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Date date = <span class="keyword">new</span> Date(<span class="number">1503544630000L</span>);  <span class="comment">// 对应的北京时间是2017-08-24 11:17:10</span></span><br><span class="line">SimpleDateFormat bjSdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);     <span class="comment">// 北京</span></span><br><span class="line">bjSdf.setTimeZone(TimeZone.getTimeZone(<span class="string">"Asia/Shanghai"</span>));  <span class="comment">// 设置北京时区</span></span><br><span class="line">SimpleDateFormat tokyoSdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);  <span class="comment">// 东京</span></span><br><span class="line">tokyoSdf.setTimeZone(TimeZone.getTimeZone(<span class="string">"Asia/Tokyo"</span>));  <span class="comment">// 设置东京时区</span></span><br><span class="line">SimpleDateFormat londonSdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>); <span class="comment">// 伦敦</span></span><br><span class="line">londonSdf.setTimeZone(TimeZone.getTimeZone(<span class="string">"Europe/London"</span>));  <span class="comment">// 设置伦敦时区</span></span><br><span class="line">System.out.println(<span class="string">"毫秒数:"</span> + date.getTime() + <span class="string">", 北京时间:"</span> + bjSdf.format(date));</span><br><span class="line">System.out.println(<span class="string">"毫秒数:"</span> + date.getTime() + <span class="string">", 东京时间:"</span> + tokyoSdf.format(date));</span><br><span class="line">System.out.println(<span class="string">"毫秒数:"</span> + date.getTime() + <span class="string">", 伦敦时间:"</span> + londonSdf.format(date));</span><br></pre></td></tr></table></figure><p>  输出为： </p><p>  毫秒数:1503544630000, 北京时间:2017-08-24 11:17:10 </p><p>  毫秒数:1503544630000, 东京时间:2017-08-24 12:17:10 </p><p>  毫秒数:1503544630000, 伦敦时间:2017-08-24 04:17:10 </p><p>  可以看出，同一个Date对象，按不同的时区来格式化，将得到不同时区的时间。由此可见，Date对象里保存的毫秒数和具体输出的时间（即年月日时分秒）是模型和视图的关系，而时区（即Timezone)则决定了将同一个模型展示成什么样的视图。 </p><p>  <strong>3.从字符串中读取时间</strong> </p><p>  有时我们会遇到从一个字符串中读取时间的要求，即从字符串中解析时间并得到一个Date对象，比如将  “2017-8-24 11:17:10”  解析为一个Date对象。现在问题来了，这个时间到底指的是北京时间的2017年8月24日11:17:10，还是东京时间的2017年8月24日11:17:10？如果指的是北京时间，那么这个时间对应的东京时间2017年8月24日12:17:10；如果指的是东京时间，那么这个时间对应的北京时间就是2017年8月24日10:17:10。因此，只说年月日时分秒而不说是哪个时区的，是有歧义的，没有歧义的做法是，给出一个时间字符串，同时指明这是哪个时区的时间。 </p><p>  从字符串中解析时间的正确作法是：指定时区来解析。示例如下： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">String timeStr = <span class="string">"2017-8-24 11:17:10"</span>; <span class="comment">// 字面时间</span></span><br><span class="line">SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</span><br><span class="line">sdf.setTimeZone(TimeZone.getTimeZone(<span class="string">"Asia/Shanghai"</span>)); <span class="comment">// 设置北京时区</span></span><br><span class="line">Date d = sdf.parse(timeStr);</span><br><span class="line">System.out.println(sdf.format(d) + <span class="string">", "</span> + d.getTime());</span><br></pre></td></tr></table></figure><p>  输出为： </p><p>  2017-08-24 11:17:10, 1503544630000, </p><p>  将一个时间字符串按不同时区来解释，得到的Date对象的值是不同的。验证如下： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">String timeStr = <span class="string">"2017-8-24 11:17:10"</span>; <span class="comment">// 字面时间</span></span><br><span class="line">SimpleDateFormat bjSdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</span><br><span class="line"></span><br><span class="line">bjSdf.setTimeZone(TimeZone.getTimeZone(<span class="string">"Asia/Shanghai"</span>));</span><br><span class="line">Date bjDate = bjSdf.parse(timeStr);  <span class="comment">// 解析</span></span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"字面时间: "</span> + timeStr +<span class="string">",按北京时间来解释:"</span> + bjSdf.format(bjDate) + <span class="string">", "</span> + bjDate.getTime());</span><br><span class="line"></span><br><span class="line">SimpleDateFormat tokyoSdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);  <span class="comment">// 东京</span></span><br><span class="line"></span><br><span class="line">tokyoSdf.setTimeZone(TimeZone.getTimeZone(<span class="string">"Asia/Tokyo"</span>));  <span class="comment">// 设置东京时区</span></span><br><span class="line"></span><br><span class="line">Date tokyoDate = tokyoSdf.parse(timeStr); <span class="comment">// 解析</span></span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"字面时间: "</span> + timeStr +<span class="string">",按东京时间来解释:"</span>  + tokyoSdf.format(tokyoDate) + <span class="string">", "</span> + tokyoDate.getTime());</span><br></pre></td></tr></table></figure><p>  输出为： </p><p>  字面时间: 2017-8-24 11:17:10,按北京时间来解释:2017-08-24 11:17:10, 1503544630000 </p><p>  字面时间: 2017-8-24 11:17:10,按东京时间来解释:2017-08-24 11:17:10, 1503541030000 </p><p>  可以看出，对于”2017-8-24 11:17:10”这个字符串，按北京时间来解释得到Date对象的毫秒数是 </p><p>  1503544630000；而按东京时间来解释得到的毫秒数是1503541030000，前者正好比后者大于3600000毫秒即1个小时，正好是北京时间和东京时间的时差。这很好理解，北京时间2017-08-24 11:17:10对应的毫秒数是1503544630000，而东京时间2017-08-24 11:17:10对应的北京时间其实是2017-08-24 10:17:10（因为北京时间比东京时间晚1个小时），北京时间2017-08-24 10:17:10自然比北京时间2017-08-24 11:17:10少3600000毫秒。 </p><p>  <strong>4.将字符串表示的时间转换成另一个时区的时间字符串</strong> </p><p>  综合以上分析，如果给定一个时间字符串，并告诉你这是某个时区的时间，要将它转换为另一个时区的时间并输出，正确的做法是： </p><p>  1.将字符串按原时区转换成Date对象； </p><p>  2.将Date对象格式化成目标时区的时间。 </p><p>  比如，将北京时间”2017-8-24 11:17:10  “输出成东京时间，代码为： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">String timeStr = <span class="string">"2017-8-24 11:17:10"</span>; <span class="comment">// 字面时间</span></span><br><span class="line">SimpleDateFormat bjSdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</span><br><span class="line"></span><br><span class="line">bjSdf.setTimeZone(TimeZone.getTimeZone(<span class="string">"Asia/Shanghai"</span>));</span><br><span class="line">Date date = bjSdf.parse(timeStr);  <span class="comment">// 将字符串时间按北京时间解析成Date对象</span></span><br><span class="line"></span><br><span class="line">SimpleDateFormat tokyoSdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);  <span class="comment">// 东京</span></span><br><span class="line">tokyoSdf.setTimeZone(TimeZone.getTimeZone(<span class="string">"Asia/Tokyo"</span>));  <span class="comment">// 设置东京时区</span></span><br><span class="line">System.out.println(<span class="string">"北京时间: "</span> + timeStr +<span class="string">"对应的东京时间为:"</span>  + tokyoSdf.format(date));</span><br></pre></td></tr></table></figure><p>  输出为： </p><p>  北京时间:2017-8-24 11:17:10对应的东京时间为:2017-08-24 12:17:10</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;简介：&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>工具使用-jupyter</title>
    <link href="https://shang.at/post/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8-jupyter/"/>
    <id>https://shang.at/post/工具使用-jupyter/</id>
    <published>2020-10-30T08:40:52.000Z</published>
    <updated>2020-10-30T08:45:50.890Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>简介：</p></blockquote><a id="more"></a><h1 id="如何在Jupyter-notebook中debug？"><a href="#如何在Jupyter-notebook中debug？" class="headerlink" title="如何在Jupyter notebook中debug？"></a>如何在Jupyter notebook中debug？</h1><p>在需要breakpoint的地方插入<code>import pdb; pdb.set_trace()</code>，运行后会进入debugger，有一个交互界面。</p><h1 id="脚本控制清空output"><a href="#脚本控制清空output" class="headerlink" title="脚本控制清空output"></a>脚本控制清空output</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> IPython.display <span class="keyword">import</span> clear_output</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">    clear_output(wait=<span class="literal">True</span>)</span><br><span class="line">    print(<span class="string">"Hello World!"</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;简介：&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="jupyter" scheme="https://shang.at/categories/jupyter/"/>
    
    
      <category term="工具使用" scheme="https://shang.at/tags/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>工具使用-idea</title>
    <link href="https://shang.at/post/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8-idea/"/>
    <id>https://shang.at/post/工具使用-idea/</id>
    <published>2020-10-29T05:51:45.000Z</published>
    <updated>2020-12-11T08:04:43.562Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>简介：</p></blockquote><a id="more"></a><h1 id="调整注释的颜色"><a href="#调整注释的颜色" class="headerlink" title="调整注释的颜色"></a>调整注释的颜色</h1><p><img src="/images/image-20201029135938129.png" alt="image-20201029135938129"></p><h1 id="调整单词-选中之后-相同单词的颜色"><a href="#调整单词-选中之后-相同单词的颜色" class="headerlink" title="调整单词 选中之后 相同单词的颜色"></a>调整单词 选中之后 相同单词的颜色</h1><p><img src="/images/image-20201029135329906.png" alt="image-20201029135329906"></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;简介：&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="idea" scheme="https://shang.at/categories/idea/"/>
    
    
      <category term="工具" scheme="https://shang.at/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>程序设计思想-池化思想</title>
    <link href="https://shang.at/post/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3-%E6%B1%A0%E5%8C%96%E6%80%9D%E6%83%B3/"/>
    <id>https://shang.at/post/程序设计思想-池化思想/</id>
    <published>2020-10-23T00:00:48.000Z</published>
    <updated>2020-10-23T01:34:19.987Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>简介：为了提高程序的性能，在设计中很巧妙的使用了<strong>池化</strong>的思想，包括线程池、连接池、内存池</p></blockquote><a id="more"></a><h1 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h1><p>对线程进行池化管理，可以实现对线程的复用，避免大量创建线程的资源浪费</p><p>疑问：每个task结束之后，线程是如何复用的呢？</p><h1 id="连接池"><a href="#连接池" class="headerlink" title="连接池"></a>连接池</h1><h1 id="内存池"><a href="#内存池" class="headerlink" title="内存池"></a>内存池</h1><p>对内存进行池化管理，可以实现对内存的重复使用，对于java等一系列需要GC的语言来说，可以节省大量GC的时间，很大程度上提高程序的运行效率</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;简介：为了提高程序的性能，在设计中很巧妙的使用了&lt;strong&gt;池化&lt;/strong&gt;的思想，包括线程池、连接池、内存池&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="池化" scheme="https://shang.at/categories/%E6%B1%A0%E5%8C%96/"/>
    
    
      <category term="程序设计" scheme="https://shang.at/tags/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>java学习-基础3-对象内存布局</title>
    <link href="https://shang.at/post/java%E5%AD%A6%E4%B9%A0-%E5%9F%BA%E7%A1%803-%E5%AF%B9%E8%B1%A1%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80/"/>
    <id>https://shang.at/post/java学习-基础3-对象内存布局/</id>
    <published>2020-09-27T23:56:58.000Z</published>
    <updated>2020-12-11T08:21:32.601Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>简介：</p></blockquote><a id="more"></a><p><img src="/images/image-20200928075751249.png" alt="image-20200928075751249"></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;简介：&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="JAVA学习" scheme="https://shang.at/categories/JAVA%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="对象内存布局" scheme="https://shang.at/tags/%E5%AF%B9%E8%B1%A1%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80/"/>
    
  </entry>
  
  <entry>
    <title>工具使用-gitlab</title>
    <link href="https://shang.at/post/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8-gitlab/"/>
    <id>https://shang.at/post/工具使用-gitlab/</id>
    <published>2020-09-11T06:52:31.000Z</published>
    <updated>2020-12-22T15:18:08.734Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>简介：</p></blockquote><a id="more"></a><p>Local repo：就是存在你本地的仓库；Remote repo：就是保存在远端的仓库，两者的内容在某些时候是不一样的，需要手动去保持一致</p><p>local和remote的关系：第一次从remote将仓库克隆到本地的时候，本地的repo和远端的一模一样，如果你在本地创建了新的分支，那么在你执行git push之前，remote repo是没有你创建的分支的。同样的如果有其他人创建了分支并且push到了remote repo，你本地也是不知道的，这个时候就需要执行git fetch去更新你本地的repo。</p><h1 id="新建repo"><a href="#新建repo" class="headerlink" title="新建repo"></a>新建repo</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> Git global setup</span><br><span class="line">git config --global user.name "xxx"</span><br><span class="line">git config --global user.email "xxx@abc.com"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> Create a new repository</span><br><span class="line">git clone git_url</span><br><span class="line">cd atome-id-apaylater-data-warehouse</span><br><span class="line">touch README.md</span><br><span class="line">git add README.md</span><br><span class="line">git commit -m "add README"</span><br><span class="line">git push -u origin master</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> Push an existing folder</span><br><span class="line">cd existing_folder</span><br><span class="line">git init</span><br><span class="line">git remote add origin git_url</span><br><span class="line">git add .</span><br><span class="line">git commit -m "Initial commit"</span><br><span class="line">git push -u origin master</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> Push an existing Git repository</span><br><span class="line">cd existing_repo</span><br><span class="line">git remote rename origin old-origin</span><br><span class="line">git remote add origin git_url</span><br><span class="line">git push -u origin --all</span><br><span class="line">git push -u origin --tags</span><br></pre></td></tr></table></figure><h1 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h1><p>查看本地分支：git branch</p><p>查看全部分支：git branch -a</p><p>删除本地分支：git branch -d branchName</p><p>强制删除本地分支：git branch -D branchName</p><p>切换分支：git checkout branchName</p><p>基于当前分支创建一个新的分支：git checkout -b newBranch</p><p>暂存本地修改（修改了本地文件，但是又不想提交。慎用）：git stash</p><p>释放 暂存的本地修改：git stash pop</p><p>查看local repo 的状态：git status</p><p>将修改的文件添加到local repo（tracked）：git add . 或git add 文件名</p><p>将修改的文件提交到local repo：git commit -m ‘msg’</p><p>合并分支：git merge</p><p>更新本地repo：git fetch</p><p><a href="https://www.cnblogs.com/runnerjack/p/9342362.html" target="_blank" rel="noopener">git pull与git fetch的更详细的解读</a></p><p>工作中常用的操作步骤：</p><ol><li>创建自己的分支</li><li>开发代码</li><li>执行 git add和git commit命令，将修改提交到local的分支中（这个时候remote是没有这个分支的）</li><li>切回master分支，更新master代码</li><li>切回自己的分支，将master分支merge到自己的分支，顺便解决冲突（冲突是两个人同时修改同一个文件的时候可能会发生的，一般很少会发生冲突）</li><li>可能需要继续执行git add 和 git commit</li><li>将本地分支推到remote：git push</li><li>到web端提交MR</li></ol><h1 id="用rebase-i-汇合提交"><a href="#用rebase-i-汇合提交" class="headerlink" title="用rebase -i 汇合提交"></a>用rebase -i 汇合提交</h1><p>进入一个repo目录，使用<code>git log</code>可以查看每次commit的记录</p><p><img src="/images/image-20200928100739661.png" alt="image-20200928100739661"></p><p>然后使用<code>git rebase -i HEAD~~</code>命令进入汇合提交页面(可以使用vim编辑的状态)</p><p>每次rebase只能把当前的commit合并到前一个commit上，编辑状态如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">pick 9a54fd4 添加commit的说明</span><br><span class="line">pick 0d4a808 添加pull的说明</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> Rebase 326fc9f..0d4a808 onto d286baa</span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span> Commands:</span><br><span class="line"><span class="meta">#</span>  p, pick = use commit</span><br><span class="line"><span class="meta">#</span>  r, reword = use commit, but edit the commit message</span><br><span class="line"><span class="meta">#</span>  e, edit = use commit, but stop for amending</span><br><span class="line"><span class="meta">#</span>  s, squash = use commit, but meld into previous commit</span><br><span class="line"><span class="meta">#</span>  f, fixup = like "squash", but discard this commit's log message</span><br><span class="line"><span class="meta">#</span>  x, exec = run command (the rest of the line) using shell</span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span> If you remove a line here THAT COMMIT WILL BE LOST.</span><br><span class="line"><span class="meta">#</span> However, if you remove everything, the rebase will be aborted.</span><br><span class="line"><span class="meta">#</span></span><br></pre></td></tr></table></figure><p>将第二行的<code>pick</code>改成<code>squash</code>保存即可。</p><p>再次使用<code>git log</code>查看commit log</p><p><img src="/images/image-20200928100754461.png" alt="image-20200928100754461"></p><h1 id="git如何删除已经-add-的文件"><a href="#git如何删除已经-add-的文件" class="headerlink" title="git如何删除已经 add 的文件"></a>git如何删除已经 add 的文件</h1><p>使用 <strong>git rm</strong> 命令即可，有两种选择,</p><p>一种是 <strong>git rm —cached “文件路径”</strong>，不删除物理文件，仅将该文件从缓存中删除；</p><p>一种是 <strong>git rm —f  “文件路径”</strong>，不仅将该文件从缓存中删除，还会将物理文件删除（不会回收到垃圾桶）。</p><h1 id="如何如何更新fork的repository"><a href="#如何如何更新fork的repository" class="headerlink" title="如何如何更新fork的repository"></a>如何如何更新fork的repository</h1><p>首先，检查一下当前的配置，看看当前有没有已经设置了上游，这要使用 git remote -v 命令。如下：</p><p>git remote -v  </p><ol><li>origin  <a href="https://github.com/YOUR_USERNAME/YOUR_FORK.git" target="_blank" rel="noopener">https://github.com/YOUR_USERNAME/YOUR_FORK.git</a> (fetch)  </li><li>origin  <a href="https://github.com/YOUR_USERNAME/YOUR_FORK.git" target="_blank" rel="noopener">https://github.com/YOUR_USERNAME/YOUR_FORK.git</a> (push)  </li></ol><p>以上表明，origin这个repository对应的是远端的https开头的这个链接指向的repository，即自己fork出的repository.</p><p>第二步，将原repository设置为自己fork出的repository的上游（upstream）。运用如下的命令：</p><p>$git remote add upstream <a href="https://github.com/ORIGINAL_OWNER/ORIGINAL_REPOSITORY.git" target="_blank" rel="noopener">https://github.com/ORIGINAL_OWNER/ORIGINAL_REPOSITORY.git</a>  </p><p>运用第一步中提到的<a href="http://lib.csdn.net/base/git" target="_blank" rel="noopener">git</a> remove -v命令再次检查一下，结果如下：</p><p>$git remote -v  </p><ol><li>origin    <a href="https://github.com/YOUR_USERNAME/YOUR_FORK.git" target="_blank" rel="noopener">https://github.com/YOUR_USERNAME/YOUR_FORK.git</a> (fetch)  </li><li>origin    <a href="https://github.com/YOUR_USERNAME/YOUR_FORK.git" target="_blank" rel="noopener">https://github.com/YOUR_USERNAME/YOUR_FORK.git</a> (push)  </li><li>upstream  <a href="https://github.com/ORIGINAL_OWNER/ORIGINAL_REPOSITORY.git" target="_blank" rel="noopener">https://github.com/ORIGINAL_OWNER/ORIGINAL_REPOSITORY.git</a> (fetch)  </li><li>upstream  <a href="https://github.com/ORIGINAL_OWNER/ORIGINAL_REPOSITORY.git" target="_blank" rel="noopener">https://github.com/ORIGINAL_OWNER/ORIGINAL_REPOSITORY.git</a> (push)  </li></ol><p>第三步，运行 git fetch upstream 命令，如下：</p><p>$git fetch upstream  </p><ol><li>remote: Counting objects: 75, done.  </li><li>remote: Compressing objects: 100% (53/53), done.  </li><li>remote: Total 62 (delta 27), reused 44 (delta 9)  </li><li>Unpacking objects: 100% (62/62), done.  </li><li>From <a href="https://github.com/ORIGINAL_OWNER/ORIGINAL_REPOSITORY" target="_blank" rel="noopener">https://github.com/ORIGINAL_OWNER/ORIGINAL_REPOSITORY</a>  </li><li>* [new branch]      master     -&gt; upstream/master  </li></ol><p>以上表明，远程的原repository上确实有一些更新，现在它们已经被download到本地的.git文件夹下了，但是还没有合并到本地的代码中。</p><p>第四步，git checkout master，这是保证切换到本地的repository的master上，如果本来就在，那么这一步不是必须的。</p><p>第五步，运行 git merge upstream/master 命令，将upstream/master上的更新合并到本地的master上，其实就是将第三步中download到.git文件夹下的那些change合并到本地的master中。如下：</p><p>$git merge upstream/master  </p><ol><li>Updating a422352..5fdff0f  </li><li>Fast-forward  </li><li>README                    |    9 ———-  </li><li>README.md                 |    7 ++++++  </li><li>2 files changed, 7 insertions(+), 9 deletions(-)  </li><li>delete mode 100644 README  </li><li>create mode 100644 README.md  </li></ol><p>如果本地没有什么自己独立的更新的话，那么将执行”Fast-forward”的合并。如果本地有自己独立的更新，而又会引起冲突的话，则要解决冲突，再commit.</p><p>关于解决冲突，如果明确所有冲突都是使用upstream/master上的来override自己的，那么可以直接运行如下命令，则无需解决冲突了</p><p>git merge -X theirs upstream/master  </p><p>注意，以上步骤结束后，仅仅是本地的fork出的repository和原repository取得了同步，如果想让远程的fork出的repository也同样取得同步，必须再git push上去。</p><h1 id="submodule"><a href="#submodule" class="headerlink" title="submodule"></a>submodule</h1><ol><li>创建一个repo：test_1</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git clone git@repo.advai.net:shang.wang/test_1.git</span><br><span class="line">touch README.md</span><br><span class="line">git commit -m "1"</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><ol><li>创建一个lib repo：test_2</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git clone git@repo.advai.net:shang.wang/test_2.git</span><br><span class="line">touch README.md</span><br><span class="line">git commit -m &quot;1&quot;</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><ol><li>将test_2作为submodule添加到test_1中</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git submodule add git@repo.advai.net:shang.wang/test_2.git test_lib</span><br></pre></td></tr></table></figure><ol><li>提交test_1</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd test_1</span><br><span class="line">git add .</span><br><span class="line">git commit -m &apos;2&apos;</span><br><span class="line">git submodule init</span><br><span class="line">git push</span><br></pre></td></tr></table></figure><ol><li>修改test_2</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd test_2</span><br><span class="line">echo &quot;123445&quot; &gt; test.txt</span><br><span class="line">git add .</span><br><span class="line">git commit -m &apos;3&apos;</span><br><span class="line">git push</span><br></pre></td></tr></table></figure><ol><li>在test_1中更新test_2</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd test_2</span><br><span class="line">git submodule foreach git pull</span><br></pre></td></tr></table></figure><ol><li>clone一个带有submodule的repo</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1、clone父repo的时候直接clonesubmodule</span><br><span class="line">git clone git@repo.advai.net:shang.wang/test_1.git ttttt --recursive</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2、clone完父repo之后，再初始化submodule</span><br><span class="line">git clone git@repo.advai.net:shang.wang/test_1.git</span><br><span class="line">cd test_1</span><br><span class="line">git submodule init</span><br><span class="line">git submodule update</span><br></pre></td></tr></table></figure><ol><li>删除submodule</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">cd test_1</span><br><span class="line">git rm --cached test_lib</span><br><span class="line">rm -rf test_lib</span><br><span class="line">rm .gitmodules</span><br><span class="line"></span><br><span class="line">删除git配置文件config中关于submodule的信息</span><br><span class="line">vim .git/config  找到submodule的部分 删掉</span><br><span class="line"></span><br><span class="line">git commit -a -m 'del submodule'</span><br></pre></td></tr></table></figure><ol><li>查看仓库中的submodule</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git submodule</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;简介：&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="工具使用" scheme="https://shang.at/categories/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/"/>
    
    
      <category term="gitlab" scheme="https://shang.at/tags/gitlab/"/>
    
  </entry>
  
  <entry>
    <title>Linux-使用问答</title>
    <link href="https://shang.at/post/Linux-%E4%BD%BF%E7%94%A8%E9%97%AE%E7%AD%94/"/>
    <id>https://shang.at/post/Linux-使用问答/</id>
    <published>2020-09-10T08:12:59.000Z</published>
    <updated>2020-09-10T08:14:14.808Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>简介：</p></blockquote><a id="more"></a><h6 id="什么是Linux"><a href="#什么是Linux" class="headerlink" title="什么是Linux?"></a>什么是Linux?</h6><p>问：什么是Linux?</p><ul><li>答：开源的操作系统，通过代码来引导计算机执行命令</li><li>答：Linux是一套免费使用和自由传播的类Unix操作系统，是一个基于POSIX和Unix的多用户、多任务、支持多线程和多CPU的操作系统。它能运行主要的Unix工具软件、应用程序和网络协议。它支持32位和64位硬件。Linux继承了Unix以网络为核心的设计思想，是一个性能稳定的多用户网络操作系统。</li></ul><h6 id="Unix和Linux有什么区别？"><a href="#Unix和Linux有什么区别？" class="headerlink" title="Unix和Linux有什么区别？"></a>Unix和Linux有什么区别？</h6><p>问：Unix和Linux有什么区别？</p><ul><li>答：Linux和Unix都是功能强大的操作系统，都是应用广泛的服务器操作系统，有很多相似之处，甚至有一部分人错误地认为Unix和Linux操作系统是一样的，然而，事实并非如此，以下是两者的区别。<br>开源性 Linux是一款开源操作系统，不需要付费，即可使用；Unix是一款对源码实行知识产权保护的传统商业软件，使用需要付费授权使用。<br>跨平台性 Linux操作系统具有良好的跨平台性能，可运行在多种硬件平台上；Unix操作系统跨平台性能较弱，大多需与硬件配套使用。<br>可视化界面 Linux除了进行命令行操作，还有窗体管理系统；Unix只是命令行下的系统。<br>硬件环境 Linux操作系统对硬件的要求较低，安装方法更易掌握；Unix对硬件要求比较苛刻，按照难度较大。<br>用户群体 Linux的用户群体很广泛，个人和企业均可使用；Unix的用户群体比较窄，多是安全性要求高的大型企业使用，如银行、电信部门等，或者Unix硬件厂商使用，如Sun等。 相比于Unix操作系统，Linux操作系统更受广大计算机爱好者的喜爱，主要原因是Linux操作系统具有Unix操作系统的全部功能，并且能够在普通PC计算机上实现全部的Unix特性，开源免费的特性，更容易普及使用！</li></ul><h6 id="什么是-Linux-内核？"><a href="#什么是-Linux-内核？" class="headerlink" title="什么是 Linux 内核？"></a>什么是 Linux 内核？</h6><p>问：什么是 Linux 内核？</p><ul><li>答：作用是将应用层序的请求传递给硬件，并充当底层驱动程序，对系统中的各种设备和组件进行寻址。</li><li>答：Linux 系统的核心是内核。内核控制着计算机系统上的所有硬件和软件，在必要时分配硬件，并根据需要执行软件。<br>系统内存管理 应用程序管理 硬件设备管理 文件系统管理</li></ul><h6 id="Linux的基本组件是什么？"><a href="#Linux的基本组件是什么？" class="headerlink" title="Linux的基本组件是什么？"></a>Linux的基本组件是什么？</h6><p>问：Linux的基本组件是什么？</p><ul><li>答：内存管理,进程管理,进程间通信,虚拟文件系统和网络接口</li><li>答：就像任何其他典型的操作系统一样，Linux拥有所有这些组件：内核，shell和GUI，系统实用程序和应用程序。Linux比其他操作系统更具优势的是每个方面都附带其他功能，所有代码都可以免费下载。</li></ul><h6 id="Linux-的体系结构"><a href="#Linux-的体系结构" class="headerlink" title="Linux 的体系结构"></a>Linux 的体系结构</h6><p>问：Linux 的体系结构</p><ul><li>答：从大的方面讲，Linux 体系结构可以分为两块： <img src="https://ucc.alicdn.com/pic/developer-ecology/201ab8b84d2b4d6b82b64373a20d5576.png" alt="image.png"><br>用户空间(User Space) ：用户空间又包括用户的应用程序(User Applications)、C 库(C Library) 。 内核空间(Kernel Space) ：内核空间又包括系统调用接口(System Call Interface)、内核(Kernel)、平台架构相关的代码(Architecture-Dependent Kernel Code) 。</li></ul><h6 id="为什么-Linux-体系结构要分为用户空间和内核空间的原因？"><a href="#为什么-Linux-体系结构要分为用户空间和内核空间的原因？" class="headerlink" title="为什么 Linux 体系结构要分为用户空间和内核空间的原因？"></a>为什么 Linux 体系结构要分为用户空间和内核空间的原因？</h6><p>问：为什么 Linux 体系结构要分为用户空间和内核空间的原因？</p><ul><li>答：1、现代 CPU 实现了不同的工作模式，不同模式下 CPU 可以执行的指令和访问的寄存器不同。 2、Linux 从 CPU 的角度出发，为了保护内核的安全，把系统分成了两部分。 用户空间和内核空间是程序执行的两种不同的状态，我们可以通过两种方式完成用户空间到内核空间的转移：1）系统调用；2）硬件中断。</li></ul><h6 id="BASH和DOS之间的基本区别是什么？"><a href="#BASH和DOS之间的基本区别是什么？" class="headerlink" title="BASH和DOS之间的基本区别是什么？"></a>BASH和DOS之间的基本区别是什么？</h6><p>问：BASH和DOS之间的基本区别是什么？</p><ul><li>答：BASH和DOS控制台之间的主要区别在于3个方面：<br>BASH命令区分大小写，而DOS命令则不区分; 在BASH下，/ character是目录分隔符，\作为转义字符。在DOS下，/用作命令参数分隔符，\是目录分隔符 DOS遵循命名文件中的约定，即8个字符的文件名后跟一个点，扩展名为3个字符。BASH没有遵循这样的惯例。</li></ul><h6 id="Linux-开机启动过程？"><a href="#Linux-开机启动过程？" class="headerlink" title="Linux 开机启动过程？"></a>Linux 开机启动过程？</h6><p>问：Linux 开机启动过程？</p><ul><li>答：1、主机加电自检，加载 BIOS 硬件信息。<br>2、读取 MBR 的引导文件(GRUB、LILO)。<br>3、引导 Linux 内核。<br>4、运行第一个进程 init (进程号永远为 1 )。<br>5、进入相应的运行级别。<br>6、运行终端，输入用户名和密码。</li></ul><h6 id="Linux系统缺省的运行级别？"><a href="#Linux系统缺省的运行级别？" class="headerlink" title="Linux系统缺省的运行级别？"></a>Linux系统缺省的运行级别？</h6><p>问：Linux系统缺省的运行级别？</p><ul><li>答：关机。 单机用户模式。 字符界面的多用户模式(不支持网络)。 字符界面的多用户模式。 未分配使用。 图形界面的多用户模式。 重启。</li></ul><h6 id="Linux-使用的进程间通信方式？"><a href="#Linux-使用的进程间通信方式？" class="headerlink" title="Linux 使用的进程间通信方式？"></a>Linux 使用的进程间通信方式？</h6><p>问：Linux 使用的进程间通信方式？</p><ul><li>答：1、管道(pipe)、流管道(s_pipe)、有名管道(FIFO)。 2、信号(signal) 。 3、消息队列。 4、共享内存。 5、信号量。 6、套接字(socket) 。</li></ul><h6 id="Linux-有哪些系统日志文件？"><a href="#Linux-有哪些系统日志文件？" class="headerlink" title="Linux 有哪些系统日志文件？"></a>Linux 有哪些系统日志文件？</h6><p>问：Linux 有哪些系统日志文件？</p><ul><li>答：比较重要的是 /var/log/messages 日志文件。<br>该日志文件是许多进程日志文件的汇总，从该文件可以看出任何入侵企图或成功的入侵。<br>另外，如果胖友的系统里有 ELK 日志集中收集，它也会被收集进去。</li></ul><h6 id="Linux系统安装多个桌面环境有帮助吗？"><a href="#Linux系统安装多个桌面环境有帮助吗？" class="headerlink" title="Linux系统安装多个桌面环境有帮助吗？"></a>Linux系统安装多个桌面环境有帮助吗？</h6><p>问：Linux系统安装多个桌面环境有帮助吗？</p><ul><li>答：通常，一个桌面环境，如KDE或Gnome，足以在没有问题的情况下运行。尽管系统允许从一个环境切换到另一个环境，但这对用户来说都是优先考虑的问题。有些程序在一个环境中工作而在另一个环境中无法工作，因此它也可以被视为选择使用哪个环境的一个因素。</li></ul><h6 id="什么是交换空间？"><a href="#什么是交换空间？" class="headerlink" title="什么是交换空间？"></a>什么是交换空间？</h6><p>问：什么是交换空间？</p><ul><li>答：交换空间是Linux使用的一定空间，用于临时保存一些并发运行的程序。当RAM没有足够的内存来容纳正在执行的所有程序时，就会发生这种情况。</li></ul><h6 id="什么是root帐户"><a href="#什么是root帐户" class="headerlink" title="什么是root帐户"></a>什么是root帐户</h6><p>问：什么是root帐户</p><ul><li>答：root帐户就像一个系统管理员帐户，允许你完全控制系统。你可以在此处创建和维护用户帐户，为每个帐户分配不同的权限。每次安装Linux时都是默认帐户。</li></ul><h6 id="什么是LILO？"><a href="#什么是LILO？" class="headerlink" title="什么是LILO？"></a>什么是LILO？</h6><p>问：什么是LILO？</p><ul><li>答：LILO是Linux的引导加载程序。它主要用于将Linux操作系统加载到主内存中，以便它可以开始运行。</li></ul><h6 id="什么是BASH？"><a href="#什么是BASH？" class="headerlink" title="什么是BASH？"></a>什么是BASH？</h6><p>问：什么是BASH？</p><ul><li>答：BASH是Bourne Again SHell的缩写。它由Steve Bourne编写，作为原始Bourne Shell（由/ bin / sh表示）的替代品。它结合了原始版本的Bourne Shell的所有功能，以及其他功能，使其更容易使用。从那以后，它已被改编为运行Linux的大多数系统的默认shell。</li></ul><h6 id="什么是CLI？"><a href="#什么是CLI？" class="headerlink" title="什么是CLI？"></a>什么是CLI？</h6><p>问：什么是CLI？</p><ul><li>答：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">命令行界面（英语**：command-line interface**，缩写]：CLI）是在图形用户界面得到普及之前使用最为广泛的用户界面，它通常不支持鼠标，用户通过键盘输入指令，计算机接收到指令后，予以执行。也有人称之为字符用户界面（CUI）。 </span><br><span class="line">通常认为，命令行界面（CLI）没有图形用户界面（GUI）那么方便用户操作。因为，命令行界面的软件通常需要用户记忆操作的命令，但是，由于其本身的特点，命令行界面要较图形用户界面节约计算机系统的资源。在熟记命令的前提下，使用命令行界面往往要较使用图形用户界面的操作速度要快。所以，图形用户界面的操作系统中，都保留着可选的命令行界面。</span><br></pre></td></tr></table></figure><h6 id="什么是GUI？"><a href="#什么是GUI？" class="headerlink" title="什么是GUI？"></a>什么是GUI？</h6><p>问：什么是GUI？</p><ul><li>答：图形用户界面</li><li>答：图形用户界面（Graphical User Interface，简称 GUI，又称图形用户接口）是指采用图形方式显示的计算机操作用户界面。<br>图形用户界面是一种人与计算机通信的界面显示格式，允许用户使用鼠标等输入设备操纵屏幕上的图标或菜单选项，以选择命令、调用文件、启动程序或执行其它一些日常任务。与通过键盘输入文本或字符命令来完成例行任务的字符界面相比，图形用户界面有许多优点。</li></ul><h6 id="开源的优势是什么？"><a href="#开源的优势是什么？" class="headerlink" title="开源的优势是什么？"></a>开源的优势是什么？</h6><p>问：开源的优势是什么？</p><ul><li>答：节省人力资源成本，同时有利于软件完善</li><li>答：开源允许你将软件（包括源代码）免费分发给任何感兴趣的人。然后，人们可以添加功能，甚至可以调试和更正源代码中的错误。它们甚至可以让它运行得更好，然后再次自由地重新分配这些增强的源代码。这最终使社区中的每个人受益。</li></ul><h6 id="GNU项目的重要性是什么？"><a href="#GNU项目的重要性是什么？" class="headerlink" title="GNU项目的重要性是什么？"></a>GNU项目的重要性是什么？</h6><p>问：GNU项目的重要性是什么？</p><ul><li>答：这种所谓的自由软件运动具有多种优势，例如可以自由地运行程序以及根据你的需要自由学习和修改程序。它还允许你将软件副本重新分发给其他人，以及自由改进软件并将其发布给公众。</li></ul><h6 id="简单-Linux-文件系统？"><a href="#简单-Linux-文件系统？" class="headerlink" title="简单 Linux 文件系统？"></a>简单 Linux 文件系统？</h6><p>问：简单 Linux 文件系统？</p><ul><li>答：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">在 Linux 操作系统中，所有被操作系统管理的资源，例如网络接口卡、磁盘驱动器、打印机、输入输出设备、普通文件或是目录都被看作是一个文件。 </span><br><span class="line">也就是说在 Linux 系统中有一个重要的概念**：一切都是文件**。其实这是 Unix 哲学的一个体现，而 Linux 是重写 Unix 而来，所以这个概念也就传承了下来。在 Unix 系统中，把一切资源都看作是文件，包括硬件设备。UNIX系统把每个硬件都看成是一个文件，通常称为设备文件，这样用户就可以用读写文件的方式实现对硬件的访问。 </span><br><span class="line">Linux 支持 5 种文件类型，如下图所示： &lt;img src=&quot;https://ucc.alicdn.com/pic/developer-ecology/0e49bde8ba7249c2abbbe3a031b6a947.png&quot; alt=&quot;image.png&quot; /&gt;</span><br></pre></td></tr></table></figure><h6 id="Linux-的目录结构是怎样的？"><a href="#Linux-的目录结构是怎样的？" class="headerlink" title="Linux 的目录结构是怎样的？"></a>Linux 的目录结构是怎样的？</h6><p>问：Linux 的目录结构是怎样的？</p><ul><li>答：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Linux 文件系统的结构层次鲜明，就像一棵倒立的树，最顶层是其根目录： &lt;img src=&quot;https://ucc.alicdn.com/pic/developer-ecology/61224ab457b144b08f514f6a720cc597.png&quot; alt=&quot;image.png&quot; /&gt; 常见目录说明： </span><br><span class="line">/bin： 存放二进制可执行文件(ls,cat,mkdir等)，常用命令一般都在这里； /etc： 存放系统管理和配置文件； /home： 存放所有用户文件的根目录，是用户主目录的基点，比如用户user的主目录就是/home/user，可以用~user表示； **/usr **： 用于存放系统应用程序； /opt： 额外安装的可选应用程序包所放置的位置。一般情况下，我们可以把tomcat等都安装到这里； /proc： 虚拟文件系统目录，是系统内存的映射。可直接访问这个目录来获取系统信息； /root： 超级用户（系统管理员）的主目录（特权阶级o）； /sbin: 存放二进制可执行文件，只有root才能访问。这里存放的是系统管理员使用的系统级别的管理命令和程序。如ifconfig等； /dev： 用于存放设备文件； /mnt： 系统管理员安装临时文件系统的安装点，系统提供这个目录是让用户临时挂载其他的文件系统； /boot： 存放用于系统引导时使用的各种文件； **/lib **： 存放着和系统运行相关的库文件 ； /tmp： 用于存放各种临时文件，是公用的临时文件存储点； /var： 用于存放运行时需要改变数据的文件，也是某些大文件的溢出区，比方说各种服务的日志文件（系统启动日志等。）等； /lost+found： 这个目录平时是空的，系统非正常关机而留下“无家可归”的文件（windows下叫什么.chk）就在这里。</span><br></pre></td></tr></table></figure><h6 id="什么是-inode-？"><a href="#什么是-inode-？" class="headerlink" title="什么是 inode ？"></a>什么是 inode ？</h6><p>问：什么是 inode ？</p><ul><li>答：理解inode，要从文件储存说起。<br>文件储存在硬盘上，硬盘的最小存储单位叫做”扇区”（Sector）。每个扇区储存512字节（相当于0.5KB）。<br>操作系统读取硬盘的时候，不会一个个扇区地读取，这样效率太低，而是一次性连续读取多个扇区，即一次性读取一个”块”（block）。这种由多个扇区组成的”块”，是文件存取的最小单位。”块”的大小，最常见的是4KB，即连续八个 sector组成一个 block。<br>文件数据都储存在”块”中，那么很显然，我们还必须找到一个地方储存文件的元信息，比如文件的创建者、文件的创建日期、文件的大小等等。这种储存文件元信息的区域就叫做inode，中文译名为”索引节点”。<br>每一个文件都有对应的inode，里面包含了与该文件有关的一些信息。</li></ul><h6 id="简述-Linux-文件系统通过-i-节点把文件的逻辑结构和物理结构转换的工作过程？"><a href="#简述-Linux-文件系统通过-i-节点把文件的逻辑结构和物理结构转换的工作过程？" class="headerlink" title="简述 Linux 文件系统通过 i 节点把文件的逻辑结构和物理结构转换的工作过程？"></a>简述 Linux 文件系统通过 i 节点把文件的逻辑结构和物理结构转换的工作过程？</h6><p>问：简述 Linux 文件系统通过 i 节点把文件的逻辑结构和物理结构转换的工作过程？</p><ul><li>答：Linux 通过 inode 节点表将文件的逻辑结构和物理结构进行转换。<br>inode 节点是一个 64 字节长的表，表中包含了文件的相关信息，其中有文件的大小、文件所有者、文件的存取许可方式以及文件的类型等重要信息。在 inode 节点表中最重要的内容是磁盘地址表。在磁盘地址表中有 13 个块号，文件将以块号在磁盘地址表中出现的顺序依次读取相应的块。 Linux 文件系统通过把 inode 节点和文件名进行连接，当需要读取该文件时，文件系统在当前目录表中查找该文件名对应的项，由此得到该文件相对应的 inode 节点号，通过该 inode 节点的磁盘地址表把分散存放的文件物理块连接成文件的逻辑结构。</li></ul><h6 id="什么是硬链接和软链接？"><a href="#什么是硬链接和软链接？" class="headerlink" title="什么是硬链接和软链接？"></a>什么是硬链接和软链接？</h6><p>问：什么是硬链接和软链接？</p><ul><li>答：1）硬链接<br>由于 Linux 下的文件是通过索引节点(inode)来识别文件，硬链接可以认为是一个指针，指向文件索引节点的指针，系统并不为它重新分配 inode 。每添加一个一个硬链接，文件的链接数就加 1 。<br>不足：1）不可以在不同文件系统的文件间建立链接；2）只有超级用户才可以为目录创建硬链接。 2）软链接<br>软链接克服了硬链接的不足，没有任何文件系统的限制，任何用户可以创建指向目录的符号链接。因而现在更为广泛使用，它具有更大的灵活性，甚至可以跨越不同机器、不同网络对文件进行链接。<br>不足：因为链接文件包含有原文件的路径信息，所以当原文件从一个目录下移到其他目录中，再访问链接文件，系统就找不到了，而硬链接就没有这个缺陷，你想怎么移就怎么移；还有它要系统分配额外的空间用于建立新的索引节点和保存原文件的路径。 实际场景下，基本是使用软链接。总结区别如下：<br>硬链接不可以跨分区，软件链可以跨分区。 硬链接指向一个 inode 节点，而软链接则是创建一个新的 inode 节点。 删除硬链接文件，不会删除原文件，删除软链接文件，会把原文件删除。</li></ul><h6 id="RAID-是什么"><a href="#RAID-是什么" class="headerlink" title="RAID 是什么?"></a>RAID 是什么?</h6><p>问：RAID 是什么?</p><ul><li>答：RAID 全称为独立磁盘冗余阵列(Redundant Array of Independent Disks)，基本思想就是把多个相对便宜的硬盘组合起来，成为一个硬盘阵列组，使性能达到甚至超过一个价格昂贵、 容量巨大的硬盘。RAID 通常被用在服务器电脑上，使用完全相同的硬盘组成一个逻辑扇区，因此操作系统只会把它当做一个硬盘。<br>RAID 分为不同的等级，各个不同的等级均在数据可靠性及读写性能上做了不同的权衡。在实际应用中，可以依据自己的实际需求选择不同的 RAID 方案。 当然，因为很多公司都使用云服务，大家很难接触到 RAID 这个概念，更多的可能是普通云盘、SSD 云盘酱紫的概念。</li></ul><h6 id="一台-Linux-系统初始化环境后需要做一些什么安全工作？"><a href="#一台-Linux-系统初始化环境后需要做一些什么安全工作？" class="headerlink" title="一台 Linux 系统初始化环境后需要做一些什么安全工作？"></a>一台 Linux 系统初始化环境后需要做一些什么安全工作？</h6><p>问：一台 Linux 系统初始化环境后需要做一些什么安全工作？</p><ul><li>答：1、添加普通用户登陆，禁止 root 用户登陆，更改 SSH 端口号。<br>修改 SSH 端口不一定绝对哈。当然，如果要暴露在外网，建议改下。l<br>2、服务器使用密钥登陆，禁止密码登陆。<br>3、开启防火墙，关闭 SElinux ，根据业务需求设置相应的防火墙规则。<br>4、装 fail2ban 这种防止 SSH 暴力破击的软件。<br>5、设置只允许公司办公网出口 IP 能登陆服务器(看公司实际需要)<br>也可以安装 VPN 等软件，只允许连接 VPN 到服务器上。<br>6、修改历史命令记录的条数为 10 条。<br>7、只允许有需要的服务器可以访问外网，其它全部禁止。<br>8、做好软件层面的防护。<br>8.1 设置 nginx_waf 模块防止 SQL 注入。 8.2 把 Web 服务使用 www 用户启动，更改网站目录的所有者和所属组为 www 。</li></ul><h6 id="什么叫-CC-攻击？什么叫-DDOS-攻击？"><a href="#什么叫-CC-攻击？什么叫-DDOS-攻击？" class="headerlink" title="什么叫 CC 攻击？什么叫 DDOS 攻击？"></a>什么叫 CC 攻击？什么叫 DDOS 攻击？</h6><p>问：什么叫 CC 攻击？什么叫 DDOS 攻击？</p><ul><li>答：ddos攻击又叫分布式拒绝服务攻击，可以使很多的计算机在同一时间遭受到攻击，使攻击的目标无法正常使用，分布式拒绝服务攻击已经出现了很多次，导致很多的大型网站都出现了无法进行操作的情况。 cc攻击在广泛定义上也属于ddos一种，cc攻击指的是攻击者控制某些主机不停地发大量数据包给对方服务器造成服务器资源耗尽，一直到宕机崩溃。</li><li>答：CC 攻击，主要是用来攻击页面的，模拟多个用户不停的对你的页面进行访问，从而使你的系统资源消耗殆尽。<br>DDOS 攻击，中文名叫分布式拒绝服务攻击，指借助服务器技术将多个计算机联合起来作为攻击平台，来对一个或多个目标发动 DDOS 攻击。<br>攻击，即是通过大量合法的请求占用大量网络资源，以达到瘫痪网络的目的。</li></ul><h6 id="怎么预防-CC-攻击和-DDOS-攻击？"><a href="#怎么预防-CC-攻击和-DDOS-攻击？" class="headerlink" title="怎么预防 CC 攻击和 DDOS 攻击？"></a>怎么预防 CC 攻击和 DDOS 攻击？</h6><p>问：怎么预防 CC 攻击和 DDOS 攻击？</p><ul><li>答：防cc和ddos一般都是采用高防服务器或者云盾，游戏盾和web盾、高防服务器需要可以联系我，ddos无上限，cc事百分百防御，一旦被攻破都会赔偿。</li><li>答：防 CC、DDOS 攻击，这些只能是用硬件防火墙做流量清洗，将攻击流量引入黑洞。<br>流量清洗这一块，主要是买 ISP 服务商的防攻击的服务就可以，机房一般有空余流量，我们一般是买服务，毕竟攻击不会是持续长时间。</li></ul><h6 id="什么是网站数据库注入？"><a href="#什么是网站数据库注入？" class="headerlink" title="什么是网站数据库注入？"></a>什么是网站数据库注入？</h6><p>问：什么是网站数据库注入？</p><ul><li>答：由于程序员的水平及经验参差不齐，大部分程序员在编写代码的时候，没有对用户输入数据的合法性进行判断。 应用程序存在安全隐患。用户可以提交一段数据库查询代码，根据程序返回的结果，获得某些他想得知的数据，这就是所谓的 SQL 注入。 SQL注入，是从正常的 WWW 端口访问，而且表面看起来跟一般的 Web 页面访问没什么区别，如果管理员没查看日志的习惯，可能被入侵很长时间都不会发觉。 如何过滤与预防？<br>数据库网页端注入这种，可以考虑使用 nginx_waf 做过滤与预防。</li></ul><h6 id="Shell-脚本是什么？"><a href="#Shell-脚本是什么？" class="headerlink" title="Shell 脚本是什么？"></a>Shell 脚本是什么？</h6><p>问：Shell 脚本是什么？</p><ul><li>答：一个 Shell 脚本是一个文本文件，包含一个或多个命令。作为系统管理员，我们经常需要使用多个命令来完成一项任务，我们可以添加这些所有命令在一个文本文件(Shell 脚本)来完成这些日常工作任务。</li></ul><h6 id="什么是默认登录-Shell-？"><a href="#什么是默认登录-Shell-？" class="headerlink" title="什么是默认登录 Shell ？"></a>什么是默认登录 Shell ？</h6><p>问：什么是默认登录 Shell ？</p><ul><li>答：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">在 Linux 操作系统，&quot;/bin/bash&quot; 是默认登录 Shell，是在创建用户时分配的。 </span><br><span class="line">使用 chsh 命令可以改变默认的 Shell 。示例如下所示： </span><br><span class="line">chsh &lt;用户名&gt; -s &lt;新shell&gt; </span><br><span class="line">chsh ThinkWon -s /bin/sh </span><br><span class="line">1 2 在 Shell 脚本中，如何写入注释？ </span><br><span class="line">注释可以用来描述一个脚本可以做什么和它是如何工作的。每一行注释以 # 开头。例子如下： </span><br><span class="line">#!/bin/bash </span><br><span class="line">This is a command </span><br><span class="line">echo “I am logged in as $USER”</span><br></pre></td></tr></table></figure><h6 id="可以在-Shell-脚本中使用哪些类型的变量？"><a href="#可以在-Shell-脚本中使用哪些类型的变量？" class="headerlink" title="可以在 Shell 脚本中使用哪些类型的变量？"></a>可以在 Shell 脚本中使用哪些类型的变量？</h6><p>问：可以在 Shell 脚本中使用哪些类型的变量？</p><ul><li>答：在 Shell 脚本，我们可以使用两种类型的变量：<br>系统定义变量<br>系统变量是由系统系统自己创建的。这些变量通常由大写字母组成，可以通过 set 命令查看。<br>用户定义变量<br>用户变量由系统用户来生成和定义，变量的值可以通过命令 “echo $&lt;变量名&gt;” 查看。</li></ul><h6 id="Shell脚本中-标记的用途是什么？"><a href="#Shell脚本中-标记的用途是什么？" class="headerlink" title="Shell脚本中 $? 标记的用途是什么？"></a>Shell脚本中 $? 标记的用途是什么？</h6><p>问：Shell脚本中 $? 标记的用途是什么？</p><ul><li>答：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">在写一个 Shell 脚本时，如果你想要检查前一命令是否执行成功，在 if 条件中使用 $? 可以来检查前一命令的结束状态。 </span><br><span class="line">如果结束状态是 0 ，说明前一个命令执行成功。例如： </span><br><span class="line">root@localhost:~## ls /usr/bin/shar /usr/bin/shar root@localhost:~## echo $? 0 1 2 3 4 如果结束状态不是0，说明命令执行失败。例如： </span><br><span class="line">root@localhost:~## ls /usr/bin/share ls: cannot access /usr/bin/share: No such file or directory root@localhost:~## echo $? 2</span><br></pre></td></tr></table></figure><h6 id="Bourne-Shell-bash-中有哪些特殊的变量？"><a href="#Bourne-Shell-bash-中有哪些特殊的变量？" class="headerlink" title="Bourne Shell(bash) 中有哪些特殊的变量？"></a>Bourne Shell(bash) 中有哪些特殊的变量？</h6><p>问：Bourne Shell(bash) 中有哪些特殊的变量？</p><ul><li>答：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">下面的表列出了 Bourne Shell 为命令行设置的特殊变量。 </span><br><span class="line">内建变量 解释 $0 命令行中的脚本名字 $1 第一个命令行参数 $2 第二个命令行参数 ….. ……. $9 第九个命令行参数 $## 命令行参数的数量 $* 所有命令行参数，以空格隔开</span><br></pre></td></tr></table></figure><h6 id="如何取消变量或取消变量赋值？"><a href="#如何取消变量或取消变量赋值？" class="headerlink" title="如何取消变量或取消变量赋值？"></a>如何取消变量或取消变量赋值？</h6><p>问：如何取消变量或取消变量赋值？</p><ul><li>答：unset 命令用于取消变量或取消变量赋值。语法如下所示：<br>unset &lt;变量名&gt;</li></ul><h6 id="Shell-脚本中-if-语法如何嵌套"><a href="#Shell-脚本中-if-语法如何嵌套" class="headerlink" title="Shell 脚本中 if 语法如何嵌套?"></a>Shell 脚本中 if 语法如何嵌套?</h6><p>问：Shell 脚本中 if 语法如何嵌套?</p><ul><li>答：if [ 条件 ] then 命令1 命令2 ….. else if [ 条件 ] then 命令1 命令2 …. else 命令1 命令2 ….. fi fi</li></ul><h6 id="在-Shell-脚本中如何比较两个数字？"><a href="#在-Shell-脚本中如何比较两个数字？" class="headerlink" title="在 Shell 脚本中如何比较两个数字？"></a>在 Shell 脚本中如何比较两个数字？</h6><p>问：在 Shell 脚本中如何比较两个数字？</p><ul><li>答：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">在 if-then 中使用测试命令（ -gt 等）来比较两个数字。例如： </span><br><span class="line">#!/bin/bash x=10 y=20 if [ $x -gt $y ] then echo “x is greater than y” else echo “y is greater than x” fi</span><br></pre></td></tr></table></figure><h6 id="Shell-脚本中-case-语句的语法"><a href="#Shell-脚本中-case-语句的语法" class="headerlink" title="Shell 脚本中 case 语句的语法?"></a>Shell 脚本中 case 语句的语法?</h6><p>问：Shell 脚本中 case 语句的语法?</p><ul><li>答：基础语法如下：<br>case 变量 in 值1) 命令1 命令2 ….. 最后命令 !! 值2) 命令1 命令2 …… 最后命令 ;; esac</li></ul><h6 id="Shell-脚本中-for-循环语法？"><a href="#Shell-脚本中-for-循环语法？" class="headerlink" title="Shell 脚本中 for 循环语法？"></a>Shell 脚本中 for 循环语法？</h6><p>问：Shell 脚本中 for 循环语法？</p><ul><li>答：for 变量 in 循环列表 do 命令1 命令2 …. 最后命令 done</li></ul><h6 id="Shell-脚本中-while-循环语法？"><a href="#Shell-脚本中-while-循环语法？" class="headerlink" title="Shell 脚本中 while 循环语法？"></a>Shell 脚本中 while 循环语法？</h6><p>问：Shell 脚本中 while 循环语法？</p><ul><li>答：如同 for 循环，while 循环只要条件成立就重复它的命令块。 不同于 for循环，while 循环会不断迭代，直到它的条件不为真。<br>基础语法：<br>while [ 条件 ] do 命令… done</li></ul><h6 id="do-while-语句的基本格式？"><a href="#do-while-语句的基本格式？" class="headerlink" title="do-while 语句的基本格式？"></a>do-while 语句的基本格式？</h6><p>问：do-while 语句的基本格式？</p><ul><li>答：do-while 语句类似于 while 语句，但检查条件语句之前先执行命令（LCTT 译注：意即至少执行一次。）。下面是用 do-while 语句的语法：<br>do { 命令 } while (条件)</li></ul><h6 id="Shell-脚本中-break-命令的作用？"><a href="#Shell-脚本中-break-命令的作用？" class="headerlink" title="Shell 脚本中 break 命令的作用？"></a>Shell 脚本中 break 命令的作用？</h6><p>问：Shell 脚本中 break 命令的作用？</p><ul><li>答：break 命令一个简单的用途是退出执行中的循环。我们可以在 while 和 until 循环中使用 break 命令跳出循环。</li></ul><h6 id="Shell-脚本中-continue-命令的作用？"><a href="#Shell-脚本中-continue-命令的作用？" class="headerlink" title="Shell 脚本中 continue 命令的作用？"></a>Shell 脚本中 continue 命令的作用？</h6><p>问：Shell 脚本中 continue 命令的作用？</p><ul><li>答：continue 命令不同于 break 命令，它只跳出当前循环的迭代，而不是整个循环。continue 命令很多时候是很有用的，例如错误发生，但我们依然希望继续执行大循环的时候。</li></ul><h6 id="如何使脚本可执行"><a href="#如何使脚本可执行" class="headerlink" title="如何使脚本可执行?"></a>如何使脚本可执行?</h6><p>问：如何使脚本可执行?</p><ul><li>答：使用 chmod 命令来使脚本可执行。例子如下：chmod a+x myscript.sh 。</li></ul><h6 id="bin-bash-的作用？"><a href="#bin-bash-的作用？" class="headerlink" title="#!/bin/bash 的作用？"></a>#!/bin/bash 的作用？</h6><p>问：#!/bin/bash 的作用？</p><ul><li>答：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash 是 Shell 脚本的第一行，称为释伴（shebang）行。 </span><br><span class="line">这里 # 符号叫做 hash ，而 ! 叫做 bang。 它的意思是命令通过 /bin/bash 来执行。</span><br></pre></td></tr></table></figure><h6 id="如何调试-Shell脚本？"><a href="#如何调试-Shell脚本？" class="headerlink" title="如何调试 Shell脚本？"></a>如何调试 Shell脚本？</h6><p>问：如何调试 Shell脚本？</p><ul><li>答：使用 -x’ 数（sh -x myscript.sh）可以调试 Shell脚本。 另一个种方法是使用 -nv 参数(sh -nv myscript.sh)。</li></ul><h6 id="如何将标准输出和错误输出同时重定向到同一位置"><a href="#如何将标准输出和错误输出同时重定向到同一位置" class="headerlink" title="如何将标准输出和错误输出同时重定向到同一位置?"></a>如何将标准输出和错误输出同时重定向到同一位置?</h6><p>问：如何将标准输出和错误输出同时重定向到同一位置?</p><ul><li>答：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">方法一：2&gt;&amp;1 (如## ls /usr/share/doc &gt; out.txt 2&gt;&amp;1 ) 。 方法二：&amp;&gt; (如## ls /usr/share/doc &amp;&gt; out.txt ) 。</span><br></pre></td></tr></table></figure><h6 id="在-Shell-脚本中，如何测试文件？"><a href="#在-Shell-脚本中，如何测试文件？" class="headerlink" title="在 Shell 脚本中，如何测试文件？"></a>在 Shell 脚本中，如何测试文件？</h6><p>问：在 Shell 脚本中，如何测试文件？</p><ul><li>答：test 命令可以用来测试文件。基础用法如下表格：<br>Test 用法 -d 文件名 如果文件存在并且是目录，返回true -e 文件名 如果文件存在，返回true -f 文件名 如果文件存在并且是普通文件，返回true -r 文件名 如果文件存在并可读，返回true -s 文件名 如果文件存在并且不为空，返回true -w 文件名 如果文件存在并可写，返回true -x 文件名 如果文件存在并可执行，返回true</li></ul><h6 id="在-Shell-脚本如何定义函数呢？"><a href="#在-Shell-脚本如何定义函数呢？" class="headerlink" title="在 Shell 脚本如何定义函数呢？"></a>在 Shell 脚本如何定义函数呢？</h6><p>问：在 Shell 脚本如何定义函数呢？</p><ul><li>答：函数是拥有名字的代码块。当我们定义代码块，我们就可以在我们的脚本调用函数名字，该块就会被执行。示例如下所示：<br>$ diskusage () { df -h ; } 译注：下面是我给的shell函数语法，原文没有 [ function ] 函数名 [()] { 命令; [return int;] }</li></ul><h6 id="如何让-Shell-就脚本得到来自终端的输入"><a href="#如何让-Shell-就脚本得到来自终端的输入" class="headerlink" title="如何让 Shell 就脚本得到来自终端的输入?"></a>如何让 Shell 就脚本得到来自终端的输入?</h6><p>问：如何让 Shell 就脚本得到来自终端的输入?</p><ul><li>答：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">read 命令可以读取来自终端（使用键盘）的数据。read 命令得到用户的输入并置于你给出的变量中。例子如下： </span><br><span class="line">vi /tmp/test.sh </span><br><span class="line">#!/bin/bash echo ‘Please enter your name’ read name echo “My Name is $name” </span><br><span class="line">./test.sh </span><br><span class="line">Please enter your name ThinkWon My Name is ThinkWon</span><br></pre></td></tr></table></figure><h6 id="如何执行算术运算？"><a href="#如何执行算术运算？" class="headerlink" title="如何执行算术运算？"></a>如何执行算术运算？</h6><p>问：如何执行算术运算？</p><ul><li>答：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">有两种方法来执行算术运算： </span><br><span class="line">1、使用 expr 命令：## expr 5 + 2 。 2、用一个美元符号和方括号（$[ 表达式 ]）：test=$[16 + 4] ; test=$[16 + 4] 。</span><br></pre></td></tr></table></figure><h6 id="判断一文件是不是字符设备文件，如果是将其拷贝到-dev-目录下？"><a href="#判断一文件是不是字符设备文件，如果是将其拷贝到-dev-目录下？" class="headerlink" title="判断一文件是不是字符设备文件，如果是将其拷贝到 /dev 目录下？"></a>判断一文件是不是字符设备文件，如果是将其拷贝到 /dev 目录下？</h6><p>问：判断一文件是不是字符设备文件，如果是将其拷贝到 /dev 目录下？</p><ul><li>答：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash read -p &quot;Input file name: &quot; FILENAME if [ -c &quot;$FILENAME&quot; ];then 　　cp $FILENAME /dev fi</span><br></pre></td></tr></table></figure><h6 id="添加一个新组为-class1-，然后添加属于这个组的-30-个用户，用户名的形式为-stdxx-，其"><a href="#添加一个新组为-class1-，然后添加属于这个组的-30-个用户，用户名的形式为-stdxx-，其" class="headerlink" title="添加一个新组为 class1 ，然后添加属于这个组的 30 个用户，用户名的形式为 stdxx ，其"></a>添加一个新组为 class1 ，然后添加属于这个组的 30 个用户，用户名的形式为 stdxx ，其</h6><p>问：添加一个新组为 class1 ，然后添加属于这个组的 30 个用户，用户名的形式为 stdxx ，其中 xx 从 01 到 30 ？</p><ul><li>答：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash groupadd class1 for((i=1;i&lt;31;i++)) do if [ $i -le 10 ];then useradd -g class1 std0$i else useradd -g class1 std$i fi done</span><br></pre></td></tr></table></figure><h6 id="编写-Shell-程序，实现自动删除-50-个账号的功能，账号名为stud1-至-stud50-？"><a href="#编写-Shell-程序，实现自动删除-50-个账号的功能，账号名为stud1-至-stud50-？" class="headerlink" title="编写 Shell 程序，实现自动删除 50 个账号的功能，账号名为stud1 至 stud50 ？"></a>编写 Shell 程序，实现自动删除 50 个账号的功能，账号名为stud1 至 stud50 ？</h6><p>问：编写 Shell 程序，实现自动删除 50 个账号的功能，账号名为stud1 至 stud50 ？</p><ul><li>答：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">for((i=1;i&lt;51;i++))</span><br><span class="line">do</span><br><span class="line">                userdel -r stud$i</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h6 id="写一个-sed-命令，修改-tmp-input-txt-文件的内容？"><a href="#写一个-sed-命令，修改-tmp-input-txt-文件的内容？" class="headerlink" title="写一个 sed 命令，修改 /tmp/input.txt 文件的内容？"></a>写一个 sed 命令，修改 /tmp/input.txt 文件的内容？</h6><p>问：写一个 sed 命令，修改 /tmp/input.txt 文件的内容？ 要求：<br>删除所有空行。 一行中，如果包含 “11111”，则在 “11111” 前面插入 “AAA”，在 “11111” 后面插入 “BBB” 。比如：将内容为 0000111112222 的一行改为 0000AAA11111BBB2222 。</p><ul><li>答：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">[root@~]## cat -n /tmp/input.txt</span><br><span class="line">     1  000011111222</span><br><span class="line">     2</span><br><span class="line">     3  000011111222222</span><br><span class="line">     4  11111000000222</span><br><span class="line">     5</span><br><span class="line">     6</span><br><span class="line">     7  111111111111122222222222</span><br><span class="line">     8  2211111111</span><br><span class="line">     9  112222222</span><br><span class="line">    10  1122</span><br><span class="line">    11</span><br><span class="line"></span><br><span class="line">## 删除所有空行命令</span><br><span class="line">[root@~]## sed &apos;/^$/d&apos; /tmp/input.txt</span><br><span class="line">000011111222</span><br><span class="line">000011111222222</span><br><span class="line">11111000000222</span><br><span class="line">111111111111122222222222</span><br><span class="line">2211111111</span><br><span class="line">112222222</span><br><span class="line">1122</span><br><span class="line"></span><br><span class="line">## 插入指定的字符</span><br><span class="line">[root@~]## sed &apos;s#\(11111\)#AAA\1BBB#g&apos; /tmp/input.txt</span><br><span class="line">0000AAA11111BBB222</span><br><span class="line">0000AAA11111BBB222222</span><br><span class="line">AAA11111BBB000000222</span><br><span class="line">AAA11111BBBAAA11111BBB11122222222222</span><br><span class="line">22AAA11111BBB111</span><br><span class="line">112222222</span><br><span class="line">1122</span><br></pre></td></tr></table></figure><h6 id="如何选择-Linux-操作系统版本"><a href="#如何选择-Linux-操作系统版本" class="headerlink" title="如何选择 Linux 操作系统版本?"></a>如何选择 Linux 操作系统版本?</h6><p>问：如何选择 Linux 操作系统版本?</p><ul><li>答：一般来讲，桌面用户首选 Ubuntu ；服务器首选 RHEL 或 CentOS ，两者中首选 CentOS 。<br>根据具体要求：<br>安全性要求较高，则选择 Debian 或者 FreeBSD 。<br>需要使用数据库高级服务和电子邮件网络应用的用户可以选择 SUSE 。<br>想要新技术新功能可以选择 Feddora ，Feddora 是 RHEL 和 CentOS 的一个测试版和预发布版本。<br>【重点】根据现有状况，绝大多数互联网公司选择 CentOS 。现在比较常用的是 6 系列，现在市场占有大概一半左右。另外的原因是 CentOS 更侧重服务器领域，并且无版权约束。<br>CentOS 7 系列，也慢慢使用的会比较多了。</li></ul><h6 id="如何规划一台-Linux-主机，步骤是怎样？"><a href="#如何规划一台-Linux-主机，步骤是怎样？" class="headerlink" title="如何规划一台 Linux 主机，步骤是怎样？"></a>如何规划一台 Linux 主机，步骤是怎样？</h6><p>问：如何规划一台 Linux 主机，步骤是怎样？</p><ul><li>答：1、确定机器是做什么用的，比如是做 WEB 、DB、还是游戏服务器。<br>不同的用途，机器的配置会有所不同。<br>2、确定好之后，就要定系统需要怎么安装，默认安装哪些系统、分区怎么做。<br>3、需要优化系统的哪些参数，需要创建哪些用户等等的。</li></ul><h6 id="有哪些方面的因素会导致网站网站访问慢？"><a href="#有哪些方面的因素会导致网站网站访问慢？" class="headerlink" title="有哪些方面的因素会导致网站网站访问慢？"></a>有哪些方面的因素会导致网站网站访问慢？</h6><p>问：有哪些方面的因素会导致网站网站访问慢？</p><ul><li>答：1、服务器出口带宽不够用<br>本身服务器购买的出口带宽比较小。一旦并发量大的话，就会造成分给每个用户的出口带宽就小，访问速度自然就会慢。 跨运营商网络导致带宽缩减。例如，公司网站放在电信的网络上，那么客户这边对接是长城宽带或联通，这也可能导致带宽的缩减。 2、服务器负载过大，导致响应不过来<br>可以从两个方面入手分析：<br>分析系统负载，使用 w 命令或者 uptime 命令查看系统负载。如果负载很高，则使用 top 命令查看 CPU ，MEM 等占用情况，要么是 CPU 繁忙，要么是内存不够。 如果这二者都正常，再去使用 sar 命令分析网卡流量，分析是不是遭到了攻击。一旦分析出问题的原因，采取对应的措施解决，如决定要不要杀死一些进程，或者禁止一些访问等。 3、数据库瓶颈<br>如果慢查询比较多。那么就要开发人员或 DBA 协助进行 SQL 语句的优化。 如果数据库响应慢，考虑可以加一个数据库缓存，如 Redis 等。然后，也可以搭建 MySQL 主从，一台 MySQL 服务器负责写，其他几台从数据库负责读。 4、网站开发代码没有优化好<br>例如 SQL 语句没有优化，导致数据库读写相当耗时。</li></ul><h6 id="针对网站访问慢，怎么去排查？"><a href="#针对网站访问慢，怎么去排查？" class="headerlink" title="针对网站访问慢，怎么去排查？"></a>针对网站访问慢，怎么去排查？</h6><p>问：针对网站访问慢，怎么去排查？</p><ul><li>答：1、首先要确定是用户端还是服务端的问题。当接到用户反馈访问慢，那边自己立即访问网站看看，如果自己这边访问快，基本断定是用户端问题，就需要耐心跟客户解释，协助客户解决问题。<br>不要上来就看服务端的问题。一定要从源头开始，逐步逐步往下。<br>2、如果访问也慢，那么可以利用浏览器的调试功能，看看加载那一项数据消耗时间过多，是图片加载慢，还是某些数据加载慢。<br>3、针对服务器负载情况。查看服务器硬件(网络、CPU、内存)的消耗情况。如果是购买的云主机，比如阿里云，可以登录阿里云平台提供各方面的监控，比如 CPU、内存、带宽的使用情况。<br>4、如果发现硬件资源消耗都不高，那么就需要通过查日志，比如看看 MySQL慢查询的日志，看看是不是某条 SQL 语句查询慢，导致网站访问慢。</li></ul><h6 id="针对网站访问慢，怎么去解决？"><a href="#针对网站访问慢，怎么去解决？" class="headerlink" title="针对网站访问慢，怎么去解决？"></a>针对网站访问慢，怎么去解决？</h6><p>问：针对网站访问慢，怎么去解决？</p><ul><li>答：1、如果是出口带宽问题，那么久申请加大出口带宽。 2、如果慢查询比较多，那么就要开发人员或 DBA 协助进行 SQL 语句的优化。 3、如果数据库响应慢，考虑可以加一个数据库缓存，如 Redis 等等。然后也可以搭建MySQL 主从，一台 MySQL 服务器负责写，其他几台从数据库负责读。 4、申请购买 CDN 服务，加载用户的访问。 5、如果访问还比较慢，那就需要从整体架构上进行优化咯。做到专角色专用，多台服务器提供同一个服务。</li></ul><h6 id="Linux-性能调优都有哪几种方法？"><a href="#Linux-性能调优都有哪几种方法？" class="headerlink" title="Linux 性能调优都有哪几种方法？"></a>Linux 性能调优都有哪几种方法？</h6><p>问：Linux 性能调优都有哪几种方法？</p><ul><li>答：1、Disabling daemons (关闭 daemons)。 2、Shutting down the GUI (关闭 GUI)。 3、Changing kernel parameters (改变内核参数)。 4、Kernel parameters (内核参数)。 5、Tuning the processor subsystem (处理器子系统调优)。 6、Tuning the memory subsystem (内存子系统调优)。 7、Tuning the file system (文件系统子系统调优)。 8、Tuning the network subsystem（网络子系统调优)。</li></ul><h6 id="cat-命令"><a href="#cat-命令" class="headerlink" title="cat 命令"></a>cat 命令</h6><p>问：cat 命令</p><ul><li>答：cat命令主要用来查看文件内容，创建文件，文件合并，追加文件内容等功能。<br>eg:<br>1、cat f1.txt，查看f1.txt文件的内容。</li><li><p>答：cat 命令用于连接文件并打印到标准输出设备上。<br>cat 主要有三大功能：<br>1.一次显示整个文件:<br>cat filename 1 2.从键盘创建一个文件:<br>cat &gt; filename 1 只能创建新文件，不能编辑已有文件。<br>3.将几个文件合并为一个文件:<br>cat file1 file2 &gt; file 1 -b 对非空输出行号 -n 输出所有行号 实例：<br>（1）把 log2012.log 的文件内容加上行号后输入 log2013.log 这个文件里<br>cat -n log2012.log log2013.log 1 （2）把 log2012.log 和 log2013.log 的文件内容加上行号（空白行不加）之后将内容附加到 log.log 里<br>cat -b log2012.log log2013.log log.log 1 （3）使用 here doc 生成新文件<br>cat &gt;log.txt &lt;&lt;EOF </p><p>Hello World PWD=$(pwd) EOF ls -l log.txt cat log.txt Hello World PWD=/opt/soft/test 1 2 3 4 5 6 7 8 9 10 （4）反向列示 </p></li></ul><p>tac log.txt PWD=/opt/soft/test World Hello</p><h6 id="chmod-命令"><a href="#chmod-命令" class="headerlink" title="chmod 命令"></a>chmod 命令</h6><p>问：chmod 命令</p><ul><li>答：改变一个或多个文件的存取模式(mode)</li><li>答：Linux/Unix 的文件调用权限分为三级 : 文件拥有者、群组、其他。利用 chmod 可以控制文件如何被他人所调用。<br>用于改变 linux 系统文件或目录的访问权限。用它控制文件或目录的访问权限。该命令有两种用法。一种是包含字母和操作符表达式的文字设定法；另一种是包含数字的数字设定法。<br>每一文件或目录的访问权限都有三组，每组用三位表示，分别为文件属主的读、写和执行权限；与属主同组的用户的读、写和执行权限；系统中其他用户的读、写和执行权限。可使用 ls -l test.txt 查找。<br>以文件 log2012.log 为例：<br>-rw-r—r— 1 root root 296K 11-13 06:03 log2012.log 1 第一列共有 10 个位置，第一个字符指定了文件类型。在通常意义上，一个目录也是一个文件。如果第一个字符是横线，表示是一个非目录的文件。如果是 d，表示是一个目录。从第二个字符开始到第十个 9 个字符，3 个字符一组，分别表示了 3 组用户对文件或者目录的权限。权限字符用横线代表空许可，r 代表只读，w 代表写，x 代表可执行。<br>常用参数：<br>-c 当发生改变时，报告处理信息 -R 处理指定目录以及其子目录下所有文件 1 2 权限范围：<br>u ：目录或者文件的当前的用户 g ：目录或者文件的当前的群组 o ：除了目录或者文件的当前用户或群组之外的用户或者群组 a ：所有的用户及群组 1 2 3 4 权限代号：<br>r ：读权限，用数字4表示 w ：写权限，用数字2表示 x ：执行权限，用数字1表示 - ：删除权限，用数字0表示 s ：特殊权限 1 2 3 4 5 实例：<br>（1）增加文件 t.log 所有用户可执行权限<br>chmod a+x t.log 1 （2）撤销原来所有的权限，然后使拥有者具有可读权限,并输出处理信息<br>chmod u=r t.log -c 1 （3）给 file 的属主分配读、写、执行(7)的权限，给file的所在组分配读、执行(5)的权限，给其他用户分配执行(1)的权限<br>chmod 751 t.log -c（或者：chmod u=rwx,g=rx,o=x t.log -c) 1 （4）将 test 目录及其子目录所有文件添加可读权限<br>chmod u+r,g+r,o+r -R text/ -c</li></ul><h6 id="chown-命令"><a href="#chown-命令" class="headerlink" title="chown 命令"></a>chown 命令</h6><p>问：chown 命令</p><ul><li>答：chown 将指定文件的拥有者改为指定的用户或组，用户可以是用户名或者用户 ID；组可以是组名或者组 ID；文件是以空格分开的要改变权限的文件列表，支持通配符。<br>-c 显示更改的部分的信息 -R 处理指定目录及子目录 1 2 实例：<br>（1）改变拥有者和群组 并显示改变信息<br>chown -c mail:mail log2012.log 1 （2）改变文件群组<br>chown -c :mail t.log 1 （3）改变文件夹及子文件目录属主及属组为 mail<br>chown -cR mail: test/</li></ul><h6 id="cp-命令"><a href="#cp-命令" class="headerlink" title="cp 命令"></a>cp 命令</h6><p>问：cp 命令</p><ul><li>答：将源文件复制到你想移动到的文件</li><li>答：将源文件复制至目标文件，或将多个源文件复制至目标目录。<br>注意：命令行复制，如果目标文件已经存在会提示是否覆盖，而在 shell 脚本中，如果不加 -i 参数，则不会提示，而是直接覆盖！<br>-i 提示 -r 复制目录及目录内所有项目 -a 复制的文件与原文件时间一样 1 2 3 实例：<br>（1）复制 a.txt 到 test 目录下，保持原文件时间，如果原文件存在提示是否覆盖。<br>cp -ai a.txt test 1 （2）为 a.txt 建议一个链接（快捷方式）<br>cp -s a.txt link_a.txt</li></ul><h6 id="find-命令"><a href="#find-命令" class="headerlink" title="find 命令"></a>find 命令</h6><p>问：find 命令</p><ul><li>答：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">用于在文件树中查找文件，并作出相应的处理。 </span><br><span class="line">命令格式： </span><br><span class="line">find pathname -options [-print -exec -ok ...] 1 命令参数： </span><br><span class="line">pathname: find命令所查找的目录路径。例如用.来表示当前目录，用/来表示系统根目录。 -print： find命令将匹配的文件输出到标准输出。 -exec： find命令对匹配的文件执行该参数所给出的shell命令。相应命令的形式为&apos;command&apos; &#123; &#125; ;，注意&#123; &#125;和\；之间的空格。 -ok： 和-exec的作用相同，只不过以一种更为安全的模式来执行该参数所给出的shell命令，在执行每一个命令之前，都会给出提示，让用户来确定是否执行。 1 2 3 4 命令选项： </span><br><span class="line">-name 按照文件名查找文件 -perm 按文件权限查找文件 -user 按文件属主查找文件 -group 按照文件所属的组来查找文件。 -type 查找某一类型的文件，诸如： b - 块设备文件 d - 目录 c - 字符设备文件 l - 符号链接文件 p - 管道文件 f - 普通文件 1 2 3 4 5 6 7 8 9 10 11 实例： </span><br><span class="line">（1）查找 48 小时内修改过的文件 </span><br><span class="line">find -atime -2 1 （2）在当前目录查找 以 .log 结尾的文件。 . 代表当前目录 </span><br><span class="line">find ./ -name &apos;*.log&apos; 1 （3）查找 /opt 目录下 权限为 777 的文件 </span><br><span class="line">find /opt -perm 777 1 （4）查找大于 1K 的文件 </span><br><span class="line">find -size +1000c 1 查找等于 1000 字符的文件 </span><br><span class="line">find -size 1000c 1 -exec 参数后面跟的是 command 命令，它的终止是以 ; 为结束标志的，所以这句命令后面的分号是不可缺少的，考虑到各个系统中分号会有不同的意义，所以前面加反斜杠。&#123;&#125; 花括号代表前面find查找出来的文件名。</span><br></pre></td></tr></table></figure><h6 id="head-命令"><a href="#head-命令" class="headerlink" title="head 命令"></a>head 命令</h6><p>问：head 命令</p><ul><li>答：head 用来显示档案的开头至标准输出中，默认 head 命令打印其相应文件的开头 10 行。<br>常用参数：<br>-n&lt;行数&gt; 显示的行数（行数为复数表示从最后向前数） 1 实例：<br>（1）显示 1.log 文件中前 20 行<br>head 1.log -n 20 1 （2）显示 1.log 文件前 20 字节<br>head -c 20 log2014.log 1 （3）显示 t.log最后 10 行<br>head -n -10 t.log</li></ul><h6 id="less-命令"><a href="#less-命令" class="headerlink" title="less 命令"></a>less 命令</h6><p>问：less 命令</p><ul><li>答：less 与 more 类似，但使用 less 可以随意浏览文件，而 more 仅能向前移动，却不能向后移动，而且 less 在查看之前不会加载整个文件。<br>常用命令参数：<br>-i 忽略搜索时的大小写 -N 显示每行的行号 -o &lt;文件名&gt; 将less 输出的内容在指定文件中保存起来 -s 显示连续空行为一行 /字符串：向下搜索“字符串”的功能 ?字符串：向上搜索“字符串”的功能 n：重复前一个搜索（与 / 或 ? 有关） N：反向重复前一个搜索（与 / 或 ? 有关） -x &lt;数字&gt; 将“tab”键显示为规定的数字空格 b 向后翻一页 d 向后翻半页 h 显示帮助界面 Q 退出less 命令 u 向前滚动半页 y 向前滚动一行 空格键 滚动一行 回车键 滚动一页 [pagedown]： 向下翻动一页 [pageup]： 向上翻动一页 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 实例：<br>（1）ps 查看进程信息并通过 less 分页显示<br>ps -aux | less -N 1 （2）查看多个文件<br>less 1.log 2.log 1 可以使用 n 查看下一个，使用 p 查看前一个。</li></ul><h6 id="ln-命令"><a href="#ln-命令" class="headerlink" title="ln 命令"></a>ln 命令</h6><p>问：ln 命令</p><ul><li>答：功能是为文件在另外一个位置建立一个同步的链接，当在不同目录需要该问题时，就不需要为每一个目录创建同样的文件，通过 ln 创建的链接（link）减少磁盘占用量。<br>链接分类：软件链接及硬链接<br>软链接：<br>1.软链接，以路径的形式存在。类似于Windows操作系统中的快捷方式 2.软链接可以 跨文件系统 ，硬链接不可以 3.软链接可以对一个不存在的文件名进行链接 4.软链接可以对目录进行链接 硬链接:<br>1.硬链接，以文件副本的形式存在。但不占用实际空间。 2.不允许给目录创建硬链接 3.硬链接只有在同一个文件系统中才能创建 需要注意：<br>第一：ln命令会保持每一处链接文件的同步性，也就是说，不论你改动了哪一处，其它的文件都会发生相同的变化； 第二：ln的链接又分软链接和硬链接两种，软链接就是ln –s 源文件 目标文件，它只会在你选定的位置上生成一个文件的镜像，不会占用磁盘空间，硬链接 ln 源文件 目标文件，没有参数-s， 它会在你选定的位置上生成一个和源文件大小相同的文件，无论是软链接还是硬链接，文件都保持同步变化。 第三：ln指令用在链接文件或目录，如同时指定两个以上的文件或目录，且最后的目的地是一个已经存在的目录，则会把前面指定的所有文件或目录复制到该目录中。若同时指定多个文件或目录，且最后的目的地并非是一个已存在的目录，则会出现错误信息。 常用参数：<br>-b 删除，覆盖以前建立的链接 -s 软链接（符号链接） -v 显示详细处理过程 1 2 3 实例：<br>（1）给文件创建软链接，并显示操作信息<br>ln -sv source.log link.log 1 （2）给文件创建硬链接，并显示操作信息<br>ln -v source.log link1.log 1 （3）给目录创建软链接<br>ln -sv /opt/soft/test/test3 /opt/soft/test/test5</li></ul><h6 id="locate-命令"><a href="#locate-命令" class="headerlink" title="locate 命令"></a>locate 命令</h6><p>问：locate 命令</p><ul><li>答：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">locate 通过搜寻系统内建文档数据库达到快速找到档案，数据库由 updatedb 程序来更新，updatedb 是由 cron daemon 周期性调用的。默认情况下 locate 命令在搜寻数据库时比由整个由硬盘资料来搜寻资料来得快，但较差劲的是 locate 所找到的档案若是最近才建立或 刚更名的，可能会找不到，在内定值中，updatedb 每天会跑一次，可以由修改 crontab 来更新设定值 (etc/crontab)。 </span><br><span class="line">locate 与 find 命令相似，可以使用如 *、? 等进行正则匹配查找 </span><br><span class="line">常用参数： </span><br><span class="line">-l num（要显示的行数） -f 将特定的档案系统排除在外，如将proc排除在外 -r 使用正则运算式做为寻找条件 1 2 3 实例： </span><br><span class="line">（1）查找和 pwd 相关的所有文件(文件名中包含 pwd） </span><br><span class="line">locate pwd 1 （2）搜索 etc 目录下所有以 sh 开头的文件 </span><br><span class="line">locate /etc/sh 1 （3）查找 /var 目录下，以 reason 结尾的文件 </span><br><span class="line">locate -r &apos;^/var.*reason$&apos;（其中.表示一个字符，*表示任务多个；.*表示任意多个字符）</span><br></pre></td></tr></table></figure><h6 id="more-命令"><a href="#more-命令" class="headerlink" title="more 命令"></a>more 命令</h6><p>问：more 命令</p><ul><li>答：功能类似于 cat, more 会以一页一页的显示方便使用者逐页阅读，而最基本的指令就是按空白键（space）就往下一页显示，按 b 键就会往回（back）一页显示。<br>命令参数：<br>+n 从笫 n 行开始显示 -n 定义屏幕大小为n行 +/pattern 在每个档案显示前搜寻该字串（pattern），然后从该字串前两行之后开始显示 -c 从顶部清屏，然后显示 -d 提示“Press space to continue，’q’ to quit（按空格键继续，按q键退出）”，禁用响铃功能 -l 忽略Ctrl+l（换页）字符 -p 通过清除窗口而不是滚屏来对文件进行换页，与-c选项相似 -s 把连续的多个空行显示为一行 -u 把文件内容中的下画线去掉 1 2 3 4 5 6 7 8 9 常用操作命令：<br>Enter 向下 n 行，需要定义。默认为 1 行 Ctrl+F 向下滚动一屏 空格键 向下滚动一屏 Ctrl+B 返回上一屏 = 输出当前行的行号 :f 输出文件名和当前行的行号 V 调用vi编辑器 !命令 调用Shell，并执行命令 q 退出more 1 2 3 4 5 6 7 8 9 实例：<br>（1）显示文件中从第3行起的内容<br>more +3 text.txt 1 （2）在所列出文件目录详细信息，借助管道使每次显示 5 行<br>ls -l | more -5 1 按空格显示下 5 行。</li></ul><h6 id="mv-命令"><a href="#mv-命令" class="headerlink" title="mv 命令"></a>mv 命令</h6><p>问：mv 命令</p><ul><li>答：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">移动文件或修改文件名，根据第二参数类型（如目录，则移动文件；如为文件则重命令该文件）。 </span><br><span class="line">当第二个参数为目录时，第一个参数可以是多个以空格分隔的文件或目录，然后移动第一个参数指定的多个文件到第二个参数指定的目录中。 </span><br><span class="line">实例： </span><br><span class="line">（1）将文件 test.log 重命名为 test1.txt </span><br><span class="line">mv test.log test1.txt 1 （2）将文件 log1.txt,log2.txt,log3.txt 移动到根的 test3 目录中 </span><br><span class="line">mv llog1.txt log2.txt log3.txt /test3 1 （3）将文件 file1 改名为 file2，如果 file2 已经存在，则询问是否覆盖 </span><br><span class="line">mv -i log1.txt log2.txt 1 （4）移动当前文件夹下的所有文件到上一级目录 </span><br><span class="line">mv * ../</span><br></pre></td></tr></table></figure><h6 id="rm-命令"><a href="#rm-命令" class="headerlink" title="rm 命令"></a>rm 命令</h6><p>问：rm 命令</p><ul><li>答：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">删除一个目录中的一个或多个文件或目录，如果没有使用 -r 选项，则 rm 不会删除目录。如果使用 rm 来删除文件，通常仍可以将该文件恢复原状。 </span><br><span class="line">rm [选项] 文件… 1 实例： </span><br><span class="line">（1）删除任何 .log 文件，删除前逐一询问确认： </span><br><span class="line">rm -i *.log 1 （2）删除 test 子目录及子目录中所有档案删除，并且不用一一确认： </span><br><span class="line">rm -rf test 1 （3）删除以 -f 开头的文件 </span><br><span class="line">rm -- -f*</span><br></pre></td></tr></table></figure><ul><li>答：删库跑路。。。。</li></ul><h6 id="tail-命令"><a href="#tail-命令" class="headerlink" title="tail 命令"></a>tail 命令</h6><p>问：tail 命令</p><ul><li>答：用于显示指定文件末尾内容，不指定文件时，作为输入信息进行处理。常用查看日志文件。<br>常用参数：<br>-f 循环读取（常用于查看递增的日志文件） -n&lt;行数&gt; 显示行数（从后向前） 1 2 （1）循环读取逐渐增加的文件内容<br>ping 127.0.0.1 &gt; ping.log &amp; 1 后台运行：可使用 jobs -l 查看，也可使用 fg 将其移到前台运行。<br>tail -f ping.log 1 （查看日志）</li></ul><h6 id="touch-命令"><a href="#touch-命令" class="headerlink" title="touch 命令"></a>touch 命令</h6><p>问：touch 命令</p><ul><li>答：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Linux touch命令用于修改文件或者目录的时间属性，包括存取时间和更改时间。若文件不存在，系统会建立一个新的文件。 </span><br><span class="line">ls -l 可以显示档案的时间记录。 </span><br><span class="line">语法 </span><br><span class="line">touch [-acfm][-d&lt;日期时间&gt;][-r&lt;参考文件或目录&gt;] [-t&lt;日期时间&gt;][--help][--version][文件或目录…] 1 参数说明： a 改变档案的读取时间记录。 m 改变档案的修改时间记录。 c 假如目的档案不存在，不会建立新的档案。与 --no-create 的效果一样。 f 不使用，是为了与其他 unix 系统的相容性而保留。 r 使用参考档的时间记录，与 --file 的效果一样。 d 设定时间与日期，可以使用各种不同的格式。 t 设定档案的时间记录，格式与 date 指令相同。 –no-create 不会建立新档案。 –help 列出指令格式。 –version 列出版本讯息。 实例 </span><br><span class="line">使用指令&quot;touch&quot;修改文件&quot;testfile&quot;的时间属性为当前系统时间，输入如下命令： </span><br><span class="line">$ touch testfile #修改文件的时间属性 1 首先，使用ls命令查看testfile文件的属性，如下所示： </span><br><span class="line">$ ls -l testfile #查看文件的时间属性</span><br><span class="line"> #原来文件的修改时间为16:09</span><br><span class="line"> -rw-r--r-- 1 hdd hdd 55 2011-08-22 16:09 testfile</span><br><span class="line"> 1 2 3 执行指令&quot;touch&quot;修改文件属性以后，并再次查看该文件的时间属性，如下所示： </span><br><span class="line">$ touch testfile #修改文件时间属性为当前系统时间</span><br><span class="line"> $ ls -l testfile #查看文件的时间属性</span><br><span class="line"> #修改后文件的时间属性为当前系统时间</span><br><span class="line"> -rw-r--r-- 1 hdd hdd 55 2011-08-22 19:53 testfile</span><br><span class="line"> 1 2 3 4 使用指令&quot;touch&quot;时，如果指定的文件不存在，则将创建一个新的空白文件。例如，在当前目录下，使用该指令创建一个空白文件&quot;file&quot;，输入如下命令： </span><br><span class="line">$ touch file #创建一个名为“file”的新的空白文件</span><br></pre></td></tr></table></figure><h6 id="vim-命令"><a href="#vim-命令" class="headerlink" title="vim 命令"></a>vim 命令</h6><p>问：vim 命令</p><ul><li>答：Vim是从 vi 发展出来的一个文本编辑器。代码补完、编译及错误跳转等方便编程的功能特别丰富，在程序员中被广泛使用。<br>打开文件并跳到第 10 行：vim +10 filename.txt 。 打开文件跳到第一个匹配的行：vim +/search-term filename.txt 。 以只读模式打开文件：vim -R /etc/passwd 。 基本上 vi/vim 共分为三种模式，分别是命令模式（Command mode），输入模式（Insert mode）和底线命令模式（Last line mode）。<br>简单的说，我们可以将这三个模式想成底下的图标来表示： <img src="https://ucc.alicdn.com/pic/developer-ecology/5ac83efa25e74511ad7770ff1f7d2d0d.png" alt="image.png"></li></ul><h6 id="whereis-命令"><a href="#whereis-命令" class="headerlink" title="whereis 命令"></a>whereis 命令</h6><p>问：whereis 命令</p><ul><li>答：whereis 命令只能用于程序名的搜索，而且只搜索二进制文件（参数-b）、man说明文件（参数-m）和源代码文件（参数-s）。如果省略参数，则返回所有信息。whereis 及 locate 都是基于系统内建的数据库进行搜索，因此效率很高，而find则是遍历硬盘查找文件。<br>常用参数：<br>-b 定位可执行文件。 -m 定位帮助文件。 -s 定位源代码文件。 -u 搜索默认路径下除可执行文件、源代码文件、帮助文件以外的其它文件。 1 2 3 4 实例：<br>（1）查找 locate 程序相关文件<br>whereis locate 1 （2）查找 locate 的源码文件<br>whereis -s locate 1 （3）查找 lcoate 的帮助文件<br>whereis -m locate</li></ul><h6 id="which-命令"><a href="#which-命令" class="headerlink" title="which 命令"></a>which 命令</h6><p>问：which 命令</p><ul><li>答：在 linux 要查找某个文件，但不知道放在哪里了，可以使用下面的一些命令来搜索：<br>which 查看可执行文件的位置。 whereis 查看文件的位置。 locate 配合数据库查看文件位置。 find 实际搜寻硬盘查询文件名称。 1 2 3 4 which 是在 PATH 就是指定的路径中，搜索某个系统命令的位置，并返回第一个搜索结果。使用 which 命令，就可以看到某个系统命令是否存在，以及执行的到底是哪一个位置的命令。<br>常用参数：<br>-n 　指定文件名长度，指定的长度必须大于或等于所有文件中最长的文件名。 1 实例：<br>（1）查看 ls 命令是否存在，执行哪个<br>which ls 1 （2）查看 which<br>which which 1 （3）查看 cd<br>which cd（显示不存在，因为 cd 是内建命令，而 which 查找显示是 PATH 中的命令） 1 查看当前 PATH 配置：<br>echo $PATH 1 或使用 env 查看所有环境变量及对应值</li></ul><h6 id="grep-命令"><a href="#grep-命令" class="headerlink" title="grep 命令"></a>grep 命令</h6><p>问：grep 命令</p><ul><li>答：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">强大的文本搜索命令，grep(Global Regular Expression Print) 全局正则表达式搜索。 </span><br><span class="line">grep 的工作方式是这样的，它在一个或多个文件中搜索字符串模板。如果模板包括空格，则必须被引用，模板后的所有字符串被看作文件名。搜索的结果被送到标准输出，不影响原文件内容。 </span><br><span class="line">命令格式： </span><br><span class="line">grep [option] pattern file|dir 1 常用参数： </span><br><span class="line">-A n --after-context显示匹配字符后n行 -B n --before-context显示匹配字符前n行 -C n --context 显示匹配字符前后n行 -c --count 计算符合样式的列数 -i 忽略大小写 -l 只列出文件内容符合指定的样式的文件名称 -f 从文件中读取关键词 -n 显示匹配内容的所在文件中行数 -R 递归查找文件夹 1 2 3 4 5 6 7 8 9 grep 的规则表达式: </span><br><span class="line">^ #锚定行的开始 如：&apos;^grep&apos;匹配所有以grep开头的行。 $ #锚定行的结束 如：&apos;grep$&apos;匹配所有以grep结尾的行。 . #匹配一个非换行符的字符 如：&apos;gr.p&apos;匹配gr后接一个任意字符，然后是p。</span><br><span class="line"> * #匹配零个或多个先前字符 如：&apos;&lt;em&gt;grep&apos;匹配所有一个或多个空格后紧跟grep的行。 .&lt;/em&gt; #一起用代表任意字符。</span><br><span class="line"> [] #匹配一个指定范围内的字符，如&apos;[Gg]rep&apos;匹配Grep和grep。 [^] #匹配一个不在指定范围内的字符，如：&apos;[^A-FH-Z]rep&apos;匹配不包含A-R和T-Z的一个字母开头，紧跟rep的行。</span><br><span class="line"> (..) #标记匹配字符，如&apos;(love)&apos;，love被标记为1。</span><br><span class="line"> &lt; #锚定单词的开始，如:&apos;&lt;grep&apos;匹配包含以grep开头的单词的行。 &gt; #锚定单词的结束，如&apos;grep&gt;&apos;匹配包含以grep结尾的单词的行。 x&#123;m&#125; #重复字符x，m次，如：&apos;0&#123;5&#125;&apos;匹配包含5个o的行。 x&#123;m,&#125; #重复字符x,至少m次，如：&apos;o&#123;5,&#125;&apos;匹配至少有5个o的行。</span><br><span class="line"> x&#123;m,n&#125; #重复字符x，至少m次，不多于n次，如：&apos;o&#123;5,10&#125;&apos;匹配5--10个o的行。</span><br><span class="line"> \w #匹配文字和数字字符，也就是[A-Za-z0-9]，如：&apos;G\w*p&apos;匹配以G后跟零个或多个文字或数字字符，然后是p。</span><br><span class="line"> \W #\w的反置形式，匹配一个或多个非单词字符，如点号句号等。</span><br><span class="line"> \b #单词锁定符，如: &apos;\bgrep\b&apos;只匹配grep。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 实例： </span><br><span class="line">（1）查找指定进程 </span><br><span class="line">ps -ef | grep svn 1 （2）查找指定进程个数 </span><br><span class="line">ps -ef | grep svn -c 1 （3）从文件中读取关键词 </span><br><span class="line">cat test1.txt | grep -f key.log 1 （4）从文件夹中递归查找以grep开头的行，并只列出文件 </span><br><span class="line">grep -lR &apos;^grep&apos; /tmp 1 （5）查找非x开关的行内容 </span><br><span class="line">grep &apos;^[^x]&apos; test.txt 1 （6）显示包含 ed 或者 at 字符的内容行 </span><br><span class="line">grep -E &apos;ed|at&apos; test.txt</span><br></pre></td></tr></table></figure><h6 id="wc-命令"><a href="#wc-命令" class="headerlink" title="wc 命令"></a>wc 命令</h6><p>问：wc 命令</p><ul><li>答：wc(word count)功能为统计指定的文件中字节数、字数、行数，并将统计结果输出<br>命令格式：<br>wc [option] file.. 1 命令参数：<br>-c 统计字节数 -l 统计行数 -m 统计字符数 -w 统计词数，一个字被定义为由空白、跳格或换行字符分隔的字符串 1 2 3 4 实例：<br>（1）查找文件的 行数 单词数 字节数 文件名<br>wc text.txt 1 结果：<br>7 8 70 test.txt 1 （2）统计输出结果的行数<br>cat test.txt | wc -l</li></ul><h6 id="cd-命令"><a href="#cd-命令" class="headerlink" title="cd 命令"></a>cd 命令</h6><p>问：cd 命令</p><ul><li>答：进入某个目录</li><li>答：cd(changeDirectory) 命令语法：<br>cd [目录名] 1 说明：切换当前目录至 dirName。<br>实例：<br>（1）进入要目录<br>cd / 1 （2）进入 “home” 目录<br>cd ~ 1 （3）进入上一次工作路径<br>cd - 1 （4）把上个命令的参数作为cd参数使用。<br>cd !$</li></ul><h6 id="df-命令"><a href="#df-命令" class="headerlink" title="df 命令"></a>df 命令</h6><p>问：df 命令</p><ul><li>答：显示磁盘空间使用情况。获取硬盘被占用了多少空间，目前还剩下多少空间等信息，如果没有文件名被指定，则所有当前被挂载的文件系统的可用空间将被显示。默认情况下，磁盘空间将以 1KB 为单位进行显示，除非环境变量 POSIXLY_CORRECT 被指定，那样将以512字节为单位进行显示：<br>-a 全部文件系统列表 -h 以方便阅读的方式显示信息 -i 显示inode信息 -k 区块为1024字节 -l 只显示本地磁盘 -T 列出文件系统类型 1 2 3 4 5 6 实例：<br>（1）显示磁盘使用情况<br>df -l 1 （2）以易读方式列出所有文件系统及其类型<br>df -haT</li></ul><h6 id="du-命令"><a href="#du-命令" class="headerlink" title="du 命令"></a>du 命令</h6><p>问：du 命令</p><ul><li>答：du 命令也是查看使用空间的，但是与 df 命令不同的是 Linux du 命令是对文件和目录磁盘使用的空间的查看：<br>命令格式：<br>du [选项][文件] 1 常用参数：<br>-a 显示目录中所有文件大小 -k 以KB为单位显示文件大小 -m 以MB为单位显示文件大小 -g 以GB为单位显示文件大小 -h 以易读方式显示文件大小 -s 仅显示总计 -c或—total 除了显示个别目录或文件的大小外，同时也显示所有目录或文件的总和 1 2 3 4 5 6 7 实例：<br>（1）以易读方式显示文件夹内及子文件夹大小<br>du -h scf/ 1 （2）以易读方式显示文件夹内所有文件大小<br>du -ah scf/ 1 （3）显示几个文件或目录各自占用磁盘空间的大小，还统计它们的总和<br>du -hc test/ scf/ 1 （4）输出当前目录下各个子目录所使用的空间<br>du -hc —max-depth=1 scf/</li></ul><h6 id="ls命令"><a href="#ls命令" class="headerlink" title="ls命令"></a>ls命令</h6><p>问：ls命令</p><ul><li>答：查看目录下有哪些东西</li><li>答：ls命令用来显示目标列表，在Linux中是使用率较高的命令。ls命令的输出信息可以进行彩色加亮显示，以分区不同类型的文件。</li><li>答：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">就是 list 的缩写，通过 ls 命令不仅可以查看 linux 文件夹包含的文件，而且可以查看文件权限(包括目录、文件夹、文件权限)查看目录信息等等。 </span><br><span class="line">常用参数搭配： </span><br><span class="line">ls -a 列出目录所有文件，包含以.开始的隐藏文件 ls -A 列出除.及..的其它文件 ls -r 反序排列 ls -t 以文件修改时间排序 ls -S 以文件大小排序 ls -h 以易读大小显示 ls -l 除了文件名之外，还将文件的权限、所有者、文件大小等信息详细列出来 1 2 3 4 5 6 7 实例： </span><br><span class="line">(1) 按易读方式按时间反序排序，并显示文件详细信息 </span><br><span class="line">ls -lhrt 1 (2) 按大小反序显示文件详细信息 </span><br><span class="line">ls -lrS 1 (3)列出当前目录中所有以&quot;t&quot;开头的目录的详细内容 </span><br><span class="line">ls -l t* 1 (4) 列出文件绝对路径（不包含隐藏文件） </span><br><span class="line">ls | sed &quot;s:^:pwd/:&quot; 1 (5) 列出文件绝对路径（包含隐藏文件） </span><br><span class="line">find $pwd -maxdepth 1 | xargs ls -ld</span><br></pre></td></tr></table></figure><h6 id="mkdir-命令"><a href="#mkdir-命令" class="headerlink" title="mkdir 命令"></a>mkdir 命令</h6><p>问：mkdir 命令</p><ul><li>答：mkdir 命令用于创建文件夹。<br>可用选项：<br>-m: 对新建目录设置存取权限，也可以用 chmod 命令设置; -p: 可以是一个路径名称。此时若路径中的某些目录尚不存在,加上此选项后，系统将自动建立好那些尚不在的目录，即一次可以建立多个目录。 实例：<br>（1）当前工作目录下创建名为 t的文件夹<br>mkdir t 1 （2）在 tmp 目录下创建路径为 test/t1/t 的目录，若不存在，则创建：<br>mkdir -p /tmp/test/t1/t</li></ul><h6 id="pwd-命令"><a href="#pwd-命令" class="headerlink" title="pwd 命令"></a>pwd 命令</h6><p>问：pwd 命令</p><ul><li>答：pwd 命令用于查看当前工作目录路径。<br>实例：<br>（1）查看当前路径<br>pwd 1 （2）查看软链接的实际路径<br>pwd -P</li></ul><h6 id="rmdir-命令"><a href="#rmdir-命令" class="headerlink" title="rmdir 命令"></a>rmdir 命令</h6><p>问：rmdir 命令</p><ul><li>答：从一个目录中删除一个或多个子目录项，删除某目录时也必须具有对其父目录的写权限。<br>注意：不能删除非空目录<br>实例：<br>（1）当 parent 子目录被删除后使它也成为空目录的话，则顺便一并删除：<br>rmdir -p parent/child/child11</li></ul><h6 id="ifconfig-命令"><a href="#ifconfig-命令" class="headerlink" title="ifconfig 命令"></a>ifconfig 命令</h6><p>问：ifconfig 命令</p><ul><li>答：ifconfig(interfaces config)。通常需要以root身份登录或使用sudo来使用ifconfig工具<br>ifconfig 命令用来查看和配置网络设备。当网络环境发生改变时可通过此命令对网络进行相应的配置。<br>备注：用ifconfig命令配置的网卡信息，在网卡重启后机器重启后，配置就不存在。要想将上述的配置信息永远的存的电脑里，那就要修改网卡的配置文件了。</li><li>答：ifconfig 用于查看和配置 Linux 系统的网络接口。 查看所有网络接口及其状态：ifconfig -a 。 使用 up 和 down 命令启动或停止某个接口：ifconfig eth0 up 和 ifconfig eth0 down 。</li></ul><h6 id="iptables-命令"><a href="#iptables-命令" class="headerlink" title="iptables 命令"></a>iptables 命令</h6><p>问：iptables 命令</p><ul><li>答：iptables ，是一个配置 Linux 内核防火墙的命令行工具。功能非常强大，对于我们开发来说，主要掌握如何开放端口即可。例如：<br>把来源 IP 为 192.168.1.101 访问本机 80 端口的包直接拒绝：iptables -I INPUT -s 192.168.1.101 -p tcp —dport 80 -j REJECT 。<br>开启 80 端口，因为web对外都是这个端口<br>iptables -A INPUT -p tcp —dport 80 -j ACCEP 1 另外，要注意使用 iptables save 命令，进行保存。否则，服务器重启后，配置的规则将丢失。</li></ul><h6 id="netstat-命令"><a href="#netstat-命令" class="headerlink" title="netstat 命令"></a>netstat 命令</h6><p>问：netstat 命令</p><ul><li>答：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Linux netstat命令用于显示网络状态。 </span><br><span class="line">利用netstat指令可让你得知整个Linux系统的网络情况。 </span><br><span class="line">语法 </span><br><span class="line">netstat [-acCeFghilMnNoprstuvVwx][-A&lt;网络类型&gt;][--ip] 1 参数说明： </span><br><span class="line">-a或–all 显示所有连线中的Socket。 -A&lt;网络类型&gt;或–&lt;网络类型&gt; 列出该网络类型连线中的相关地址。 -c或–continuous 持续列出网络状态。 -C或–cache 显示路由器配置的快取信息。 -e或–extend 显示网络其他相关信息。 -F或–fib 显示FIB。 -g或–groups 显示多重广播功能群组组员名单。 -h或–help 在线帮助。 -i或–interfaces 显示网络界面信息表单。 -l或–listening 显示监控中的服务器的Socket。 -M或–masquerade 显示伪装的网络连线。 -n或–numeric 直接使用IP地址，而不通过域名服务器。 -N或–netlink或–symbolic 显示网络硬件外围设备的符号连接名称。 -o或–timers 显示计时器。 -p或–programs 显示正在使用Socket的程序识别码和程序名称。 -r或–route 显示Routing Table。 -s或–statistice 显示网络工作信息统计表。 -t或–tcp 显示TCP传输协议的连线状况。 -u或–udp 显示UDP传输协议的连线状况。 -v或–verbose 显示指令执行过程。 -V或–version 显示版本信息。 -w或–raw 显示RAW传输协议的连线状况。 -x或–unix 此参数的效果和指定&quot;-A unix&quot;参数相同。 –ip或–inet 此参数的效果和指定&quot;-A inet&quot;参数相同。 实例 </span><br><span class="line">如何查看系统都开启了哪些端口？ </span><br><span class="line">[root@centos6 ~ 13:20 #55]# netstat -lnp Active Internet connections (only servers) Proto Recv-Q Send-Q Local Address Foreign Address State PID/Program name tcp 0 0 0.0.0.0:22 0.0.0.0:* LISTEN 1035/sshd tcp 0 0 :::22 :::* LISTEN 1035/sshd udp 0 0 0.0.0.0:68 0.0.0.0:* 931/dhclient Active UNIX domain sockets (only servers) Proto RefCnt Flags Type State I-Node PID/Program name Path unix 2 [ ACC ] STREAM LISTENING 6825 1/init @/com/ubuntu/upstart unix 2 [ ACC ] STREAM LISTENING 8429 1003/dbus-daemon /var/run/dbus/system_bus_socket 1 2 3 4 5 6 7 8 9 10 如何查看网络连接状况？ </span><br><span class="line">[root@centos6 ~ 13:22 #58]# netstat -an Active Internet connections (servers and established) Proto Recv-Q Send-Q Local Address Foreign Address State tcp 0 0 0.0.0.0:22 0.0.0.0:* LISTEN tcp 0 0 192.168.147.130:22 192.168.147.1:23893 ESTABLISHED tcp 0 0 :::22 :::* LISTEN udp 0 0 0.0.0.0:68 0.0.0.0:* 1 2 3 4 5 6 7 如何统计系统当前进程连接数？ </span><br><span class="line">输入命令 netstat -an | grep ESTABLISHED | wc -l 。 输出结果 177 。一共有 177 连接数。 用 netstat 命令配合其他命令，按照源 IP 统计所有到 80 端口的 ESTABLISHED 状态链接的个数？ </span><br><span class="line">严格来说，这个题目考验的是对 awk 的使用。 </span><br><span class="line">首先，使用 netstat -an|grep ESTABLISHED 命令。结果如下： </span><br><span class="line">tcp 0 0 120.27.146.122:80 113.65.18.33:62721 ESTABLISHED tcp 0 0 120.27.146.122:80 27.43.83.115:47148 ESTABLISHED tcp 0 0 120.27.146.122:58838 106.39.162.96:443 ESTABLISHED tcp 0 0 120.27.146.122:52304 203.208.40.121:443 ESTABLISHED tcp 0 0 120.27.146.122:33194 203.208.40.122:443 ESTABLISHED tcp 0 0 120.27.146.122:53758 101.37.183.144:443 ESTABLISHED tcp 0 0 120.27.146.122:27017 23.105.193.30:50556 ESTABLISHED</span><br></pre></td></tr></table></figure><h6 id="ping-命令"><a href="#ping-命令" class="headerlink" title="ping 命令"></a>ping 命令</h6><p>问：ping 命令</p><ul><li>答：Linux ping命令用于检测主机。<br>执行ping指令会使用ICMP传输协议，发出要求回应的信息，若远端主机的网络功能没有问题，就会回应该信息，因而得知该主机运作正常。<br>指定接收包的次数<br>ping -c 2 www.baidu.com</li></ul><h6 id="telnet-命令"><a href="#telnet-命令" class="headerlink" title="telnet 命令"></a>telnet 命令</h6><p>问：telnet 命令</p><ul><li>答：Linux telnet命令用于远端登入。<br>执行telnet指令开启终端机阶段作业，并登入远端主机。<br>语法<br>telnet [-8acdEfFKLrx][-b&lt;主机别名&gt;][-e&lt;脱离字符&gt;][-k&lt;域名&gt;][-l&lt;用户名称&gt;][-n&lt;记录文件&gt;][-S&lt;服务类型&gt;][-X&lt;认证形态&gt;][主机名称或IP地址&lt;通信端口&gt;] 1 参数说明：<br>-8 允许使用8位字符资料，包括输入与输出。 -a 尝试自动登入远端系统。 -b&lt;主机别名&gt; 使用别名指定远端主机名称。 -c 不读取用户专属目录里的.telnetrc文件。 -d 启动排错模式。 -e&lt;脱离字符&gt; 设置脱离字符。 -E 滤除脱离字符。 -f 此参数的效果和指定”-F”参数相同。 -F 使用Kerberos V5认证时，加上此参数可把本地主机的认证数据上传到远端主机。 -k&lt;域名&gt; 使用Kerberos认证时，加上此参数让远端主机采用指定的领域名，而非该主机的域名。 -K 不自动登入远端主机。 -l&lt;用户名称&gt; 指定要登入远端主机的用户名称。 -L 允许输出8位字符资料。 -n&lt;记录文件&gt; 指定文件记录相关信息。 -r 使用类似rlogin指令的用户界面。 -S&lt;服务类型&gt; 设置telnet连线所需的IP TOS信息。 -x 假设主机有支持数据加密的功能，就使用它。 -X&lt;认证形态&gt; 关闭指定的认证形态。 实例<br>登录远程主机<br>登录IP为 192.168.0.5 的远程主机<br>telnet 192.168.0.5</li></ul><h6 id="date-命令"><a href="#date-命令" class="headerlink" title="date 命令"></a>date 命令</h6><p>问：date 命令</p><ul><li>答：显示或设定系统的日期与时间。<br>命令参数：<br>-d&lt;字符串&gt; 　显示字符串所指的日期与时间。字符串前后必须加上双引号。 -s&lt;字符串&gt; 　根据字符串来设置日期与时间。字符串前后必须加上双引号。 -u 　显示GMT。 %H 小时(00-23) %I 小时(00-12) %M 分钟(以00-59来表示) %s 总秒数。起算时间为1970-01-01 00:00:00 UTC。 %S 秒(以本地的惯用法来表示) %a 星期的缩写。 %A 星期的完整名称。 %d 日期(以01-31来表示)。 %D 日期(含年月日)。 %m 月份(以01-12来表示)。 %y 年份(以00-99来表示)。 %Y 年份(以四位数来表示)。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 实例：<br>（1）显示下一天<br>date +%Y%m%d —date=”+1 day” //显示下一天的日期 1 （2）-d参数使用<br>date -d “nov 22” 今年的 11 月 22 日是星期三 date -d ‘2 weeks’ 2周后的日期 date -d ‘next monday’ (下周一的日期) date -d next-day +%Y%m%d（明天的日期）或者：date -d tomorrow +%Y%m%d date -d last-day +%Y%m%d(昨天的日期) 或者：date -d yesterday +%Y%m%d date -d last-month +%Y%m(上个月是几月) date -d next-month +%Y%m(下个月是几月)</li></ul><h6 id="free-命令"><a href="#free-命令" class="headerlink" title="free 命令"></a>free 命令</h6><p>问：free 命令</p><ul><li>答：显示系统内存使用情况，包括物理内存、交互区内存(swap)和内核缓冲区内存。<br>命令参数：<br>-b 以Byte显示内存使用情况 -k 以kb为单位显示内存使用情况 -m 以mb为单位显示内存使用情况 -g 以gb为单位显示内存使用情况 -s&lt;间隔秒数&gt; 持续显示内存 -t 显示内存使用总合 1 2 3 4 5 6 实例：<br>（1）显示内存使用情况<br>free free -k free -m 1 2 3 （2）以总和的形式显示内存的使用信息<br>free -t 1 （3）周期性查询内存使用情况<br>free -s 10</li></ul><h6 id="kill-命令"><a href="#kill-命令" class="headerlink" title="kill 命令"></a>kill 命令</h6><p>问：kill 命令</p><ul><li>答：发送指定的信号到相应进程。不指定型号将发送SIGTERM（15）终止指定进程。如果任无法终止该程序可用”-KILL” 参数，其发送的信号为SIGKILL(9) ，将强制结束进程，使用ps命令或者jobs 命令可以查看进程号。root用户将影响用户的进程，非root用户只能影响自己的进程。<br>常用参数：<br>-l 信号，若果不加信号的编号参数，则使用“-l”参数会列出全部的信号名称 -a 当处理当前进程时，不限制命令名和进程号的对应关系 -p 指定kill 命令只打印相关进程的进程号，而不发送任何信号 -s 指定发送信号 -u 指定用户 1 2 3 4 5 实例：<br>（1）先使用ps查找进程pro1，然后用kill杀掉<br>kill -9 $(ps -ef | grep pro1)</li></ul><h6 id="ps-命令"><a href="#ps-命令" class="headerlink" title="ps 命令"></a>ps 命令</h6><p>问：ps 命令</p><ul><li>答：ps(process status)，用来查看当前运行的进程状态，一次性查看，如果需要动态连续结果使用 top<br>linux上进程有5种状态:<br>运行(正在运行或在运行队列中等待)<br>中断(休眠中, 受阻, 在等待某个条件的形成或接受到信号)<br>不可中断(收到信号不唤醒和不可运行, 进程必须等待直到有中断发生)<br>僵死(进程已终止, 但进程描述符存在, 直到父进程调用wait4()系统调用后释放)<br>停止(进程收到SIGSTOP, SIGSTP, SIGTIN, SIGTOU信号后停止运行运行)<br>ps 工具标识进程的5种状态码:<br>D 不可中断 uninterruptible sleep (usually IO) R 运行 runnable (on run queue) S 中断 sleeping T 停止 traced or stopped Z 僵死 a defunct (”zombie”) process 1 2 3 4 5 命令参数：<br>-A 显示所有进程 a 显示所有进程 -a 显示同一终端下所有进程 c 显示进程真实名称 e 显示环境变量 f 显示进程间的关系 r 显示当前终端运行的进程 -aux 显示所有包含其它使用的进程 1 2 3 4 5 6 7 8 实例：<br>（1）显示当前所有进程环境变量及进程间关系<br>ps -ef 1 （2）显示当前所有进程<br>ps -A 1 （3）与grep联用查找某进程<br>ps -aux | grep apache 1 （4）找出与 cron 与 syslog 这两个服务有关的 PID 号码<br>ps aux | grep ‘(cron|syslog)’</li></ul><h6 id="rpm-命令"><a href="#rpm-命令" class="headerlink" title="rpm 命令"></a>rpm 命令</h6><p>问：rpm 命令</p><ul><li>答：Linux rpm 命令用于管理套件。<br>rpm(redhat package manager) 原本是 Red Hat Linux 发行版专门用来管理 Linux 各项套件的程序，由于它遵循 GPL 规则且功能强大方便，因而广受欢迎。逐渐受到其他发行版的采用。RPM 套件管理方式的出现，让 Linux 易于安装，升级，间接提升了 Linux 的适用度。<br>查看系统自带jdk<br>rpm -qa | grep jdk<br>删除系统自带jdk<br>rpm -e —nodeps 查看jdk显示的数据<br>安装jdk<br>rpm -ivh jdk-7u80-linux-x64.rpm</li></ul><h6 id="top-命令"><a href="#top-命令" class="headerlink" title="top 命令"></a>top 命令</h6><p>问：top 命令</p><ul><li>答：显示当前系统正在执行的进程的相关信息，包括进程 ID、内存占用率、CPU 占用率等<br>常用参数：<br>-c 显示完整的进程命令 -s 保密模式 -p &lt;进程号&gt; 指定进程显示 -n &lt;次数&gt;循环显示次数 1 2 3 4 实例：<br>top - 14:06:23 up 70 days, 16:44, 2 users, load average: 1.25, 1.32, 1.35 Tasks: 206 total, 1 running, 205 sleeping, 0 stopped, 0 zombie Cpu(s): 5.9%us, 3.4%sy, 0.0%ni, 90.4%id, 0.0%wa, 0.0%hi, 0.2%si, 0.0%st Mem: 32949016k total, 14411180k used, 18537836k free, 169884k buffers Swap: 32764556k total, 0k used, 32764556k free, 3612636k cached PID USER PR NI VIRT RES SHR S %CPU %MEM TIME+ COMMAND<br> 28894 root 22 0 1501m 405m 10m S 52.2 1.3 2534:16 java<br> 1 2 3 4 5 6 7 前五行是当前系统情况整体的统计信息区。<br>第一行，任务队列信息，同 uptime 命令的执行结果，具体参数说明情况如下：<br>14:06:23 — 当前系统时间<br>up 70 days, 16:44 — 系统已经运行了70天16小时44分钟（在这期间系统没有重启过的吆！）<br>2 users — 当前有2个用户登录系统<br>load average: 1.15, 1.42, 1.44 — load average后面的三个数分别是1分钟、5分钟、15分钟的负载情况。<br>load average数据是每隔5秒钟检查一次活跃的进程数，然后按特定算法计算出的数值。如果这个数除以逻辑CPU的数量，结果高于5的时候就表明系统在超负荷运转了。<br>第二行，Tasks — 任务（进程），具体信息说明如下：<br>系统现在共有206个进程，其中处于运行中的有1个，205个在休眠（sleep），stoped状态的有0个，zombie状态（僵尸）的有0个。<br>第三行，cpu状态信息，具体属性说明如下：<br>5.9%us — 用户空间占用CPU的百分比。 3.4% sy — 内核空间占用CPU的百分比。 0.0% ni — 改变过优先级的进程占用CPU的百分比 90.4% id — 空闲CPU百分比 0.0% wa — IO等待占用CPU的百分比 0.0% hi — 硬中断（Hardware IRQ）占用CPU的百分比 0.2% si — 软中断（Software Interrupts）占用CPU的百分比 1 2 3 4 5 6 7 备注：在这里CPU的使用比率和windows概念不同，需要理解linux系统用户空间和内核空间的相关知识！<br>第四行，内存状态，具体信息如下：<br>32949016k total — 物理内存总量（32GB） 14411180k used — 使用中的内存总量（14GB） 18537836k free — 空闲内存总量（18GB） 169884k buffers — 缓存的内存量 （169M） 1 2 3 4 第五行，swap交换分区信息，具体信息说明如下：<br>32764556k total — 交换区总量（32GB） 0k used — 使用的交换区总量（0K） 32764556k free — 空闲交换区总量（32GB） 3612636k cached — 缓冲的交换区总量（3.6GB） 1 2 3 4 第六行，空行。<br>第七行以下：各进程（任务）的状态监控，项目列信息说明如下：<br>PID — 进程id USER — 进程所有者 PR — 进程优先级 NI — nice值。负值表示高优先级，正值表示低优先级 VIRT — 进程使用的虚拟内存总量，单位kb。VIRT=SWAP+RES RES — 进程使用的、未被换出的物理内存大小，单位kb。RES=CODE+DATA SHR — 共享内存大小，单位kb S — 进程状态。D=不可中断的睡眠状态 R=运行 S=睡眠 T=跟踪/停止 Z=僵尸进程 %CPU — 上次更新到现在的CPU时间占用百分比 %MEM — 进程使用的物理内存百分比 TIME+ — 进程使用的CPU时间总计，单位1/100秒 COMMAND — 进程名称（命令名/命令行） 1 2 3 4 5 6 7 8 9 10 11 12 top 交互命令<br>h 显示top交互命令帮助信息 c 切换显示命令名称和完整命令行 m 以内存使用率排序 P 根据CPU使用百分比大小进行排序 T 根据时间/累计时间进行排序 W 将当前设置写入~/.toprc文件中 o或者O 改变显示项目的顺序</li></ul><h6 id="yum-命令"><a href="#yum-命令" class="headerlink" title="yum 命令"></a>yum 命令</h6><p>问：yum 命令</p><ul><li>答：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">yum（ Yellow dog Updater, Modified）是一个在Fedora和RedHat以及SUSE中的Shell前端软件包管理器。 </span><br><span class="line">基於RPM包管理，能够从指定的服务器自动下载RPM包并且安装，可以自动处理依赖性关系，并且一次安装所有依赖的软体包，无须繁琐地一次次下载、安装。 </span><br><span class="line">yum提供了查找、安装、删除某一个、一组甚至全部软件包的命令，而且命令简洁而又好记。 </span><br><span class="line">1.列出所有可更新的软件清单命令：yum check-update 2.更新所有软件命令：yum update 3.仅安装指定的软件命令：yum install &lt;package_name&gt; 4.仅更新指定的软件命令：yum update &lt;package_name&gt; 5.列出所有可安裝的软件清单命令：yum list 6.删除软件包命令：yum remove &lt;package_name&gt; 7.查找软件包 命令：yum search 8.清除缓存命令: yum clean packages: 清除缓存目录下的软件包 yum clean headers: 清除缓存目录下的 headers yum clean oldheaders: 清除缓存目录下旧的 headers yum clean, yum clean all (= yum clean packages; yum clean oldheaders) :清除缓存目录下的软件包及旧的headers 实例 </span><br><span class="line">安装 pam-devel </span><br><span class="line">[root@www ~]# yum install pam-devel</span><br></pre></td></tr></table></figure><h6 id="bzip2-命令"><a href="#bzip2-命令" class="headerlink" title="bzip2 命令"></a>bzip2 命令</h6><p>问：bzip2 命令</p><ul><li>答：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">创建 *.bz2 压缩文件：bzip2 test.txt 。 解压 *.bz2 文件：bzip2 -d test.txt.bz2 。</span><br></pre></td></tr></table></figure><h6 id="gzip-命令"><a href="#gzip-命令" class="headerlink" title="gzip 命令"></a>gzip 命令</h6><p>问：gzip 命令</p><ul><li>答：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">创建一个 *.gz 的压缩文件：gzip test.txt 。 解压 *.gz 文件：gzip -d test.txt.gz 。 显示压缩的比率：gzip -l *.gz 。</span><br></pre></td></tr></table></figure><h6 id="tar-命令"><a href="#tar-命令" class="headerlink" title="tar 命令"></a>tar 命令</h6><p>问：tar 命令</p><ul><li>答：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">用来压缩和解压文件。tar 本身不具有压缩功能，只具有打包功能，有关压缩及解压是调用其它的功能来完成。 </span><br><span class="line">弄清两个概念：打包和压缩。打包是指将一大堆文件或目录变成一个总的文件；压缩则是将一个大的文件通过一些压缩算法变成一个小文件 </span><br><span class="line">常用参数： </span><br><span class="line">-c 建立新的压缩文件 -f 指定压缩文件 -r 添加文件到已经压缩文件包中 -u 添加改了和现有的文件到压缩包中 -x 从压缩包中抽取文件 -t 显示压缩文件中的内容 -z 支持gzip压缩 -j 支持bzip2压缩 -Z 支持compress解压文件 -v 显示操作过程 1 2 3 4 5 6 7 8 9 10 有关 gzip 及 bzip2 压缩: </span><br><span class="line">gzip 实例：压缩 gzip fileName .tar.gz 和.tgz 解压：gunzip filename.gz 或 gzip -d filename.gz 对应：tar zcvf filename.tar.gz tar zxvf filename.tar.gz </span><br><span class="line">bz2实例：压缩 bzip2 -z filename .tar.bz2 解压：bunzip filename.bz2或bzip -d filename.bz2 对应：tar jcvf filename.tar.gz 解压：tar jxvf filename.tar.bz2 1 2 3 4 5 实例： </span><br><span class="line">（1）将文件全部打包成 tar 包 </span><br><span class="line">tar -cvf log.tar 1.log,2.log 或tar -cvf log.* 1 （2）将 /etc 下的所有文件及目录打包到指定目录，并使用 gz 压缩 </span><br><span class="line">tar -zcvf /tmp/etc.tar.gz /etc 1 （3）查看刚打包的文件内容（一定加z，因为是使用 gzip 压缩的） </span><br><span class="line">tar -ztvf /tmp/etc.tar.gz 1 （4）要压缩打包 /home, /etc ，但不要 /home/dmtsai </span><br><span class="line">tar --exclude /home/dmtsai -zcvf myfile.tar.gz /home/* /etc</span><br></pre></td></tr></table></figure><h6 id="unzip-命令"><a href="#unzip-命令" class="headerlink" title="unzip 命令"></a>unzip 命令</h6><p>问：unzip 命令</p><ul><li>答：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">解压 *.zip 文件：unzip test.zip 。 查看 *.zip 文件的内容：unzip -l jasper.zip 。</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;简介：&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://shang.at/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://shang.at/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>java学习-基础2-Class的加载过程</title>
    <link href="https://shang.at/post/java%E5%AD%A6%E4%B9%A0-%E5%9F%BA%E7%A1%802-Class%E7%9A%84%E5%8A%A0%E8%BD%BD%E8%BF%87%E7%A8%8B/"/>
    <id>https://shang.at/post/java学习-基础2-Class的加载过程/</id>
    <published>2020-08-24T22:54:32.000Z</published>
    <updated>2020-12-11T08:21:15.043Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>简介：</p></blockquote><a id="more"></a><h2 id="Class加载过程"><a href="#Class加载过程" class="headerlink" title="Class加载过程"></a>Class加载过程</h2><p><img src="/images/image-20200825065819603.png" alt="image-20200825065819603"></p><ol><li><p>Loading</p><ol><li>双亲委派，主要出于安全来考虑</li><li>LazyLoading 五种情况<ol><li>new getstatic putstatic invokestatic指令，访问final变量除外</li><li>java.lang.reflect对类进行反射调用时</li><li>初始化子类的时候，父类首先初始化</li><li>虚拟机启动时，被执行的主类必须初始化</li><li>动态语言支持java.lang.invoke.MethodHandle解析的结果为REF_getstatic REF_putstatic REF_invokestatic的方法句柄时，该类必须初始化</li></ol></li><li><p>ClassLoader的源码</p><ol><li>findInCache -&gt; parent.loadClass -&gt; findClass()</li></ol></li><li><p>自定义类加载器</p><ol><li>extends ClassLoader</li><li>overwrite findClass() -&gt; defineClass(byte[] -&gt; Class clazz)</li><li>加密</li><li><font color="red">第一节课遗留问题：parent是如何指定的，打破双亲委派，学生问题桌面图片</font><ol><li>用super(parent)指定</li><li>双亲委派的打破<ol><li>如何打破：重写loadClass（）</li><li>何时打破过？<ol><li>JDK1.2之前，自定义ClassLoader都必须重写loadClass()</li><li>ThreadContextClassLoader可以实现基础类调用实现类代码，通过thread.setContextClassLoader指定</li><li>热启动，热部署<ol><li>osgi tomcat 都有自己的模块指定classloader（可以加载同一类库的不同版本）</li></ol></li></ol></li></ol></li></ol></li></ol></li><li><p>混合执行 编译执行 解释执行</p><ol><li>检测热点代码：-XX:CompileThreshold = 10000</li></ol></li></ol><ol><li><p>Linking </p><ol><li>Verification<ol><li>验证文件是否符合JVM规定</li></ol></li><li>Preparation<ol><li>静态成员变量赋默认值</li></ol></li><li>Resolution<ol><li>将类、方法、属性等符号引用解析为直接引用<br>常量池中的各种符号引用解析为指针、偏移量等内存地址的直接引用</li></ol></li></ol></li><li><p>Initializing</p><ol><li>调用类初始化代码 <code>&lt;clinit&gt;</code>，给静态成员变量赋初始值</li></ol></li></ol></li></ol><h3 id="ClassLoader"><a href="#ClassLoader" class="headerlink" title="ClassLoader"></a>ClassLoader</h3><p><img src="/images/image-20200825070000817.png" alt="image-20200825070000817"></p><p>任何一个Class被load到内存中实际上生成了两块内容：</p><ol><li>class文件的二进制内容被放置到内存的一块区域<em>[Metaspace(1.8及以后)/PermGen(1.7及以前)]</em></li><li>同时<em>[在堆内]</em>生成了一个class类型的对象，指向该区域</li></ol><p>其他的对象通过获取class类型对象的实例来访问class文件的内容</p><p>双亲委派的继承关系和父子关系，父加载器和子加载器没有继承关系，parent是在创建的时候指定的。ClassLoader有一个默认的无参的构造器，它会自动找到SystemClassLoader设置为自定义加载器的parent(SystemClassLoader默认为AppClassLoader)</p><p><img src="/images/image-20200825081056404.png" alt="image-20200825081056404"></p><p>什么叫做双亲委派：表示是一个从低到顶的过程和从顶到底的过程</p><p>下图是双亲委派的过程</p><p><img src="/images/image-20200825072506689.png" alt="image-20200825072506689"></p><p>为什么需要双亲委派？</p><ol><li><p>安全问题，比如不能让用户自定义加载器加载<code>java.lang.String</code>类型，可能带来安全问题。</p></li><li><p>防止重复加载</p></li></ol><p>双亲委派的模式为什么能够避免安全问题？</p><p>双亲委派把逻辑设计成了模板方法，即将整体流程规定死了，只将特定的步骤暴露给用户重写。这样的设计会保证classloader会先去parent加载器询问待加载的类是否已经被加载过，一直询问到Bootstrap Loader，如果每一层都返回空，那么返回子加载器，如果被加载过直接返回，否则抛出ClassNotFoundException异常</p><p><img src="/images/image-20200825083133730.png" alt="image-20200825083133730"></p><p>热加载原理：需要监测class文件的变化，如果发生变化，那么重新loading该class文件。<font color="red">其他的实例对象如何更新呢？还是会自动更新？</font></p><p>要实现reloading，需要满足以下两个条件：</p><ul><li><p>重写ClassLoader的loadClass方法，打破双亲委派机制</p></li><li><p>每次reload，都需要重新new一个ClassLoader出来，使用原来的ClassLoader对象进行loadClass会抛出<code>LinkageError</code>，表示不能reload重名的class</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Exception in thread "main" java.lang.LinkageError: loader (instance of  com/mashibing/jvm/c2_classloader/T012_ClassReloading2$MyLoader): attempted  duplicate class definition for name: "com/mashibing/jvm/Hello"</span><br><span class="line">at java.lang.ClassLoader.defineClass1(Native Method)</span><br><span class="line">at java.lang.ClassLoader.defineClass(ClassLoader.java:<span class="number">763</span>)</span><br><span class="line">at java.lang.ClassLoader.defineClass(ClassLoader.java:<span class="number">642</span>)</span><br><span class="line">at com.mashibing.jvm.c2_classloader.T012_ClassReloading2$MyLoader.loadClass(T012_ClassReloading2.java:<span class="number">25</span>)</span><br><span class="line">at com.mashibing.jvm.c2_classloader.T012_ClassReloading2.main(T012_ClassReloading2.java:<span class="number">40</span>)</span><br></pre></td></tr></table></figure><p>最终loadClass会一直调用到一个native的defineClass方法，在那里会检测同一个ClassLoader的load class的缓存.</p></li></ul><h3 id="LazyLoading"><a href="#LazyLoading" class="headerlink" title="LazyLoading"></a>LazyLoading</h3><p><img src="/images/image-20200826075917762.png" alt="image-20200826075917762"></p><h3 id="执行模式"><a href="#执行模式" class="headerlink" title="执行模式"></a>执行模式</h3><p><img src="/images/image-20200826080319497.png" alt="image-20200826080319497"></p><h2 id="Linking"><a href="#Linking" class="headerlink" title="Linking"></a>Linking</h2><ol><li><p>Verification</p><ol><li>验证文件是否符合JVM规定，检测class文件的格式以及内容是否符合class file format</li></ol></li><li><p>Preparation</p><ol><li>静态成员变量赋默认值</li></ol></li><li><p>Resolution</p><ol><li>将类、方法、属性等符号引用解析为直接引用<br>常量池中的各种符号引用解析为指针、偏移量等内存地址的直接引用</li></ol><p>在Class File Format中我们知道，一个类文件中会记录了很多内容，其中包含fields信息，method信息，当前类信息，父类信息等。就拿记录的<code>super_class</code>这一项来说，一个没有明确声明的类肯定继承了Object，那么实际上<code>super_class</code>这一项是指向了常量池的某一条，而常量池的对应的那条记录是记录的<code>Ljava/lang/Object</code>这样的字符串，而在<code>Runtime</code>(运行时)，<code>Ljava/lang/Object</code>实际上是位于内存的某一个位置(Metaspace)，所谓的<code>Resolution</code>就是把<code>super_class</code>的这种<code>字面引用</code>转换成<code>指向内存某个地址</code>的直接引用</p></li></ol><h2 id="Initializing"><a href="#Initializing" class="headerlink" title="Initializing"></a>Initializing</h2><p>调用类初始化代码 <code>&lt;clinit&gt;</code>，给静态成员变量赋初始值</p><p>有一个非常有意思的情况，可以使用class的加载过程来解释：</p><p>代码一</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T001_ClassLoadingProcedure</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(T.count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">T</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> T t = <span class="keyword">new</span> T(); <span class="comment">// null</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> count = <span class="number">2</span>; <span class="comment">//0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//private int m = 8;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">T</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        count ++;</span><br><span class="line">        <span class="comment">//System.out.println("--" + count);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印结果： 2</span></span><br></pre></td></tr></table></figure><p>代码二</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T001_ClassLoadingProcedure</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(T.count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">T</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> count = <span class="number">2</span>; <span class="comment">//0</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> T t = <span class="keyword">new</span> T(); <span class="comment">// null</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//private int m = 8;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">T</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        count ++;</span><br><span class="line">        <span class="comment">//System.out.println("--" + count);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印结果：3</span></span><br></pre></td></tr></table></figure><p>执行结束会发现上述两个代码的结果是不一样的，可以使用class的加载过程来解释：</p><p>loading-&gt;linking(其中preparation：静态成员变量赋默认值)-&gt;initializing(调用类初始化代码 <code>&lt;clinit&gt;</code>，给静态成员变量赋初始值)</p><ul><li>代码一：在linking-preparation阶段t=null；count=0，由于<code>public static T t = new T();</code>在前，所以会先执行它，那么就会执行new T()的过程，就会执行T的构造方法，那么此时count还是0，因此count++并没有生效，给count赋初始值之后，就把它给覆盖了，所以最终打印的count是2</li><li>代码二：这里<code>public static int count = 2;</code>在前，故会先给count的赋初始值2，然后执行new T()，count++是作用在了初始化之后的count上，故最终打印结果是3.</li></ul><p>拓展：new一个对象的过程，也会分为两个阶段</p><ol><li>开辟内存空间，这里会给成员变量赋默认值</li><li>给成员变量赋初始值</li></ol><p>这里会牵扯到一个对象初始化过程中的<code>CPU乱序执行</code>的情况，DCL</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;简介：&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="JAVA学习" scheme="https://shang.at/categories/JAVA%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Class的加载过程" scheme="https://shang.at/tags/Class%E7%9A%84%E5%8A%A0%E8%BD%BD%E8%BF%87%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>数据结构与算法-左神学习笔记-高级5-Manacher算法及其扩展</title>
    <link href="https://shang.at/post/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-%E5%B7%A6%E7%A5%9E%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E9%AB%98%E7%BA%A75-Manacher%E7%AE%97%E6%B3%95%E5%8F%8A%E5%85%B6%E6%89%A9%E5%B1%95/"/>
    <id>https://shang.at/post/数据结构与算法-左神学习笔记-高级5-Manacher算法及其扩展/</id>
    <published>2020-08-19T07:55:51.000Z</published>
    <updated>2020-08-20T00:16:13.907Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>简介：</p></blockquote><a id="more"></a><p>算法引子：计算一个字符串中的最大回文串的长度</p><p>什么是回文串：单个字符是回文串，’aba’是回文串，’aa’是回文串</p><p>暴力解求解：遍历字符串，寻找以每个字符为中心的所有回文子串。</p><p>时间复杂度是：<script type="math/tex">O(N^2)</script></p><p>需要注意的点是回文串中有偶数个字符没法获取到，所以需要将原始字符串进行修改，开头和结尾以及每两个字符之间都插入一个辅助字符</p><p>暴力解法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>经历了暴力解法之后，Manacher闪亮登场，可以在<script type="math/tex">O(N)</script>的时间复杂度内解决该问题</p><p>概念：</p><ol><li><p>回文半径、直径、区域</p><p>字符串为f#1#a#1#s，则以a为中心：回文直径为7，半径为4</p></li><li><p>回文半径数组，pArr[]</p><p>将每个字符为中心的回文子串的长度记录下来 放到pArr</p></li><li><p>回文最右右边界 R，初始值为-1</p><p>从左往右遍历字符串的时候，构成回文子串的最后边界的位置，如：#1#2#2#1#这个字符串，遍历到第一个位置时，R为0，因为#只有这一个字符；遍历到第二个字符的时候，R为2，因为从第二个字符可以往前往后扩</p></li><li><p>中心 C，初始值为-1</p><p>从左往右遍历字符串的时候，构成回文子串的中心位置，如：#1#2#2#1#这个字符串，遍历到第一个位置时，C为0，遍历到第二个字符的时候，C为1</p></li></ol><p>Manacher就是基于这些概念的</p><p>假设有个字符串：#1#2#2#1#，长度为9，则pArr[9]， R=-1, C=-1</p><p>遍历到i个字符时，分为以下的情况：</p><ol><li><p>i在R外，含义是：位置i大于R</p><p>比如，初始情况下，i从0开始遍历，R=-1，这时0&gt;-1，表示i在R外</p><p>这种情况下，只能以i位置为中心，向两侧扩展，无法加速</p></li><li><p>i在R内，含义是：位置i小于等于R</p><p>那么一定会有如下的关系存在：</p><ol><li><p>C&lt;i&lt;=R，且存在一个以C为中心的对称点i’，如下图</p><p><img src="/Users/wangshang/wordspace/ws-hexo/source/images/image-20200819171506230.png" alt="image-20200819171506230"></p></li><li><p>i存在一个以C为中心的对称点i’</p><p>讨论i’的位置情况：</p><ol><li><p>以i’为中心的回文子串完全落在L…R之内：那么i位置的回文子串长度与i’一样</p><p><img src="/Users/wangshang/wordspace/ws-hexo/source/images/image-20200819170249763.png" alt="image-20200819170249763"></p><p>证明：</p></li><li><p>以i’为中心的回文子串的左边界落在了L的左侧：i位置为中心的回文子串的回文半径为R-i，则其长度为2*(R-i)+1</p><p><img src="/Users/wangshang/wordspace/ws-hexo/source/images/image-20200819170135749.png" alt="image-20200819170135749"></p><p>证明：</p></li><li><p>以i’为中心的回文子串的左边界正好落在L上：以i为中心的回文子串，需要从问号处继续向后扩，如果扩成功，同时更新R和C</p><p><img src="/Users/wangshang/wordspace/ws-hexo/source/images/image-20200819170959131.png" alt="image-20200819170959131"></p><p>证明：</p></li></ol></li></ol></li></ol><p>伪代码：</p><p><img src="/Users/wangshang/wordspace/ws-hexo/source/images/image-20200819172642742.png" alt="image-20200819172642742"></p><p>时间复杂度的估计：把复杂度的估算绑定到R的变化上</p><p><img src="/Users/wangshang/wordspace/ws-hexo/source/images/image-20200819172308896.png" alt="image-20200819172308896"></p><p>延伸的问题：给定一个字符串str，要求给str后面补上一些字符串，要求补完的字符串整体四回文，问最少需要添加的字符串的个数。</p><p>思路：利用Manacher计算出来第一个包含最右字符的回文子串的回文半径和中心，然后将字符串补齐即可，如下图：<img src="/Users/wangshang/wordspace/ws-hexo/source/images/image-20200820081606445.png" alt="image-20200820081606445"></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;简介：&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>数据结构与算法-左神学习笔记-公开课一</title>
    <link href="https://shang.at/post/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-%E5%B7%A6%E7%A5%9E%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%85%AC%E5%BC%80%E8%AF%BE%E4%B8%80/"/>
    <id>https://shang.at/post/数据结构与算法-左神学习笔记-公开课一/</id>
    <published>2020-08-12T08:00:42.000Z</published>
    <updated>2020-08-12T08:09:19.493Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>简介：</p></blockquote><a id="more"></a><h4 id="题目一"><a href="#题目一" class="headerlink" title="题目一"></a>题目一</h4><p>给定一个有序数组arr，arr[i]表示i号点在x轴上的位置，<br>所以整个arr表示一些点在x轴上从左往右的分布，<br>给定一个正数len，表示绳子的长度，<br>返回绳子最多能覆盖几个点？</p><p>一、暴力解  <script type="math/tex">O(n^2)</script></p><p>二、二分法<script type="math/tex">O(N logN)</script></p><p>三、<script type="math/tex">O(N)</script></p><h4 id="题目二"><a href="#题目二" class="headerlink" title="题目二"></a>题目二</h4><p><img src="/Users/wangshang/wordspace/ws-hexo/source/images/image-20200812160703712.png" alt="image-20200812160703712"></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;简介：&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>工具使用-编译工具-sbt</title>
    <link href="https://shang.at/post/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8-%E7%BC%96%E8%AF%91%E5%B7%A5%E5%85%B7-sbt/"/>
    <id>https://shang.at/post/工具使用-编译工具-sbt/</id>
    <published>2020-08-09T15:07:24.000Z</published>
    <updated>2020-09-07T07:35:35.398Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>简介：使用sbt编译Scala项目</p></blockquote><a id="more"></a><p><em>SBT</em> 是Scala 的构建工具，全称是Simple Build Tool， 类似Maven 或Gradle。</p><h3 id="搭建一个SBT项目"><a href="#搭建一个SBT项目" class="headerlink" title="搭建一个SBT项目"></a>搭建一个SBT项目</h3><p>目录结构：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">这是一个SBT项目的最简单的结构：</span><br><span class="line">atome-sg-apaylater-nightly-data-warehouse/</span><br><span class="line">data-warehouse-core/</span><br><span class="line">src/</span><br><span class="line">main/</span><br><span class="line">scala/</span><br><span class="line">java/</span><br><span class="line">resources/</span><br><span class="line">test/</span><br><span class="line">prject/</span><br><span class="line">build.properties</span><br><span class="line">plugins.sbt</span><br><span class="line">build.sbt</span><br></pre></td></tr></table></figure><p>java语言和scala语言都是基于class的，都可以运行在JVM上，故在项目可以同时使用java语言和scala语言。</p><p>下面罗列一下相关的配置文件：</p><blockquote><p>build.sbt</p></blockquote><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sbt.<span class="type">Keys</span>.dependencyOverrides</span><br><span class="line"></span><br><span class="line"><span class="comment">// https://docs.aws.amazon.com/emr/latest/ReleaseGuide/images/emr-releases-5x.png</span></span><br><span class="line"><span class="keyword">val</span> emrMajorVersion = <span class="string">"5.24"</span></span><br><span class="line"><span class="keyword">val</span> scalaFullVersion = <span class="string">"2.11.12"</span></span><br><span class="line"><span class="keyword">val</span> scalaMajorVersion = <span class="string">"2.11"</span></span><br><span class="line"><span class="keyword">val</span> sparkVersion = <span class="string">"2.4.2"</span></span><br><span class="line"><span class="keyword">val</span> hadoopVersion = <span class="string">"2.8.5"</span></span><br><span class="line"><span class="keyword">val</span> dataConsolidationRootVersion = <span class="string">"1.0.0"</span></span><br><span class="line"><span class="keyword">val</span> dataConsolidationCoreVersion = <span class="string">"1.0.0"</span></span><br><span class="line"><span class="keyword">val</span> dataOrganization = <span class="string">"ai.advance"</span></span><br><span class="line"><span class="keyword">val</span> pureconfigVersion = <span class="string">"0.10.0"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> commonSetting = <span class="type">Seq</span>(</span><br><span class="line">  compileOrder := <span class="type">CompileOrder</span>.<span class="type">JavaThenScala</span>,</span><br><span class="line">  libraryDependencies ++= <span class="type">Seq</span>(</span><br><span class="line">    <span class="string">"org.scalatest"</span> %% <span class="string">"scalatest"</span> % <span class="string">"3.2.0-SNAP10"</span> % <span class="string">"test"</span>,</span><br><span class="line">    <span class="string">"org.scalamock"</span> %% <span class="string">"scalamock-scalatest-support"</span> % <span class="string">"3.6.0"</span> % <span class="string">"test"</span></span><br><span class="line">  )</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> assemblySetting = <span class="type">Seq</span>(</span><br><span class="line">  assemblyOption in assembly := (assemblyOption in assembly).value.copy(includeScala = <span class="literal">false</span>),</span><br><span class="line">  assemblyJarName in assembly := <span class="string">s"<span class="subst">$&#123;name.value&#125;</span>_<span class="subst">$scalaMajorVersion</span>-<span class="subst">$&#123;version.value&#125;</span>-emr_<span class="subst">$&#123;emrMajorVersion&#125;</span>.jar"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">lazy</span> <span class="keyword">val</span> core =</span><br><span class="line">  (project in file(<span class="string">"data-warehouse-core"</span>)).settings(</span><br><span class="line">    commonSetting</span><br><span class="line">  ).settings(</span><br><span class="line">    name := <span class="string">"atome-sg-apaylater-nightly-data-warehouse"</span>,</span><br><span class="line">    organization := dataOrganization,</span><br><span class="line">    version := dataConsolidationCoreVersion,</span><br><span class="line">    scalaVersion := scalaFullVersion,</span><br><span class="line">    test in assembly := &#123;&#125;,</span><br><span class="line">    libraryDependencies ++= <span class="type">Seq</span>(</span><br><span class="line">      <span class="string">"org.apache.spark"</span> % <span class="string">s"spark-core_<span class="subst">$&#123;scalaMajorVersion&#125;</span>"</span> % sparkVersion % <span class="string">"provided"</span>,</span><br><span class="line">      <span class="string">"org.apache.spark"</span> % <span class="string">s"spark-sql_<span class="subst">$&#123;scalaMajorVersion&#125;</span>"</span> % sparkVersion % <span class="string">"provided"</span>,</span><br><span class="line">      <span class="string">"org.scalacheck"</span> %% <span class="string">"scalacheck"</span> % <span class="string">"1.13.5"</span> % <span class="string">"provided"</span>,</span><br><span class="line">      <span class="string">"mysql"</span> % <span class="string">"mysql-connector-java"</span> % <span class="string">"5.1.38"</span> % <span class="string">"provided"</span>,</span><br><span class="line">      <span class="string">"com.github.pureconfig"</span> %% <span class="string">"pureconfig"</span> % pureconfigVersion % <span class="string">"provided"</span>,</span><br><span class="line">      <span class="string">"com.typesafe.play"</span> %% <span class="string">"play-json"</span> % <span class="string">"2.6.9"</span> % <span class="string">"provided"</span></span><br><span class="line">    ),</span><br><span class="line">    dependencyOverrides += <span class="string">"com.fasterxml.jackson.core"</span> % <span class="string">"jackson-databind"</span> % <span class="string">"2.6.7"</span> % <span class="string">"provided"</span></span><br><span class="line">  ).settings(</span><br><span class="line">    assemblySetting</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line"><span class="keyword">lazy</span> <span class="keyword">val</span> root = (project in file(<span class="string">"."</span>)).</span><br><span class="line">  settings(</span><br><span class="line">    name := <span class="string">"data-warehouse-root"</span>,</span><br><span class="line">    organization := dataOrganization,</span><br><span class="line">    version := dataConsolidationRootVersion,</span><br><span class="line">    scalaVersion := scalaFullVersion</span><br><span class="line">  ).disablePlugins(sbtassembly.<span class="type">AssemblyPlugin</span>)</span><br><span class="line">  .aggregate(core)</span><br></pre></td></tr></table></figure><blockquote><p>build.properties</p></blockquote><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sbt.version = <span class="number">0.13</span><span class="number">.18</span></span><br></pre></td></tr></table></figure><blockquote><p>plugins.sbt</p></blockquote><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">logLevel := <span class="type">Level</span>.<span class="type">Warn</span></span><br><span class="line">addSbtPlugin(<span class="string">"com.eed3si9n"</span> % <span class="string">"sbt-assembly"</span> % <span class="string">"0.14.6"</span>)</span><br></pre></td></tr></table></figure><p>其中最主要的配置文件是build.sbt，</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;简介：使用sbt编译Scala项目&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
