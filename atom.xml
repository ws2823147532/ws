<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>努力，奋斗</title>
  
  <subtitle>记录学习</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://shang.at/"/>
  <updated>2020-07-24T10:53:51.375Z</updated>
  <id>https://shang.at/</id>
  
  <author>
    <name>王尚</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>工具使用-编译工具-maven</title>
    <link href="https://shang.at/post/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8-%E7%BC%96%E8%AF%91%E5%B7%A5%E5%85%B7-maven/"/>
    <id>https://shang.at/post/工具使用-编译工具-maven/</id>
    <published>2020-07-24T10:06:19.000Z</published>
    <updated>2020-07-24T10:53:51.375Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>简介：</p></blockquote><a id="more"></a><h3 id="maven配置"><a href="#maven配置" class="headerlink" title="maven配置"></a>maven配置</h3><h4 id="settings"><a href="#settings" class="headerlink" title="settings"></a>settings</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--需要改成自己的maven的本地仓库地址--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>~/.m2/repository<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">mirrors</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>alimaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">name</span>&gt;</span>local private nexus<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.oschina.net/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">releases</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">name</span>&gt;</span>local private nexus<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.oschina.net/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">releases</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure><p>localRepository</p><p>​    本地maven仓库路径</p><p>pluginGroups</p><p>proxies</p><p>​    代理设置</p><p>servers</p><p>mirrors</p><p>profiles</p><p>activeProfiles</p><h4 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h4><h3 id="maven的常见命令"><a href="#maven的常见命令" class="headerlink" title="maven的常见命令"></a>maven的常见命令</h3><p>项目编译：<code>mvn clean package -Dmaven.test.skip</code></p><p>使用指定的setting.xml文件：<code>mvn clean package --settings ~/.m2/settings.xml.fast -Dmaven.test.skip</code></p><p>收集项目所依赖的lib：<code>mvn dependency:copy-dependencies -DoutputDirectory=lib</code></p><p>下载源码：<code>mvn dependency:sources</code></p><h3 id="将jar包安装到本地仓库"><a href="#将jar包安装到本地仓库" class="headerlink" title="将jar包安装到本地仓库"></a>将jar包安装到本地仓库</h3><p><code>mvn install:install-file -Dfile=... -DgroupId=... -DartifactId=... -Dversion=... -Dpackaging=jar</code></p><p>如：<code>mvn install:install-file -Dfile=IKAnalyzer2012_FF.jar -DgroupId=org.wltea.ik-analyzer -DartifactId=ik-analyzer -Dversion=5.0.0 -Dpackaging=jar</code></p><h3 id="将jar包发布到私服"><a href="#将jar包发布到私服" class="headerlink" title="将jar包发布到私服"></a>将jar包发布到私服</h3><p><code>mvn deploy:deploy-file -DgroupId=... -DartifactId=... -Dversion=... -Dgenertatepom=true -Dpackaging=jar  -Dfile=...  -Durl=...</code></p><p><code>mvn deploy:deploy-file --settings ~/.m2/settings.xml -DgroupId=sqlline -DartifactId=sqlline -Dversion=1.1.8 -Dgenertatepom=true -Dpackaging=jar  -Dfile=/Users/wangshang/.m2/repository/sqlline/sqlline/1.1.8/sqlline-1.1.8.jar -Durl=... -DrepositoryId=archiva.internal</code></p><p>如果是本地项目打包上传需要到私服，需要在pom.xml文件和maven的settings.xml配置文件中做类似如下的配置：</p><p>pom.xml   配置要上传的私服地址</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">distributionManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>archiva.internal<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>Internal Release Repository<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">url</span>&gt;</span>...<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">snapshotRepository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>archiva.snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>Internal Snapshot Repository<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>...<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">snapshotRepository</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">distributionManagement</span>&gt;</span></span><br></pre></td></tr></table></figure><p>settings.xml 配置私服的认证信息</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>archiva.internal<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">username</span>&gt;</span>...<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">password</span>&gt;</span>...<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>archiva.snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">username</span>&gt;</span>...<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">password</span>&gt;</span>...<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servers</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;简介：&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="工具使用" scheme="https://shang.at/categories/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/"/>
    
    
      <category term="maven" scheme="https://shang.at/tags/maven/"/>
    
  </entry>
  
  <entry>
    <title>数据结构与算法-左神学习笔记12-暴力递归到动态规划1-4</title>
    <link href="https://shang.at/post/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-%E5%B7%A6%E7%A5%9E%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B012-%E6%9A%B4%E5%8A%9B%E8%A7%84%E5%88%92%E5%88%B0%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%921-4/"/>
    <id>https://shang.at/post/数据结构与算法-左神学习笔记12-暴力规划到动态规划1-4/</id>
    <published>2020-07-23T04:19:14.000Z</published>
    <updated>2020-07-23T06:00:30.532Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>简介：</p></blockquote><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;简介：&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="数据结构与算法" scheme="https://shang.at/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="左神学习笔记" scheme="https://shang.at/tags/%E5%B7%A6%E7%A5%9E%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>数据结构与算法-左神学习笔记11-动态规划</title>
    <link href="https://shang.at/post/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-%E5%B7%A6%E7%A5%9E%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B011-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    <id>https://shang.at/post/数据结构与算法-左神学习笔记11-动态规划/</id>
    <published>2020-07-23T04:18:52.000Z</published>
    <updated>2020-07-23T06:00:26.672Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>简介：</p></blockquote><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;简介：&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="数据结构与算法" scheme="https://shang.at/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="左神学习笔记" scheme="https://shang.at/tags/%E5%B7%A6%E7%A5%9E%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>数据结构与算法-左神学习笔记10-暴力递归</title>
    <link href="https://shang.at/post/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-%E5%B7%A6%E7%A5%9E%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B010-%E6%9A%B4%E5%8A%9B%E9%80%92%E5%BD%92/"/>
    <id>https://shang.at/post/数据结构与算法-左神学习笔记10-暴力递归/</id>
    <published>2020-07-23T04:18:43.000Z</published>
    <updated>2020-07-23T06:00:24.432Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>简介：</p></blockquote><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;简介：&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="数据结构与算法" scheme="https://shang.at/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="左神学习笔记" scheme="https://shang.at/tags/%E5%B7%A6%E7%A5%9E%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>数据结构与算法-左神学习笔记9-并查集&amp;图</title>
    <link href="https://shang.at/post/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-%E5%B7%A6%E7%A5%9E%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B09-%E5%B9%B6%E6%9F%A5%E9%9B%86-%E5%9B%BE/"/>
    <id>https://shang.at/post/数据结构与算法-左神学习笔记9-并查集-图/</id>
    <published>2020-07-23T04:18:31.000Z</published>
    <updated>2020-07-23T06:00:21.358Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>简介：</p></blockquote><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;简介：&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="数据结构与算法" scheme="https://shang.at/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="左神学习笔记" scheme="https://shang.at/tags/%E5%B7%A6%E7%A5%9E%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>数据结构与算法-左神学习笔记8-贪心算法</title>
    <link href="https://shang.at/post/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-%E5%B7%A6%E7%A5%9E%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B08-%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/"/>
    <id>https://shang.at/post/数据结构与算法-左神学习笔记8-贪心算法/</id>
    <published>2020-07-23T04:18:15.000Z</published>
    <updated>2020-07-23T06:00:18.411Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>简介：</p></blockquote><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;简介：&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="数据结构与算法" scheme="https://shang.at/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="左神学习笔记" scheme="https://shang.at/tags/%E5%B7%A6%E7%A5%9E%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>数据结构与算法-左神学习笔记7-二叉树的递归套路</title>
    <link href="https://shang.at/post/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-%E5%B7%A6%E7%A5%9E%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B07-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%80%92%E5%BD%92%E5%A5%97%E8%B7%AF/"/>
    <id>https://shang.at/post/数据结构与算法-左神学习笔记7-二叉树的递归套路/</id>
    <published>2020-07-23T04:18:05.000Z</published>
    <updated>2020-07-23T06:00:15.894Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>简介：</p></blockquote><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;简介：&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="数据结构与算法" scheme="https://shang.at/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="左神学习笔记" scheme="https://shang.at/tags/%E5%B7%A6%E7%A5%9E%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>数据结构与算法-左神学习笔记6-链表相关面试题</title>
    <link href="https://shang.at/post/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-%E5%B7%A6%E7%A5%9E%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B06-%E9%93%BE%E8%A1%A8%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <id>https://shang.at/post/数据结构与算法-左神学习笔记6-链表相关面试题/</id>
    <published>2020-07-23T04:17:43.000Z</published>
    <updated>2020-07-24T10:06:39.139Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>简介：</p></blockquote><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;简介：&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="数据结构与算法" scheme="https://shang.at/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="左神学习笔记" scheme="https://shang.at/tags/%E5%B7%A6%E7%A5%9E%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>数据结构与算法-左神学习笔记5-Trie&amp;桶排序&amp;排序总结</title>
    <link href="https://shang.at/post/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-%E5%B7%A6%E7%A5%9E%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B05-Trie-%E6%A1%B6%E6%8E%92%E5%BA%8F-%E6%8E%92%E5%BA%8F%E6%80%BB%E7%BB%93/"/>
    <id>https://shang.at/post/数据结构与算法-左神学习笔记5-Trie-桶排序-排序总结/</id>
    <published>2020-07-23T04:17:29.000Z</published>
    <updated>2020-07-23T06:00:10.925Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>简介：</p></blockquote><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;简介：&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="数据结构与算法" scheme="https://shang.at/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="左神学习笔记" scheme="https://shang.at/tags/%E5%B7%A6%E7%A5%9E%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>数据结构与算法-左神学习笔记4-比较器&amp;堆</title>
    <link href="https://shang.at/post/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-%E5%B7%A6%E7%A5%9E%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B04-%E6%AF%94%E8%BE%83%E5%99%A8-%E5%A0%86/"/>
    <id>https://shang.at/post/数据结构与算法-左神学习笔记4-比较器-堆/</id>
    <published>2020-07-23T04:17:04.000Z</published>
    <updated>2020-07-23T06:00:08.521Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>简介：</p></blockquote><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;简介：&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="数据结构与算法" scheme="https://shang.at/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="左神学习笔记" scheme="https://shang.at/tags/%E5%B7%A6%E7%A5%9E%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>数据结构与算法-左神学习笔记3-归并&amp;随机快排</title>
    <link href="https://shang.at/post/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-%E5%B7%A6%E7%A5%9E%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B03-%E5%BD%92%E5%B9%B6-%E9%9A%8F%E6%9C%BA%E5%BF%AB%E6%8E%92/"/>
    <id>https://shang.at/post/数据结构与算法-左神学习笔记3-归并-随机快排/</id>
    <published>2020-07-23T04:16:44.000Z</published>
    <updated>2020-07-23T06:00:06.044Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>简介：</p></blockquote><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;简介：&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="数据结构与算法" scheme="https://shang.at/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="左神学习笔记" scheme="https://shang.at/tags/%E5%B7%A6%E7%A5%9E%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>数据结构与算法-左神学习笔记2-链表&amp;栈&amp;队列&amp;递归&amp;哈希表</title>
    <link href="https://shang.at/post/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-%E5%B7%A6%E7%A5%9E%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02-%E9%93%BE%E8%A1%A8-%E6%A0%88-%E9%98%9F%E5%88%97-%E9%80%92%E5%BD%92-%E5%93%88%E5%B8%8C%E8%A1%A8/"/>
    <id>https://shang.at/post/数据结构与算法-左神学习笔记2-链表-栈-队列-递归-哈希表/</id>
    <published>2020-07-23T04:16:10.000Z</published>
    <updated>2020-07-23T06:00:03.558Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>简介：</p></blockquote><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;简介：&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="数据结构与算法" scheme="https://shang.at/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="左神学习笔记" scheme="https://shang.at/tags/%E5%B7%A6%E7%A5%9E%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>数据结构与算法-左神学习笔记1-复杂度&amp;对数器&amp;二分法&amp;位运算</title>
    <link href="https://shang.at/post/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-%E5%B7%A6%E7%A5%9E%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01-%E5%A4%8D%E6%9D%82%E5%BA%A6-%E5%AF%B9%E6%95%B0%E5%99%A8-%E4%BA%8C%E5%88%86%E6%B3%95-%E4%BD%8D%E8%BF%90%E7%AE%97/"/>
    <id>https://shang.at/post/数据结构与算法-左神学习笔记1-复杂度-对数器-二分法-位运算/</id>
    <published>2020-07-23T04:15:02.000Z</published>
    <updated>2020-07-23T06:00:00.766Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>简介：</p></blockquote><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;简介：&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="数据结构与算法" scheme="https://shang.at/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="左神学习笔记" scheme="https://shang.at/tags/%E5%B7%A6%E7%A5%9E%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>大数据-aws</title>
    <link href="https://shang.at/post/%E5%A4%A7%E6%95%B0%E6%8D%AE-aws/"/>
    <id>https://shang.at/post/大数据-aws/</id>
    <published>2020-07-23T01:08:29.000Z</published>
    <updated>2020-07-23T01:13:53.160Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>简介：</p></blockquote><a id="more"></a><h3 id="AWS常见命令"><a href="#AWS常见命令" class="headerlink" title="AWS常见命令"></a>AWS常见命令</h3><p>aws s3 [commend] help</p><p>aws s3 ls [—recursive] [—human-readable] [—summarize]</p><p>aws s3 rm s3_path [—recursive]</p><p>aws s3 cp s3_path target_path [—recursive]</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;简介：&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="大数据" scheme="https://shang.at/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
      <category term="aws" scheme="https://shang.at/tags/aws/"/>
    
  </entry>
  
  <entry>
    <title>Python学习-文件操作</title>
    <link href="https://shang.at/post/Python%E5%AD%A6%E4%B9%A0-%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/"/>
    <id>https://shang.at/post/Python学习-文件操作/</id>
    <published>2020-07-22T03:24:24.000Z</published>
    <updated>2020-07-22T06:20:32.279Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>简介：</p></blockquote><a id="more"></a><p>打开文件：<code>open(filename, &#39;r|w|x|a|b|t|+&#39;, buffering=4096,)</code></p><p>检测路径是否存在：<code>os.path.exists(path)</code></p><p>创建目录：<code>os.mkdir(path)</code>  递归创建路径：<code>os.makedirs(path)</code></p><p>删除目录：<code>os.rmdir(path)</code>  递归删除目录：<code>shutil.rmtree(path)</code></p><p>获取当前的工作目录：<code>os.getcwd()</code></p><p>判断给定的路径是否为目录：<code>os.path.isdir(source)</code></p><p>获取给定文件全路径的一级目录：<code>os.path.dirname(source)</code></p><p>获取给定文件全路径的文件名：<code>os.path.basename(source)</code></p><p>修改工作目录：<code>os.chdir(source_dir)</code></p><p>拼接路径：<code>os.path.join(path1, path2)</code></p><p>执行shell命令：<code>os.system(cmd)</code></p><p>循环遍历指定目录下 的(直属的)所有文件(夹)：<code>os.listdir(path)</code></p><p>递归遍历指定目录下的所有文件(夹)：<code>os.walk(path)</code>，返回的是一个<code>generator</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#conding=utf8  </span></span><br><span class="line"><span class="keyword">import</span> os </span><br><span class="line"><span class="keyword">for</span> path,dir_list,file_list <span class="keyword">in</span> os.walk(path):  </span><br><span class="line">    <span class="keyword">for</span> file_name <span class="keyword">in</span> file_list:</span><br><span class="line">        print(os.path.join(path, file_name))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;简介：&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Python" scheme="https://shang.at/categories/Python/"/>
    
    
      <category term="文件操作" scheme="https://shang.at/tags/%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>操作系统-网络的配置</title>
    <link href="https://shang.at/post/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E7%BD%91%E7%BB%9C%E7%9A%84%E9%85%8D%E7%BD%AE/"/>
    <id>https://shang.at/post/操作系统-网络的配置/</id>
    <published>2020-07-15T14:24:58.000Z</published>
    <updated>2020-07-15T14:39:06.169Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>简介：本例中以CentOS 7举例说明如何设置Linux开机自动获取IP地址和设置固定IP地址。</p></blockquote><a id="more"></a><h3 id="自动获取动态IP地址"><a href="#自动获取动态IP地址" class="headerlink" title="自动获取动态IP地址"></a>自动获取动态IP地址</h3><p>1.输入“ip addr”并按回车键确定，发现无法获取IP(CentOS 7默认没有ifconfig命令)，记录下网卡名称（本例中为ens33）。 </p><p><img src="/images/CentOSIP1.png"></p><p>2.输入“cd /etc/sysconfig/network-scripts/”按回车键确定，继续输入“ls”按回车键查看文件。 </p><p><img src="/images/CentOSIP2.png"></p><p>3.输入“vi ifcfg-ens33”并按回车键确定（网卡名称可能不同）。亦可在第二步直接输入“cd /etc/sysconfig/network-scripts/ifcfg-ens33”直接编辑文件。 </p><p><img src="/images/CentOSIP3.png"></p><p>4.查看最后一项（蓝色框内），发现为“ONBOOT=no”。 </p><p><img src="/images/CentOSIP4.png"></p><p>5.按“i”键进入编辑状态，将最后一行“no”修改为“yes”，然后按“ESC”键退出编辑状态，并输入“:x”保存退出。 </p><p><img src="/images/CentOSIP5.png"></p><p>6.输入“service network restart”重启服务,亦可输入“systemctl restart netwrok”。 </p><p><img src="/images/CentOSIP6.png"></p><p>7.再次输入“ip addr”查看，现已可自动获取IP地址。 </p><p><img src="/images/CentOSIP7.png"></p><h3 id="设置静态IP地址"><a href="#设置静态IP地址" class="headerlink" title="设置静态IP地址"></a>设置静态IP地址</h3><p>8.输入“cd /etc/sysconfig/network-scripts/”按回车键确定，继续输入“ls”按回车键查看文件，确定网卡名称。 </p><p><img src="/images/CentOSIP2.png"></p><p>9.输入“vi ifcfg-ens33”并按回车键确定（网卡名称可能不同）。如确知网卡名称可直接输入“cd /etc/sysconfig/network-scripts/ifcfg-ens33”编辑文件。 </p><p><img src="/images/CentOSIP3.png"></p><p>10.按“i”进入编辑状态，设置为“BOOTPROTO=’static’”（如设置为none则禁止DHCP，static则启用静态IP地址，设置为dhcp则为开启DHCP服务），并修改其他部分为您的设置，    本例中为192.168.1.200/24，GW:192.168.1.1，可根据您的需要配置IPV6部分。    注意：NM_CONTROLLED=no和ONBOOT=yes可根据您的需求进行设置。 </p><p><img src="/images/CentOSIP8.png"></p><p>11.确认无误后按“ESC”退出编辑状态，并输入“:x”保存退出，输入“service network restart”重启服务后输入“ifconfig”查看网络配置。 </p><p><img src="/images/CentOSIP9.png"></p><p>12.如需设置DNS(需在第9步设置NM_CONTROLLED=no)则输入“vi /etc/resolv.conf”并按回车键执行命令（如已在第9步配置DNS则可省略此步骤）。 </p><p><img src="/images/CentOSIP10.png"></p><p>13.在此文件里面输入DNS服务器地址（本例中以广东电信为例，亦可输入路由器DNS地址）并保存退出。 </p><p><img src="/images/CentOSIP11.png"></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;简介：本例中以CentOS 7举例说明如何设置Linux开机自动获取IP地址和设置固定IP地址。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="操作系统" scheme="https://shang.at/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="网络的配置" scheme="https://shang.at/tags/%E7%BD%91%E7%BB%9C%E7%9A%84%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>工具使用-UML</title>
    <link href="https://shang.at/post/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8-UML/"/>
    <id>https://shang.at/post/工具使用-UML/</id>
    <published>2020-07-15T03:36:56.000Z</published>
    <updated>2020-07-15T04:13:54.847Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>简介：统一建模语言（Unified Modeling Language，缩写UML），是非专利的第三代建模和规约语言。<br>UML是一种开放的方法，用于说明、可视化、构建和编写一个正在开发的、面向对象的、软件密集系统的制品的开放方法。</p></blockquote><a id="more"></a><p>推荐使用<a href="https://app.lucidchart.com/" target="_blank" rel="noopener">https://app.lucidchart.com/</a>在线工具进行绘制</p><p><strong>UML模型和图形</strong></p><p>UML分为模型和图形两大类。区分UML模型和UML图是非常重要的，UML图（包括用例图、协作图、活动图、序列图、部署图、构件图、类图、状态图）是模型中信息的图表表达形式，但是UML模型独立于UML图存在。</p><p>在UML系统开发中有三个主要的模型：</p><ul><li><strong>功能模型</strong>：从用户的角度展示系统的功能，包括用例图。</li><li><strong>对象模型</strong>：采用对象，属性，操作，关联等概念展示系统的结构和基础，包括类别图、对象图。</li><li><strong>动态模型</strong>：展现系统的内部行为。包括序列图，活动图，状态图。</li></ul><p>UML2.2中一共定义了14种图示。</p><p>结构性图形（<em>Structure diagrams</em>）强调的是系统式的建模：</p><ul><li>静态图（static diagram)：包括类图、对象图、包图</li><li>实现图（implementation diagram）：包括组件图、部署图</li><li>剖面图</li><li>复合结构图</li></ul><p>行为式图形（<em>Behavior diagrams</em>）强调系统模型中触发的事件</p><ul><li>活动图</li><li>状态图</li><li>用例图</li></ul><p>交互性图形（<em>Interaction diagrams</em>），属于行为图形的子集合，强调系统模型中的资料流程</p><ul><li>通信图</li><li>交互概述图</li><li>时序图</li><li>时间图</li></ul><h4 id="2-UML类图作用"><a href="#2-UML类图作用" class="headerlink" title="2 UML类图作用"></a>2 UML类图作用</h4><p>UML展现了一系列最佳工程实践，这些最佳实践在对大规模，复杂系统进行建模方面，特别是软件架构层次方面已经被验证有效。</p><p>我们这次介绍的主要是类图，为了解析项目的系统结构和架构层次，可以简洁明了的帮助我们理解项目中类之间的关系。</p><p>类图的作用：<br> （1）：在软件工程中，类图是一种静态的结构图，描述了系统的类的集合，类的属性和类之间的关系，可以简化了人们对系统的理解；<br> （2）：类图是系统分析和设计阶段的重要产物，是系统编码和测试的重要模型。</p><h4 id="3-类图格式"><a href="#3-类图格式" class="headerlink" title="3 类图格式"></a>3 类图格式</h4><p>在UML类图中，类使用包含类名、属性(field) 和方法(method) 且带有分割线的矩形来表示，</p><p>举个栗子。一个Animal类，它包含name,age,state,isPet这4个属性，以及name相关方法。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span>: <span class="title">NSObject</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">var</span> name: <span class="type">String?</span></span><br><span class="line"><span class="keyword">internal</span> <span class="keyword">var</span> isPet: <span class="type">Bool?</span></span><br><span class="line"><span class="keyword">fileprivate</span> <span class="keyword">var</span> state: <span class="type">String?</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">var</span> age: <span class="type">Int?</span> = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">override</span> <span class="keyword">init</span>() &#123;</span><br><span class="line">    <span class="keyword">self</span>.name = <span class="string">"no name"</span></span><br><span class="line">    <span class="keyword">self</span>.age = <span class="number">0</span></span><br><span class="line">    <span class="keyword">self</span>.isPet = <span class="literal">true</span></span><br><span class="line">    <span class="keyword">self</span>.state = <span class="string">"dead"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">getName</span><span class="params">()</span></span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>.name!</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">internal</span> <span class="function"><span class="keyword">func</span> <span class="title">setName</span><span class="params">(name: String?)</span></span> &#123;</span><br><span class="line">    <span class="keyword">self</span>.name = name</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>对应UML类图：</p><p><img src="/images/uml1.png"></p><ul><li>类名：粗体，如果是类是抽象类则类名显示为斜体！</li><li>属性：</li></ul><blockquote><p>可见性 名称：类型[=默认值]</p></blockquote><p>可见性一般为public、private和protected，在类图分别用+、-和#表示，在Swift中没有与protected完全对应的可见控制，因此选用的是internal对应为#；名称为属性的名称；类型为数据类型；默认值如变量 age默认值为0。</p><ul><li>方法：</li></ul><blockquote><p>可见性 名称（参数列表 参数1，参数2） ：返回类型</p></blockquote><p>可见性如上名称表达式的介绍，名称就是方法名，参数列表是可选的项，多参数的话参数直接用英文逗号隔开；返回值也是个可选项，返回值类型可以说基本的数据类型、用户自定义类型和void。如果是构造方法，则无返回类型！</p><h4 id="4类与类之间的关系表达"><a href="#4类与类之间的关系表达" class="headerlink" title="4类与类之间的关系表达"></a>4类与类之间的关系表达</h4><p>类图中类与类之间的关系主要由：继承、实现、依赖、关联、聚合、组合这六大类型。表示方式如下图：</p><p><img src="/images/uml2.png"></p><h5 id="1-继承关系（Generalization-extends）"><a href="#1-继承关系（Generalization-extends）" class="headerlink" title="(1)继承关系（Generalization/extends）"></a>(1)继承关系（Generalization/extends）</h5><p>继承关系也叫泛化关系，指的是一个类（称为子类、子接口）继承另外的一个类（称为父类、父接口）的功能，并可以增加它自己的新功能的能力，继承是类与类或者接口与接口之间最常见的关系。</p><p>继承用实线空心箭头表示，由子类指向父类。</p><p>下面写两个子类，Fish和Cat分别继承自Animal。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fish</span>: <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> fishType: <span class="type">String?</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">swim</span><span class="params">()</span></span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span>: <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> hasFeet: <span class="type">Bool?</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">playToy</span><span class="params">(doll:Doll)</span></span> &#123;</span><br><span class="line">        doll.toyMoved()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p><img src="/images/uml3.png"></p><h5 id="2-实现关系（implements）"><a href="#2-实现关系（implements）" class="headerlink" title="(2)实现关系（implements）"></a>(2)实现关系（implements）</h5><p>指的是一个class类实现interface接口（可以是多个）的功能；实现是类与接口之间最常见的关系；在Java中此类关系通过关键字implements明确标识，在iOS中我将其理解成代理的实现。</p><p>写一个洋娃娃类Doll，该类遵循了ToyAction协议，实现了玩具移动的方法。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">ToyAction</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">toyMoved</span><span class="params">()</span></span> -&gt; <span class="type">Void</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Doll</span>: <span class="title">NSObject</span>,<span class="title">ToyAction</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> body: <span class="type">Body?</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> cloth: <span class="type">Cloth?</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">toyMoved</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="comment">//洋娃娃玩具动作具体实现</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p><img src="/images/uml4.png"></p><h5 id="3-依赖关系（Dependency）"><a href="#3-依赖关系（Dependency）" class="headerlink" title="(3)依赖关系（Dependency）"></a>(3)依赖关系（Dependency）</h5><p>可以简单的理解，就是一个类A使用到了另一个类B，而这种使用关系是具有偶然性的、、临时性的、非常弱的，但是B类的变化会影响到A；比如某人要过河，需要借用一条船，此时人与船之间的关系就是依赖；表现在代码层面，为类B作为参数被类A在某个method方法中使用。</p><p>在我们的上述代码中Cat的playToy方法中参数引用了Doll，因此他们是依赖关系。</p><p><img src="/images/uml5.png"></p><h5 id="4-关联关系（Association）"><a href="#4-关联关系（Association）" class="headerlink" title="(4)关联关系（Association）"></a>(4)关联关系（Association）</h5><p>他体现的是两个类、或者类与接口之间语义级别的一种强依赖关系，比如我和我的朋友；这种关系比依赖更强、不存在依赖关系的偶然性、关系也不是临时性的，一般是长期性的，而且双方的关系一般是平等的、关联可以是单向、双向的；表现在代码层面，为被关联类B以类属性的形式出现在关联类A中，也可能是关联类A引用了一个类型为被关联类B的全局变量；</p><p>写一个Person类，他拥有一个宠物猫，他们之间的关系是关联。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Head</span>: <span class="title">NSObject</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>: <span class="title">NSObject</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> pet: <span class="type">Cat?</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> head: <span class="type">Head?</span></span><br><span class="line">&#125;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p><img src="/images/uml6.png"></p><h5 id="5-聚合关系（Aggregation）"><a href="#5-聚合关系（Aggregation）" class="headerlink" title="(5)聚合关系（Aggregation）"></a>(5)聚合关系（Aggregation）</h5><p>聚合是关联关系的一种特例，他体现的是整体与部分、拥有的关系，即has-a的关系，此时整体与部分之间是可分离的，他们可以具有各自的生命周期，部分可以属于多个整体对象，也可以为多个整体对象共享；比如计算机与CPU、公司与员工的关系等；表现在代码层面，和关联关系是一致的，只能从语义级别来区分；</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cloth</span>: <span class="title">NSObject</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Body</span>: <span class="title">NSObject</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>在上述代码中Doll由Body和Cloth组成，且即使失去Cloth，Doll也可以正常存在。</p><p><img src="/images/uml7"></p><h5 id="6-组合关系（Composition）"><a href="#6-组合关系（Composition）" class="headerlink" title="(6)组合关系（Composition）"></a>(6)组合关系（Composition）</h5><p>组合也是关联关系的一种特例，他体现的是一种contains-a的关系，这种关系比聚合更强，也称为强聚合；他同样体现整体与部分间的关系，但此时整体与部分是不可分的，整体的生命周期结束也就意味着部分的生命周期结束；比如你和你的大脑；表现在代码层面，和关联关系是一致的，只能从语义级别来区分；</p><p>上述代码中的Person拥有Head，并且这个整体和部分是不可分割的。</p><p><img src="/images/uml8.png"></p><p>最后来看看这个例子中的整体关系：</p><p><img src="/images/uml9.png"></p><p>其实理解了之后我们发现还是很简单的，学会了之后就可以投入实践中了，举一个简单第三方库的类图例子，下图是Masonry的类图整理，可以看到项目结构很清晰的展示了出来。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">转自</span><br><span class="line">作者：zhengyi</span><br><span class="line">链接：https://juejin.im/post/5d318b485188255957377ac3</span><br><span class="line">来源：掘金</span><br><span class="line">著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;简介：统一建模语言（Unified Modeling Language，缩写UML），是非专利的第三代建模和规约语言。&lt;br&gt;UML是一种开放的方法，用于说明、可视化、构建和编写一个正在开发的、面向对象的、软件密集系统的制品的开放方法。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="工具使用" scheme="https://shang.at/categories/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/"/>
    
    
      <category term="UML" scheme="https://shang.at/tags/UML/"/>
    
  </entry>
  
  <entry>
    <title>Java学习-设计模式</title>
    <link href="https://shang.at/post/Java%E5%AD%A6%E4%B9%A0-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>https://shang.at/post/Java学习-设计模式/</id>
    <published>2020-07-14T09:26:40.000Z</published>
    <updated>2020-07-21T07:13:09.334Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>简介：Java中23种设计模式，分为创建型、结构型和行为型</p></blockquote><a id="more"></a><p><img src="/images/设计模式.png"></p><h1 id="创建型"><a href="#创建型" class="headerlink" title="创建型"></a>创建型</h1><blockquote><p><strong>对象实例化的模式，创建型模式用于解耦对象的实例化过程。</strong></p></blockquote><h2 id="Singleton单例模式"><a href="#Singleton单例模式" class="headerlink" title="Singleton单例模式"></a>Singleton单例模式</h2><blockquote><p>某个类只能有一个实例，提供一个全局的访问点。</p></blockquote><h3 id="实现1-饿汉式"><a href="#实现1-饿汉式" class="headerlink" title="实现1 饿汉式"></a>实现1 饿汉式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 饿汉式</span></span><br><span class="line"><span class="comment"> * 类加载到内存后，就实例化一个单例，JVM保证线程安全</span></span><br><span class="line"><span class="comment"> * 简单实用，推荐使用！</span></span><br><span class="line"><span class="comment"> * 唯一缺点：不管用到与否，类装载时就完成实例化</span></span><br><span class="line"><span class="comment"> * Class.forName("")</span></span><br><span class="line"><span class="comment"> * （话说你不用的，你装载它干啥）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Mgr01</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Mgr01 INSTANCE = <span class="keyword">new</span> Mgr01();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Mgr01</span><span class="params">()</span> </span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Mgr01 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"m"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Mgr01 m1 = Mgr01.getInstance();</span><br><span class="line">        Mgr01 m2 = Mgr01.getInstance();</span><br><span class="line">        System.out.println(m1 == m2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者使用静态代码块进行初始化，和Mgr01一样</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Mgr02</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Mgr02 INSTANCE;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        INSTANCE = <span class="keyword">new</span> Mgr02();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Mgr02</span><span class="params">()</span> </span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Mgr02 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"m"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Mgr02 m1 = Mgr02.getInstance();</span><br><span class="line">        Mgr02 m2 = Mgr02.getInstance();</span><br><span class="line">        System.out.println(m1 == m2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>加载jdbc驱动的时候，就是用的Class.forName(“com.mysql.jdbc.Driver”)，在com.mysql.jdbc.Driver中就是在静态代码块中对com.mysql.jdbc.Driver进行的注册</p></blockquote><h3 id="实现2-懒汉式"><a href="#实现2-懒汉式" class="headerlink" title="实现2 懒汉式"></a>实现2 懒汉式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * lazy loading</span></span><br><span class="line"><span class="comment"> * 也称懒汉式，需要时才加载</span></span><br><span class="line"><span class="comment"> * 需要注意的点：</span></span><br><span class="line"><span class="comment"> * 1、DCL</span></span><br><span class="line"><span class="comment"> * 2、实例需要加volatile修饰</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Mgr06</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Mgr06 INSTANCE; <span class="comment">//JIT</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Mgr06</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Mgr06 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (INSTANCE == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//双重检查</span></span><br><span class="line">            <span class="keyword">synchronized</span> (Mgr06<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(INSTANCE == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">1</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    INSTANCE = <span class="keyword">new</span> Mgr06();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"m"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">                System.out.println(Mgr06.getInstance().hashCode());</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于懒汉式的单例模式的详细解读：<br>1、懒汉式一：synchronized加在getInstance()上，每次调用getInstance都会进行一次加锁行为，会导致效率低下<br>2、懒汉式二：DCL模式，Double Check Lock，双重检查锁定<br>​    a. 第一步检查，如果发现INSTANCE不为null，直接返回，不会产生加锁的行为，提高效率<br>​    b. 第二步加锁，同时只能由一个线程获得锁，也只有一个线程能最终创建实例对象<br>​    c. 第三步检查，加完锁之后再次检查，防止有多个线程在第一步检查时同时竞争锁，当一个线程完成了实例的创建，那么其他的线程再次获得锁时，发现实例已经不为空，那么退出临界区且返回实例对象<br>3、INSTANCE对象需要使用volatile关键字修饰<br>​    貌似以上的操作已经没有什么问题了。但是这里还是有一个隐藏的bug：也就是<font color="red">CPU的乱序执行，指令重拍</font>。由于CPU的乱序执行会导致实例对象的半初始化状态：即对象实例虽已创建，在内存中有对应的空间，但是这时候是还没有初始化实例属性，实例属性都是初始值。在java中，基础类型的变量都有各自的初始值，但是引用类型的初始值都是null，这个时候如果其他的线程拿到了实例对象，就会导致NullPointerException。所以INSTANCE对象需要增加volatile关键字修饰，valatile关键字可以禁用CPU的乱序执行。<a href="/post/Java学习-class文件格式">具体详情需要结合编译成的jvm指令集查看</a></p><h3 id="实现3-静态内部类"><a href="#实现3-静态内部类" class="headerlink" title="实现3 静态内部类"></a>实现3 静态内部类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 静态内部类方式</span></span><br><span class="line"><span class="comment"> * JVM保证单例</span></span><br><span class="line"><span class="comment"> * 加载外部类时不会加载内部类，这样可以实现懒加载</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Mgr07</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Mgr07</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Mgr07Holder</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Mgr07 INSTANCE = <span class="keyword">new</span> Mgr07();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Mgr07 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Mgr07Holder.INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"m"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">                System.out.println(Mgr07.getInstance().hashCode());</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实现4-枚举单例"><a href="#实现4-枚举单例" class="headerlink" title="实现4 枚举单例"></a>实现4 枚举单例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 不仅可以解决线程同步，还可以防止反序列化。</span></span><br><span class="line"><span class="comment"> * JVM 会阻止反射获取枚举类的私有构造方法，即可以 避免使用者使用反射的方式破坏单例的唯一性</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Mgr08 &#123;</span><br><span class="line">    INSTANCE;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">                System.out.println(Mgr08.INSTANCE.hashCode());</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 内部隐藏的enum来生成单例对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonObject7</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingletonObject7</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 枚举类型是线程安全的，并且只会装载一次</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">enum</span> Singleton&#123;</span><br><span class="line">        INSTANCE;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> SingletonObject7 instance;</span><br><span class="line">        Singleton()&#123;</span><br><span class="line">            instance = <span class="keyword">new</span> SingletonObject7();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">private</span> SingletonObject7 <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">return</span> instance;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingletonObject7 <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Singleton.INSTANCE.getInstance();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是不能设置属性呢？？？？？？</p><p>如何防止用户破坏单例的唯一性？</p><p>1、通过反射的方式破坏单例,反射是通过调用构造方法生成新的对象</p><p>2、如果单例类实现了序列化接口Serializable, 就可以通过反序列化破坏单例，</p><p>3、使用枚举单例</p><h2 id="FactoryMethod工厂模式"><a href="#FactoryMethod工厂模式" class="headerlink" title="FactoryMethod工厂模式"></a>FactoryMethod工厂模式</h2><h2 id="AbstractFactory抽象工厂模式"><a href="#AbstractFactory抽象工厂模式" class="headerlink" title="AbstractFactory抽象工厂模式"></a>AbstractFactory抽象工厂模式</h2><h2 id="Builder构建器"><a href="#Builder构建器" class="headerlink" title="Builder构建器"></a>Builder构建器</h2><h2 id="Prototype原型"><a href="#Prototype原型" class="headerlink" title="Prototype原型"></a>Prototype原型</h2><h1 id="结构性"><a href="#结构性" class="headerlink" title="结构性"></a>结构性</h1><blockquote><p><strong>把类或对象结合在一起形成一个更大的结构。</strong></p></blockquote><h2 id="Facade门面-模式"><a href="#Facade门面-模式" class="headerlink" title="Facade门面 模式"></a>Facade门面 模式</h2><h2 id="Decorator装饰器-模式"><a href="#Decorator装饰器-模式" class="headerlink" title="Decorator装饰器 模式"></a>Decorator装饰器 模式</h2><h2 id="Composite组合模式"><a href="#Composite组合模式" class="headerlink" title="Composite组合模式"></a>Composite组合模式</h2><h2 id="Flyweight享元"><a href="#Flyweight享元" class="headerlink" title="Flyweight享元"></a>Flyweight享元</h2><h2 id="Adapter适配器"><a href="#Adapter适配器" class="headerlink" title="Adapter适配器"></a>Adapter适配器</h2><h2 id="Bridge桥接"><a href="#Bridge桥接" class="headerlink" title="Bridge桥接"></a>Bridge桥接</h2><h2 id="Proxy静态代理与动态代理"><a href="#Proxy静态代理与动态代理" class="headerlink" title="Proxy静态代理与动态代理"></a>Proxy静态代理与动态代理</h2><h1 id="行为型"><a href="#行为型" class="headerlink" title="行为型"></a>行为型</h1><blockquote><p><strong>类和对象如何交互，及划分责任和算法。</strong></p></blockquote><h2 id="Strategry策略模式"><a href="#Strategry策略模式" class="headerlink" title="Strategry策略模式"></a>Strategry策略模式</h2><h2 id="ChainOfResponsibility责任链-模式"><a href="#ChainOfResponsibility责任链-模式" class="headerlink" title="ChainOfResponsibility责任链 模式"></a>ChainOfResponsibility责任链 模式</h2><h2 id="Observer观察者-模式"><a href="#Observer观察者-模式" class="headerlink" title="Observer观察者 模式"></a>Observer观察者 模式</h2><h2 id="Mediator调停者-模式"><a href="#Mediator调停者-模式" class="headerlink" title="Mediator调停者 模式"></a>Mediator调停者 模式</h2><h2 id="Iterator迭代器-模式"><a href="#Iterator迭代器-模式" class="headerlink" title="Iterator迭代器 模式"></a>Iterator迭代器 模式</h2><h2 id="Visitor访问者-模式"><a href="#Visitor访问者-模式" class="headerlink" title="Visitor访问者 模式"></a>Visitor访问者 模式</h2><h2 id="Command命令-模式"><a href="#Command命令-模式" class="headerlink" title="Command命令 模式"></a>Command命令 模式</h2><h2 id="Memento备忘录-模式"><a href="#Memento备忘录-模式" class="headerlink" title="Memento备忘录 模式"></a>Memento备忘录 模式</h2><h2 id="TemplateMethod模板方法"><a href="#TemplateMethod模板方法" class="headerlink" title="TemplateMethod模板方法"></a>TemplateMethod模板方法</h2><h2 id="State状态-模式"><a href="#State状态-模式" class="headerlink" title="State状态 模式"></a>State状态 模式</h2><h2 id="Intepreter解释器-模式"><a href="#Intepreter解释器-模式" class="headerlink" title="Intepreter解释器 模式"></a>Intepreter解释器 模式</h2>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;简介：Java中23种设计模式，分为创建型、结构型和行为型&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="JAVA学习" scheme="https://shang.at/categories/JAVA%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="设计模式" scheme="https://shang.at/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>虚拟机-Docker</title>
    <link href="https://shang.at/post/%E8%99%9A%E6%8B%9F%E6%9C%BA-Docker/"/>
    <id>https://shang.at/post/虚拟机-Docker/</id>
    <published>2020-07-13T23:36:10.000Z</published>
    <updated>2020-07-13T23:36:53.601Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>简介：</p></blockquote><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;简介：&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="虚拟机" scheme="https://shang.at/categories/%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
    
      <category term="Docker" scheme="https://shang.at/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>操作系统-CentOS7上的开发环境配置</title>
    <link href="https://shang.at/post/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-CentOS7%E4%B8%8A%E7%9A%84%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    <id>https://shang.at/post/操作系统-CentOS7上的开发环境配置/</id>
    <published>2020-07-13T14:02:29.000Z</published>
    <updated>2020-07-26T03:24:51.446Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>简介：在Centos上进行开发的环境搭建</p></blockquote><a id="more"></a><p><a href="https://linuxtools-rst.readthedocs.io/zh_CN/latest/tool/strace.html" target="_blank" rel="noopener">Linux Tools Quick Tutorial</a></p><h1 id="安装必要的软件"><a href="#安装必要的软件" class="headerlink" title="安装必要的软件"></a>安装必要的软件</h1><h2 id="升级-yum源-amp-安装相关依赖包"><a href="#升级-yum源-amp-安装相关依赖包" class="headerlink" title="升级 yum源&amp;安装相关依赖包"></a>升级 yum源&amp;安装相关依赖包</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum update</span><br><span class="line"></span><br><span class="line">yum install -y net-tools rsync mlocate wget vim ntpdate telnet gcc zlib-dev openssl-devel sqlite-devel bzip2-devel binutils qt  make patch libgomp glibc-headers glibc-devel kernel-headers kernel-devel dkms strace</span><br></pre></td></tr></table></figure><h2 id="虚拟机软件"><a href="#虚拟机软件" class="headerlink" title="虚拟机软件"></a>虚拟机软件</h2><h3 id="Vagrant"><a href="#Vagrant" class="headerlink" title="Vagrant"></a>Vagrant</h3><p><a href="/post/虚拟机-Vagrant使用">这里查看vagrant的详细使用 </a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget https://releases.hashicorp.com/vagrant/2.2.9/vagrant_2.2.9_x86_64.rpm</span><br><span class="line"></span><br><span class="line">rpm -ivh vagrant_2.2.9_x86_64.rpm</span><br></pre></td></tr></table></figure><h3 id="VirualBox"><a href="#VirualBox" class="headerlink" title="VirualBox"></a>VirualBox</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://download.virtualbox.org/virtualbox/6.1.10/VirtualBox-6.1-6.1.10_138449_el7-1.x86_64.rpm</span><br></pre></td></tr></table></figure><p>rpm -ivh VirtualBox-6.1-6.1.10_138449_el7-1.x86_64.rpm 报错如下：libSDL-1.2.so.0()(64bit) 被 VirtualBox-6.1-6.1.10_138449_el7-1.x86_64 需要<br>那么，需要安装SDL，<code>yum install -y SDL</code></p><p>同时要保证安装的kernel-header和kernel的版本一致。安装完kernel之后，需要重启，可以使用<code>uname -r</code> 查看kernel版本</p><h2 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h2><p><a href="/post/虚拟机-Docker">这里查看Docker的详细使用 </a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 安装工具包</span><br><span class="line">yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 安装ali源</span><br><span class="line">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 刷新安装源</span><br><span class="line">yum makecache fast</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 安装 docker-ce</span><br><span class="line">yum -y install docker-ce</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 启动docker</span><br><span class="line">systemctl start docker</span><br><span class="line"><span class="meta">#</span> 停止docker</span><br><span class="line">systemctl stop docker</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 开机自启动</span><br><span class="line">systemctl enable docker</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 配置aliyun的容器镜像加速器   </span><br><span class="line"><span class="meta">#</span> 登录aliyun.com 搜索容器镜像服务，进入管理后台，在左侧菜单栏下面可以找到 镜像加速器 选项</span><br><span class="line">sudo mkdir -p /etc/docker</span><br><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-'EOF'</span><br><span class="line">&#123;</span><br><span class="line">  "registry-mirrors": ["https://oooxxxoox.mirror.aliyuncs.com"]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure><h2 id="实时监控网速"><a href="#实时监控网速" class="headerlink" title="实时监控网速"></a>实时监控网速</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 安装之前均需要安装epel源，</span><br><span class="line">yum -y install epel-release</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 安装iftop工具</span><br><span class="line">yum install iftop -y</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 查看开启的网卡</span><br><span class="line">ifconfig </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 使用iftop监控，会进入一个类似top命令的界面，监控连接的地址以及网速</span><br><span class="line">iftop -i em4</span><br></pre></td></tr></table></figure><h2 id="systemctl命令详解"><a href="#systemctl命令详解" class="headerlink" title="systemctl命令详解"></a>systemctl命令详解</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line">Systemctl是一个系统管理守护进程、工具和库的集合，用于取代System V、service和chkconfig命令，初始进程主要负责控制systemd系统和服务管理器。通过Systemctl –help可以看到该命令主要分为：查询或发送控制命令给systemd服务，管理单元服务的命令，服务文件的相关命令，任务、环境、快照相关命令，systemd服务的配置重载，系统开机关机相关的命令。 </span><br><span class="line"></span><br><span class="line">1. 列出所有可用单元 </span><br><span class="line"><span class="meta">#</span> systemctl list-unit-files</span><br><span class="line"></span><br><span class="line">2. 列出所有运行中单元 </span><br><span class="line"><span class="meta">#</span> systemctl list-units</span><br><span class="line"></span><br><span class="line">3. 列出所有失败单元 </span><br><span class="line"><span class="meta">#</span> systemctl –failed</span><br><span class="line"></span><br><span class="line">4. 检查某个单元（如 crond.service）是否启用 </span><br><span class="line"><span class="meta">#</span> systemctl is-enabledcrond.service </span><br><span class="line"></span><br><span class="line">5. 列出所有服务 </span><br><span class="line"><span class="meta">#</span> systemctl list-unit-files –type=service</span><br><span class="line"></span><br><span class="line">6. Linux中如何启动、重启、停止、重载服务以及检查服务（如 httpd.service）状态 </span><br><span class="line"><span class="meta">#</span> systemctl start httpd.service</span><br><span class="line"><span class="meta">#</span> systemctl restart httpd.service</span><br><span class="line"><span class="meta">#</span> systemctl stop httpd.service</span><br><span class="line"><span class="meta">#</span> systemctl reload httpd.service</span><br><span class="line"><span class="meta">#</span> systemctl status httpd.service</span><br><span class="line"></span><br><span class="line">注意：当我们使用systemctl的start，restart，stop和reload命令时，终端不会输出任何内容，只有status命令可以打印输出。</span><br><span class="line"></span><br><span class="line">7. 如何激活服务并在开机时启用或禁用服务（即系统启动时自动启动mysql.service服务） </span><br><span class="line"><span class="meta">#</span> systemctl is-active mysql.service</span><br><span class="line"><span class="meta">#</span> systemctl enable mysql.service</span><br><span class="line"><span class="meta">#</span> systemctl disable mysql.service</span><br><span class="line"></span><br><span class="line">8. 如何屏蔽（让它不能启动）或显示服务（如ntpdate.service） </span><br><span class="line"><span class="meta">#</span> systemctl mask ntpdate.service</span><br><span class="line">ln -s ‘/dev/null”/etc/systemd/system/ntpdate.service’</span><br><span class="line"><span class="meta">#</span> systemctl unmask ntpdate.service</span><br><span class="line">rm ‘/etc/systemd/system/ntpdate.service’</span><br><span class="line"></span><br><span class="line">9. 使用systemctl命令杀死服务 </span><br><span class="line"><span class="meta">#</span> systemctl killcrond </span><br><span class="line"></span><br><span class="line">10. 列出所有系统挂载点 </span><br><span class="line"><span class="meta">#</span> systemctl list-unit-files –type=mount</span><br><span class="line"></span><br><span class="line">11. 挂载、卸载、重新挂载、重载系统挂载点并检查系统中挂载点状态 </span><br><span class="line"><span class="meta">#</span> systemctl start tmp.mount</span><br><span class="line"><span class="meta">#</span> systemctl stop tmp.mount</span><br><span class="line"><span class="meta">#</span> systemctl restart tmp.mount</span><br><span class="line"><span class="meta">#</span> systemctl reload tmp.mount</span><br><span class="line"><span class="meta">#</span> systemctl status tmp.mount</span><br><span class="line"></span><br><span class="line">12. 在启动时激活、启用或禁用挂载点（系统启动时自动挂载） </span><br><span class="line"><span class="meta">#</span> systemctl is-active tmp.mount</span><br><span class="line"><span class="meta">#</span> systemctl enable tmp.mount</span><br><span class="line"><span class="meta">#</span> systemctl disable tmp.mount</span><br><span class="line"></span><br><span class="line">13. 在Linux中屏蔽（让它不能启用）或可见挂载点 </span><br><span class="line"><span class="meta">#</span> systemctl mask tmp.mount</span><br><span class="line">ln -s ‘/dev/null”/etc/systemd/system/tmp.mount’</span><br><span class="line"><span class="meta">#</span> systemctl unmask tmp.mount</span><br><span class="line">rm ‘/etc/systemd/system/tmp.mount’</span><br><span class="line"></span><br><span class="line">14. 列出所有可用系统套接口 </span><br><span class="line"><span class="meta">#</span> systemctl list-unit-files –type=socket</span><br><span class="line"></span><br><span class="line">15. 检查某个服务的所有配置细节 </span><br><span class="line"><span class="meta">#</span> systemctl show mysql </span><br><span class="line"></span><br><span class="line">16. 获取某个服务（httpd）的依赖性列表 </span><br><span class="line"><span class="meta">#</span> systemctl list-dependencies httpd.service</span><br><span class="line"></span><br><span class="line">17. 启动救援模式 </span><br><span class="line"><span class="meta">#</span> systemctl rescue</span><br><span class="line"></span><br><span class="line">18. 进入紧急模式 </span><br><span class="line"><span class="meta">#</span> systemctl emergency</span><br><span class="line"></span><br><span class="line">19. 列出当前使用的运行等级 </span><br><span class="line"><span class="meta">#</span> systemctl get-default</span><br><span class="line"></span><br><span class="line">20. 启动运行等级5，即图形模式 </span><br><span class="line"><span class="meta">#</span> systemctl isolate runlevel5.target</span><br><span class="line">或</span><br><span class="line"><span class="meta">#</span> systemctl isolate graphical.target</span><br><span class="line"></span><br><span class="line">21. 启动运行等级3，即多用户模式（命令行） </span><br><span class="line"><span class="meta">#</span> systemctl isolate runlevel3.target</span><br><span class="line">或</span><br><span class="line"><span class="meta">#</span> systemctl isolate multiuser.target</span><br><span class="line"></span><br><span class="line">22. 设置多用户模式或图形模式为默认运行等级 </span><br><span class="line"><span class="meta">#</span> systemctl set-default runlevel3.target</span><br><span class="line"><span class="meta">#</span> systemctl set-default runlevel5.target</span><br><span class="line"></span><br><span class="line">23. 重启、停止、挂起、休眠系统或使系统进入混合睡眠 </span><br><span class="line"><span class="meta">#</span> systemctl reboot</span><br><span class="line"><span class="meta">#</span> systemctl halt</span><br><span class="line"><span class="meta">#</span> systemctl suspend</span><br><span class="line"><span class="meta">#</span> systemctl hibernate</span><br><span class="line"><span class="meta">#</span> systemctl hybrid-sleep</span><br><span class="line"></span><br><span class="line">对于不知运行等级为何物的人，说明如下。</span><br><span class="line">Runlevel 0 : 关闭系统</span><br><span class="line">Runlevel 1 : 救援，维护模式</span><br><span class="line">Runlevel 3 : 多用户，无图形系统</span><br><span class="line">Runlevel 4 : 多用户，无图形系统</span><br><span class="line">Runlevel 5 : 多用户，图形化系统</span><br><span class="line">Runlevel 6 : 关闭并重启机器</span><br></pre></td></tr></table></figure><h2 id="Centos重启与关机"><a href="#Centos重启与关机" class="headerlink" title="Centos重启与关机"></a>Centos重启与关机</h2><p>　Linux centos重启命令：</p><ul><li>　　1、reboot</li><li>　　2、shutdown -r now 立刻重启(root用户使用)</li><li>　　3、shutdown -r 10 过10分钟自动重启(root用户使用)</li><li>　　4、shutdown -r 20:35 在时间为20:35时候重启(root用户使用)</li></ul><p>　　如果是通过shutdown命令设置重启的话，可以用shutdown -c命令取消重启</p><p>　Linux centos关机命令：</p><ul><li>　　1、halt 立刻关机</li><li>　　2、poweroff 立刻关机</li><li>　　3、shutdown -h now 立刻关机(root用户使用)</li><li>　　4、shutdown -h 10 10分钟后自动关机</li></ul><p>　　如果是通过shutdown命令设置关机的话，可以用shutdown -c命令取消重启</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;简介：在Centos上进行开发的环境搭建&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Centos开发环境" scheme="https://shang.at/tags/Centos%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
    
  </entry>
  
</feed>
