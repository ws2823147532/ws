<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>努力，奋斗</title>
  
  <subtitle>记录学习</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://shang.at/"/>
  <updated>2020-06-03T03:00:26.307Z</updated>
  <id>https://shang.at/</id>
  
  <author>
    <name>王尚</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JAVA并发编程-12-并发框架(Disruptor)</title>
    <link href="https://shang.at/post/JAVA%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-12-%E5%B9%B6%E5%8F%91%E6%A1%86%E6%9E%B6-Disruptor/"/>
    <id>https://shang.at/post/JAVA并发编程-12-并发框架-Disruptor/</id>
    <published>2020-06-03T02:54:59.000Z</published>
    <updated>2020-06-03T03:00:26.307Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="JAVA并发编程" scheme="https://shang.at/categories/JAVA%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Disruptor" scheme="https://shang.at/tags/Disruptor/"/>
    
  </entry>
  
  <entry>
    <title>JAVA并发编程-11-响应式编程(RxJava)</title>
    <link href="https://shang.at/post/JAVA%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-11-%E5%93%8D%E5%BA%94%E5%BC%8F%E7%BC%96%E7%A8%8B-RxJava/"/>
    <id>https://shang.at/post/JAVA并发编程-11-响应式编程-RxJava/</id>
    <published>2020-06-03T02:53:44.000Z</published>
    <updated>2020-06-03T08:24:11.250Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://juejin.im/post/5ed62cabf265da7709526718" target="_blank" rel="noopener">https://juejin.im/post/5ed62cabf265da7709526718</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://juejin.im/post/5ed62cabf265da7709526718&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://juejin.im/post/5ed62cabf265da7709526718&lt;
      
    
    </summary>
    
      <category term="JAVA并发编程" scheme="https://shang.at/categories/JAVA%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="RxJava" scheme="https://shang.at/tags/RxJava/"/>
    
  </entry>
  
  <entry>
    <title>JAVA并发编程-10-协程</title>
    <link href="https://shang.at/post/JAVA%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-10-%E5%8D%8F%E7%A8%8B/"/>
    <id>https://shang.at/post/JAVA并发编程-10-协程/</id>
    <published>2020-06-03T02:53:19.000Z</published>
    <updated>2020-06-03T08:24:17.642Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://juejin.im/post/5ed62cabf265da7709526718" target="_blank" rel="noopener">https://juejin.im/post/5ed62cabf265da7709526718</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://juejin.im/post/5ed62cabf265da7709526718&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://juejin.im/post/5ed62cabf265da7709526718&lt;
      
    
    </summary>
    
      <category term="JAVA并发编程" scheme="https://shang.at/categories/JAVA%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="协程" scheme="https://shang.at/tags/%E5%8D%8F%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>JAVA并发编程-9-线程池</title>
    <link href="https://shang.at/post/JAVA%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-9-%E7%BA%BF%E7%A8%8B%E6%B1%A0/"/>
    <id>https://shang.at/post/JAVA并发编程-9-线程池/</id>
    <published>2020-06-03T02:52:35.000Z</published>
    <updated>2020-06-03T02:59:46.242Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="JAVA并发编程" scheme="https://shang.at/categories/JAVA%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="线程池" scheme="https://shang.at/tags/%E7%BA%BF%E7%A8%8B%E6%B1%A0/"/>
    
  </entry>
  
  <entry>
    <title>JAVA并发编程-8-阻塞队列</title>
    <link href="https://shang.at/post/JAVA%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-8-%E9%98%BB%E5%A1%9E%E9%98%9F%E5%88%97/"/>
    <id>https://shang.at/post/JAVA并发编程-8-阻塞队列/</id>
    <published>2020-06-03T02:52:16.000Z</published>
    <updated>2020-06-03T02:59:37.175Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="JAVA并发编程" scheme="https://shang.at/categories/JAVA%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="阻塞队列" scheme="https://shang.at/tags/%E9%98%BB%E5%A1%9E%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>JAVA并发编程-7-Atomic</title>
    <link href="https://shang.at/post/JAVA%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-7-Atomic/"/>
    <id>https://shang.at/post/JAVA并发编程-7-Atomic/</id>
    <published>2020-06-03T02:51:56.000Z</published>
    <updated>2020-06-03T02:59:29.958Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="JAVA并发编程" scheme="https://shang.at/categories/JAVA%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Atomic" scheme="https://shang.at/tags/Atomic/"/>
    
  </entry>
  
  <entry>
    <title>JAVA并发编程-6-并发集合</title>
    <link href="https://shang.at/post/JAVA%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-6-%E5%B9%B6%E5%8F%91%E9%9B%86%E5%90%88/"/>
    <id>https://shang.at/post/JAVA并发编程-6-并发集合/</id>
    <published>2020-06-03T02:51:41.000Z</published>
    <updated>2020-06-03T02:59:22.524Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="JAVA并发编程" scheme="https://shang.at/categories/JAVA%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="并发集合" scheme="https://shang.at/tags/%E5%B9%B6%E5%8F%91%E9%9B%86%E5%90%88/"/>
    
  </entry>
  
  <entry>
    <title>JAVA并发编程-5-其他</title>
    <link href="https://shang.at/post/JAVA%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-5-%E5%85%B6%E4%BB%96/"/>
    <id>https://shang.at/post/JAVA并发编程-5-其他/</id>
    <published>2020-06-03T02:51:25.000Z</published>
    <updated>2020-06-03T02:59:14.785Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="JAVA并发编程" scheme="https://shang.at/categories/JAVA%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="ThreadLocal-Fork&amp;Join" scheme="https://shang.at/tags/ThreadLocal-Fork-Join/"/>
    
  </entry>
  
  <entry>
    <title>JAVA并发编程-4-并发工具类</title>
    <link href="https://shang.at/post/JAVA%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-4-%E5%B9%B6%E5%8F%91%E5%B7%A5%E5%85%B7%E7%B1%BB/"/>
    <id>https://shang.at/post/JAVA并发编程-4-并发工具类/</id>
    <published>2020-06-03T02:51:14.000Z</published>
    <updated>2020-06-03T02:58:42.622Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="JAVA并发编程" scheme="https://shang.at/categories/JAVA%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="并发工具类" scheme="https://shang.at/tags/%E5%B9%B6%E5%8F%91%E5%B7%A5%E5%85%B7%E7%B1%BB/"/>
    
  </entry>
  
  <entry>
    <title>JAVA并发编程-3-锁</title>
    <link href="https://shang.at/post/JAVA%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-3-%E9%94%81/"/>
    <id>https://shang.at/post/JAVA并发编程-3-锁/</id>
    <published>2020-06-03T02:51:06.000Z</published>
    <updated>2020-06-03T02:58:32.008Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="JAVA并发编程" scheme="https://shang.at/categories/JAVA%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="锁" scheme="https://shang.at/tags/%E9%94%81/"/>
    
  </entry>
  
  <entry>
    <title>JAVA并发编程-2-并发基础</title>
    <link href="https://shang.at/post/JAVA%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-2-%E5%B9%B6%E5%8F%91%E5%9F%BA%E7%A1%80/"/>
    <id>https://shang.at/post/JAVA并发编程-2-并发基础/</id>
    <published>2020-06-03T02:50:55.000Z</published>
    <updated>2020-06-03T02:58:23.366Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="JAVA并发编程" scheme="https://shang.at/categories/JAVA%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="并发基础" scheme="https://shang.at/tags/%E5%B9%B6%E5%8F%91%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>JAVA并发编程-1-内存模型</title>
    <link href="https://shang.at/post/JAVA%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-1-%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/"/>
    <id>https://shang.at/post/JAVA并发编程-1-内存模型/</id>
    <published>2020-06-03T02:50:11.000Z</published>
    <updated>2020-06-03T02:58:10.566Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="JAVA并发编程" scheme="https://shang.at/categories/JAVA%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="内存模型" scheme="https://shang.at/tags/%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>Spark应用-Scheduler</title>
    <link href="https://shang.at/post/Spark%E5%BA%94%E7%94%A8-Scheduler/"/>
    <id>https://shang.at/post/Spark应用-Scheduler/</id>
    <published>2020-06-01T06:22:50.000Z</published>
    <updated>2020-06-02T06:27:48.586Z</updated>
    
    <content type="html"><![CDATA[<p>Spark任务有四种提交方式：</p><ul><li>local</li><li>standalone</li><li>yarn(这里着重讲)</li><li>mesos</li></ul><p>这里涉及到两层的任务调度：</p><h5 id="第一层：schedule-across-applications，应用间的任务调度"><a href="#第一层：schedule-across-applications，应用间的任务调度" class="headerlink" title="第一层：schedule across applications，应用间的任务调度"></a>第一层：schedule across applications，应用间的任务调度</h5><p>Spark的application提交到yarn平台，yarn平台负责Spark application的调度，这里也分为两层：</p><h6 id="第一层：Yarn的队列，Spark-application和其他运行在Yarn平台上的应用并无二致，都要统一服从yarn平台的安排"><a href="#第一层：Yarn的队列，Spark-application和其他运行在Yarn平台上的应用并无二致，都要统一服从yarn平台的安排" class="headerlink" title="第一层：Yarn的队列，Spark application和其他运行在Yarn平台上的应用并无二致，都要统一服从yarn平台的安排"></a>第一层：<a href="https://blog.csdn.net/bingduanlbd/article/details/52000151" target="_blank" rel="noopener">Yarn的队列</a>，Spark application和其他运行在Yarn平台上的应用并无二致，都要统一服从yarn平台的安排</h6><p>yarn有三种任务调度模型：</p><ul><li>FIFO scheduler：先入先出调度器，整个Yarn集群只有一个任务队列，所有提交的任务都要等待上一个任务完全执行完才能执行</li></ul><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gfdxdpkawcj30hx0d9wfw.jpg" alt="fifo"></p><ul><li>Capacity scheduler：容量调度器，以Capacity为中心，把资源划分到若干个队列中，各个队列内根据自己的逻辑分配资源。例如下图中队列A可以调度的资源可以占80%，队列B占有剩下的20%，各队列接受相应的作业请求，在自己的资源中分配</li></ul><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gfdxee77bdj30m10f0406.jpg" alt="capacity"></p><ul><li>Fair scheduler：秉承公平性原则，尽可能让各个作业得到的资源平均。先提交的job1马上占满了集群资源，那么作业2提交之后，原本Job1占有的资源拨出一些给作业2，从而达到“公平”<strong>(但是要等到job1的某些task执行完毕之后才能把资源让出来)</strong></li></ul><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gfdxeyu1x4j30hl0cv75n.jpg" alt="fair"></p><h6 id="第二层：Yarn队列内的调度"><a href="#第二层：Yarn队列内的调度" class="headerlink" title="第二层：Yarn队列内的调度"></a>第二层：Yarn队列内的调度</h6><p>当使用FIFO scheduler，自不必说，它只有一个先进先出的队列，也就是队列内部的任务调度；Capacity scheduler会把 集群分成若干个队列，每个队列内部采用FIFO的策略；Fair scheduler可以通过设置，每个Fair Queue内部使用不同的schedulingPolicy，但是会有一个文档级别的默认策略的配置defaultQueueSchedulingPolicy，如果每个Queue没有自己的设置，那么就用defaultQueueSchedulingPolicy</p><h5 id="第二层：schedule-within-application，同一个SparkContext内的job调度"><a href="#第二层：schedule-within-application，同一个SparkContext内的job调度" class="headerlink" title="第二层：schedule within application，同一个SparkContext内的job调度"></a>第二层：schedule within application，同一个SparkContext内的job调度</h5>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Spark任务有四种提交方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;local&lt;/li&gt;
&lt;li&gt;standalone&lt;/li&gt;
&lt;li&gt;yarn(这里着重讲)&lt;/li&gt;
&lt;li&gt;mesos&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这里涉及到两层的任务调度：&lt;/p&gt;
&lt;h5 id=&quot;第一层：sc
      
    
    </summary>
    
    
      <category term="Scheduler" scheme="https://shang.at/tags/Scheduler/"/>
    
  </entry>
  
  <entry>
    <title>分布式常见思想-Bloomfilter</title>
    <link href="https://shang.at/post/%E5%88%86%E5%B8%83%E5%BC%8F%E5%B8%B8%E8%A7%81%E6%80%9D%E6%83%B3-Bloomfilter/"/>
    <id>https://shang.at/post/分布式常见思想-Bloomfilter/</id>
    <published>2020-06-01T01:58:27.000Z</published>
    <updated>2020-06-01T01:58:58.674Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="分布式" scheme="https://shang.at/categories/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
    
      <category term="BloomFilter" scheme="https://shang.at/tags/BloomFilter/"/>
    
  </entry>
  
  <entry>
    <title>数据结构与算法学习笔记-内存不足</title>
    <link href="https://shang.at/post/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%86%85%E5%AD%98%E4%B8%8D%E8%B6%B3/"/>
    <id>https://shang.at/post/数据结构与算法学习笔记-内存不足/</id>
    <published>2020-05-31T23:35:34.000Z</published>
    <updated>2020-05-31T23:37:26.809Z</updated>
    
    <content type="html"><![CDATA[<p>中位数定义：数字排序之后，位于中间的那个数。比如将100亿个数字进行排序，排序之后，位于第50亿个位置的那个数 就是中位数。 </p><p>  ①内存够：内存够还慌什么啊，直接把100亿个全部排序了，你用冒泡都可以…然后找到中间那个就可以了。但是你以为面试官会给你内存？？ </p><p>  ②内存不够：题目说是整数，我们认为是带符号的int,所以4字节，占32位。 </p><p>  假设100亿个数字保存在一个大文件中，依次读一部分文件到内存(不超过内存的限制)，将每个数字用二进制表示，比较二进制的最高位(第32位，符号位，0是正，1是负)，如果数字的最高位为0，则将这个数字写入 file_0文件中；如果最高位为 1，则将该数字写入file_1文件中。 </p><p>  从而将100亿个数字分成了两个文件，假设 file_0文件中有 60亿 个数字，file_1文件中有 40亿 个数字。那么中位数就在 file_0 文件中，并且是 file_0 文件中所有数字排序之后的第 10亿 个数字。（file_1中的数都是负数，file_0中的数都是正数，也即这里一共只有40亿个负数，那么排序之后的第50亿个数一定位于file_0中） </p><p>  现在，我们只需要处理 file_0 文件了（不需要再考虑file_1文件）。对于 file_0 文件，同样采取上面的措施处理：将file_0文件依次读一部分到内存(不超内存限制)，将每个数字用二进制表示，比较二进制的 次高位（第31位），如果数字的次高位为0，写入file_0_0文件中；如果次高位为1，写入file_0_1文件 中。 </p><p>  现假设 file_0_0文件中有30亿个数字，file_0_1中也有30亿个数字，则中位数就是：file_0_0文件中的数字从小到大排序之后的第10亿个数字。 </p><p>  抛弃file_0_1文件，继续对 file_0_0文件 根据 次次高位(第30位) 划分，假设此次划分的两个文件为：file_0_0_0中有5亿个数字，file_0_0_1中有25亿个数字，那么中位数就是 file_0_0_1文件中的所有数字排序之后的 第 5亿 个数。 </p><p>  按照上述思路，直到划分的文件可直接加载进内存时，就可以直接对数字进行快速排序，找出中位数了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;中位数定义：数字排序之后，位于中间的那个数。比如将100亿个数字进行排序，排序之后，位于第50亿个位置的那个数 就是中位数。 &lt;/p&gt;
&lt;p&gt;  ①内存够：内存够还慌什么啊，直接把100亿个全部排序了，你用冒泡都可以…然后找到中间那个就可以了。但是你以为面试官会给你内存？？
      
    
    </summary>
    
      <category term="数据结构与算法" scheme="https://shang.at/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="外排-分组归并-桶排序" scheme="https://shang.at/tags/%E5%A4%96%E6%8E%92-%E5%88%86%E7%BB%84%E5%BD%92%E5%B9%B6-%E6%A1%B6%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>Java学习-Future</title>
    <link href="https://shang.at/post/Java%E5%AD%A6%E4%B9%A0-Future/"/>
    <id>https://shang.at/post/Java学习-Future/</id>
    <published>2020-05-31T22:44:35.000Z</published>
    <updated>2020-05-31T22:45:01.561Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="JAVA源码" scheme="https://shang.at/categories/JAVA%E6%BA%90%E7%A0%81/"/>
    
    
      <category term="并发编程-Future" scheme="https://shang.at/tags/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-Future/"/>
    
  </entry>
  
  <entry>
    <title>Python学习-一些常见的操作</title>
    <link href="https://shang.at/post/Python%E5%AD%A6%E4%B9%A0-%E4%B8%80%E4%BA%9B%E5%B8%B8%E8%A7%81%E7%9A%84%E6%93%8D%E4%BD%9C/"/>
    <id>https://shang.at/post/Python学习-一些常见的操作/</id>
    <published>2020-05-29T09:15:13.000Z</published>
    <updated>2020-06-03T03:49:30.012Z</updated>
    
    <content type="html"><![CDATA[<h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4><ul><li>如何初始化一个一维数组</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n=<span class="number">10</span></span><br><span class="line">l = [<span class="number">0</span>]*n</span><br><span class="line">l1 = [<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> range(n)]</span><br></pre></td></tr></table></figure><ul><li>如何初始化一个二维数组</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">m, n = <span class="number">10</span>, <span class="number">7</span></span><br><span class="line">l = [[<span class="number">0</span>]*m]*n   <span class="comment"># 会有赋值问题：n个[0]*m 实际上都是同一个对象</span></span><br><span class="line">l1 = [[<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> range(m)] <span class="keyword">for</span> _ <span class="keyword">in</span> range(n)]  <span class="comment"># 没有赋值问题</span></span><br></pre></td></tr></table></figure><ul><li>如何初始化一个二维数组并且设置右边界和下边界为1(根据实际情况处理)</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">m, n = <span class="number">10</span>, <span class="number">7</span></span><br><span class="line">dp = [[<span class="number">1</span> <span class="keyword">if</span> i == m - <span class="number">1</span> <span class="keyword">or</span> j == n - <span class="number">1</span> <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(m)] <span class="keyword">for</span> j <span class="keyword">in</span> range(n)]</span><br></pre></td></tr></table></figure><ul><li>正序遍历</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n=<span class="number">10</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure><ul><li>倒序遍历</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n=<span class="number">10</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(n<span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure><ul><li>二维数组一维化</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> chain</span><br><span class="line">b=[[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>], [<span class="number">5</span>,<span class="number">8</span>], [<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]]</span><br><span class="line">c=list(chain(*b))</span><br><span class="line">print(c)</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line"><span class="comment">### --------------------------------------------------------------------------------</span></span><br><span class="line">ab = [[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>], [<span class="number">5</span>,<span class="number">8</span>], [<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]]</span><br><span class="line">print([i <span class="keyword">for</span> item <span class="keyword">in</span> ab <span class="keyword">for</span> i <span class="keyword">in</span> item])</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line"><span class="comment">### --------------------------------------------------------------------------------</span></span><br><span class="line"><span class="keyword">import</span> operator</span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line">a = [[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>], [<span class="number">4</span>,<span class="number">6</span>], [<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">8</span>]]</span><br><span class="line">print(reduce(operator.add, a))</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">8</span>]</span><br><span class="line"><span class="comment">### --------------------------------------------------------------------------------</span></span><br><span class="line">a = [[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>], [<span class="number">5</span>, <span class="number">8</span>], [<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]]</span><br><span class="line">l=[]</span><br><span class="line"><span class="keyword">for</span> m <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">3</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> a[m]:</span><br><span class="line">        l.append(i)</span><br><span class="line">print(l)</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line"><span class="comment">### --------------------------------------------------------------------------------</span></span><br><span class="line">a=[[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>], [<span class="number">5</span>,<span class="number">8</span>], [<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]]</span><br><span class="line">a= eval(<span class="string">'['</span>+str(a).replace(<span class="string">' '</span>,<span class="string">''</span>).replace(<span class="string">'['</span>,<span class="string">''</span>).replace(<span class="string">']'</span>,<span class="string">''</span>)+<span class="string">']'</span>)</span><br><span class="line">print(a)</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line"><span class="comment">### --------------------------------------------------------------------------------</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">flatten</span><span class="params">(a)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> isinstance(a, (list, )):</span><br><span class="line">        <span class="keyword">return</span> [a]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        b = []</span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> a:</span><br><span class="line">            b += flatten(item)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    a = [[[<span class="number">1</span>,<span class="number">2</span>],<span class="number">3</span>],[<span class="number">4</span>,[<span class="number">5</span>,<span class="number">6</span>]],[<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]]</span><br><span class="line">    print(flatten(a))</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line"><span class="comment">### --------------------------------------------------------------------------------</span></span><br></pre></td></tr></table></figure><ul><li>如何拷贝一个一维数组</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">y = x[:]</span><br></pre></td></tr></table></figure><ul><li>如何拷贝一个二维数组</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">### --------------------------------------------------------------------------------</span></span><br><span class="line">x=[[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>], [<span class="number">4</span>,<span class="number">6</span>]]</span><br><span class="line">y = [row[:] <span class="keyword">for</span> row <span class="keyword">in</span> x]</span><br><span class="line"><span class="comment">### --------------------------------------------------------------------------------</span></span><br><span class="line">x=[[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>], [<span class="number">4</span>,<span class="number">6</span>]]</span><br><span class="line"><span class="keyword">from</span> copy <span class="keyword">import</span> copy, deepcopy</span><br><span class="line">y = deepcopy(x)</span><br><span class="line"><span class="comment">### --------------------------------------------------------------------------------</span></span><br><span class="line">old_array = [[<span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>]]</span><br><span class="line"><span class="comment"># python2.*</span></span><br><span class="line">new_array = map(list, old_array)</span><br><span class="line"><span class="comment"># python3.*</span></span><br><span class="line">new_array = list(map(list, old_array))</span><br><span class="line"><span class="comment">### --------------------------------------------------------------------------------</span></span><br><span class="line">arr = [[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>]]</span><br><span class="line"></span><br><span class="line">deepcopy1d2d = <span class="keyword">lambda</span> lVals: [x <span class="keyword">if</span> <span class="keyword">not</span> isinstance(x, list) <span class="keyword">else</span> x[:] <span class="keyword">for</span> x <span class="keyword">in</span> lVals]</span><br><span class="line"></span><br><span class="line">dst = deepcopy1d2d(arr)</span><br><span class="line"></span><br><span class="line">dst[<span class="number">1</span>][<span class="number">1</span>]=<span class="number">150</span></span><br><span class="line"><span class="keyword">print</span> dst</span><br><span class="line"><span class="keyword">print</span> arr</span><br></pre></td></tr></table></figure><h4 id="ascii码的转换"><a href="#ascii码的转换" class="headerlink" title="ascii码的转换"></a>ascii码的转换</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 获取一个字符的ascii码</span></span><br><span class="line">ord(<span class="string">'a'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将ascii码转换成字符</span></span><br><span class="line">chr(<span class="number">97</span>)</span><br></pre></td></tr></table></figure><h4 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 内存地址</span></span><br><span class="line">a = <span class="number">9</span></span><br><span class="line">id(a)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看一个对象内存占用大小(变量所占字节的大小)</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.getsizeof(a)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看变量类型</span></span><br><span class="line">type(a)</span><br></pre></td></tr></table></figure><h4 id="进制"><a href="#进制" class="headerlink" title="进制"></a>进制</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 二进制</span></span><br><span class="line">Ob1010</span><br><span class="line"><span class="comment"># 获取一个数字的二进制</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bin(<span class="number">3</span>)</span><br><span class="line"><span class="string">'0b11'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bin(<span class="number">-10</span>)</span><br><span class="line"><span class="string">'-0b1010'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 八进制</span></span><br><span class="line"><span class="number">0o176</span></span><br><span class="line"><span class="comment"># 获取一个数字的二进制</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>oct(<span class="number">3</span>)</span><br><span class="line"><span class="string">'0o3'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bin(<span class="number">-3</span>)</span><br><span class="line"><span class="string">'-0o3'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 十进制</span></span><br><span class="line"><span class="number">43</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 十六进制</span></span><br><span class="line"><span class="number">0x12ab</span></span><br><span class="line">hex(<span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'0x3'</span></span><br></pre></td></tr></table></figure><h4 id="位操作"><a href="#位操作" class="headerlink" title="位操作"></a>位操作</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&gt;&gt;  <span class="comment"># 右移：向右移1位可以看成除以2</span></span><br><span class="line">&lt;&lt;  <span class="comment"># 左移：向左移一位可以看成乘以2</span></span><br><span class="line">&amp;   <span class="comment"># 与</span></span><br><span class="line">|   <span class="comment"># 或</span></span><br><span class="line">~   <span class="comment"># 取反：效果是对n的内部表示的每一位求补</span></span><br><span class="line">^   <span class="comment"># 异或</span></span><br></pre></td></tr></table></figure><h4 id="交换元素"><a href="#交换元素" class="headerlink" title="交换元素"></a>交换元素</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 通常写法</span></span><br><span class="line">a=<span class="number">1</span></span><br><span class="line">b=<span class="number">2</span></span><br><span class="line">a,b = b,a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数组元素交换</span></span><br><span class="line">l = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">l[<span class="number">3</span>], l[<span class="number">1</span>] = l[<span class="number">1</span>], l[<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 但是要同时交换数组和index就不行了</span></span><br><span class="line">i=<span class="number">0</span></span><br><span class="line">i, l[i] = l[i], <span class="number">7</span>  <span class="comment"># 失败：这里不能用这种写法，因为修改了i的值之后，等号前面的self.p[i]就会立刻指向修改后的i的位置。这里和普通的a b交换有区别</span></span><br><span class="line">l[i], i = <span class="number">7</span>, l[i]  <span class="comment"># 等号后面的l[i]实际上是值传递</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;数组&quot;&gt;&lt;a href=&quot;#数组&quot; class=&quot;headerlink&quot; title=&quot;数组&quot;&gt;&lt;/a&gt;数组&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;如何初始化一个一维数组&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;
      
    
    </summary>
    
      <category term="Python" scheme="https://shang.at/categories/Python/"/>
    
    
      <category term="常见操作技巧" scheme="https://shang.at/tags/%E5%B8%B8%E8%A7%81%E6%93%8D%E4%BD%9C%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>Python学习-lru_cache</title>
    <link href="https://shang.at/post/Python%E5%AD%A6%E4%B9%A0-lru-cache/"/>
    <id>https://shang.at/post/Python学习-lru-cache/</id>
    <published>2020-05-28T01:48:49.000Z</published>
    <updated>2020-05-28T01:49:40.668Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="Python" scheme="https://shang.at/categories/Python/"/>
    
    
      <category term="lru_cache" scheme="https://shang.at/tags/lru-cache/"/>
    
  </entry>
  
  <entry>
    <title>Java学习-Thread</title>
    <link href="https://shang.at/post/Java%E5%AD%A6%E4%B9%A0-Thread/"/>
    <id>https://shang.at/post/Java学习-Thread/</id>
    <published>2020-05-24T11:17:33.000Z</published>
    <updated>2020-05-25T10:04:55.397Z</updated>
    
    <content type="html"><![CDATA[<h4 id="线程的基本概念"><a href="#线程的基本概念" class="headerlink" title="线程的基本概念"></a>线程的基本概念</h4><p>进程：每个进程都有独立的代码和数据空间（进程上下文），进程间的切换会有较大的开销，一个进程包含1–n个线程。（进程是资源分配的最小单位）<br>线程：同一类线程共享代码和数据空间，每个线程有独立的运行栈和程序计数器(PC)，线程切换开销小。（线程是cpu调度的最小单位）</p><h4 id="线程的状态"><a href="#线程的状态" class="headerlink" title="线程的状态"></a>线程的状态</h4><p>创建、就绪、运行、阻塞、终止</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gf4q1vrvkuj30fa0awaal.jpg" alt></p><ol><li>创建：新创建的一个线程对象</li><li>就绪：线程对象创建成功后，其他的线程调用该对象的start方法。该状态的线程位于可运行线程池内，变的可运行，等待获取CPU的使用权呢</li><li>运行：就绪状态的线程获取了CPU使用权，执行程序代码</li><li>阻塞：阻塞状态是线程因为某种原因放弃了CPU使用权，暂停运行。直到线程再次进入就绪状态，才有机会转到运行状态。阻塞的情况分为以下三种：<ol><li>等待阻塞：运行的线程执行wait方法，JVM会把该线程放入等待池中<strong>(wait会释放持有的锁)</strong></li><li>同步阻塞：运行的线程在获取对象同步锁的时，如果该同步锁被别的线程占用，则JVM会把改线程放入锁池中</li><li>其他阻塞：运行的线程执行sleep或join方法，或者发出了I/O(文件读写、网络请求)请求，JVM会把该线程置为阻塞状态。当sleep状态超时、join等待线程终止或者超时、或者I/O处理完毕时，线程重新转入就绪状态<strong>(sleep不会释放持有的锁)</strong></li></ol></li><li>终止：线程执行完了或者因异常推出了run方法，该线程结束生命周期</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;线程的基本概念&quot;&gt;&lt;a href=&quot;#线程的基本概念&quot; class=&quot;headerlink&quot; title=&quot;线程的基本概念&quot;&gt;&lt;/a&gt;线程的基本概念&lt;/h4&gt;&lt;p&gt;进程：每个进程都有独立的代码和数据空间（进程上下文），进程间的切换会有较大的开销，一个进程包含1–n
      
    
    </summary>
    
      <category term="JAVA源码" scheme="https://shang.at/categories/JAVA%E6%BA%90%E7%A0%81/"/>
    
    
      <category term="并发编程-Thread" scheme="https://shang.at/tags/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-Thread/"/>
    
  </entry>
  
  <entry>
    <title>Java学习-并发编程</title>
    <link href="https://shang.at/post/Java%E5%AD%A6%E4%B9%A0-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    <id>https://shang.at/post/Java学习-并发编程/</id>
    <published>2020-05-24T10:46:42.000Z</published>
    <updated>2020-06-03T08:20:47.368Z</updated>
    
    <content type="html"><![CDATA[<h4 id="整体脑图"><a href="#整体脑图" class="headerlink" title="整体脑图"></a>整体脑图</h4><p><img src="/images/chenssy_juc_201712.png"></p><ul><li><a href="/post/JAVA并发编程-1-内存模型">JAVA并发编程-1-内存模型</a></li><li><a href="/post/JAVA并发编程-2-并发基础">JAVA并发编程-2-并发基础</a></li><li><a href="/post/JAVA并发编程-3-锁">JAVA并发编程-3-锁</a></li><li><a href="/post/JAVA并发编程-4-并发工具类">JAVA并发编程-4-并发工具类</a></li><li><a href="/post/JAVA并发编程-5-其他">JAVA并发编程-5-ThreadLocal&amp;Fork&amp;Join</a></li><li><a href="/post/JAVA并发编程-6-并发集合">JAVA并发编程-6-并发集合</a></li><li><a href="/post/JAVA并发编程-7-Atomic">JAVA并发编程-7-Atomic</a></li><li><a href="/post/JAVA并发编程-8-阻塞队列">JAVA并发编程-8-阻塞队列</a></li><li><a href="/post/JAVA并发编程-9-线程池">JAVA并发编程-9-线程池</a></li><li><a href="/post/JAVA并发编程-10-响应式编程-RxJava">JAVA并发编程-10-响应式编程-RxJava</a></li><li><a href="/post/JAVA并发编程-12-并发框架-Disruptor">JAVA并发编程-12-并发框架-Disruptor</a></li><li></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;整体脑图&quot;&gt;&lt;a href=&quot;#整体脑图&quot; class=&quot;headerlink&quot; title=&quot;整体脑图&quot;&gt;&lt;/a&gt;整体脑图&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;/images/chenssy_juc_201712.png&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a hre
      
    
    </summary>
    
      <category term="JAVA并发编程" scheme="https://shang.at/categories/JAVA%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="并发编程" scheme="https://shang.at/tags/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
</feed>
