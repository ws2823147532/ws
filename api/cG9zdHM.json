{"per_page":10,"total":1,"current":1,"data":[{"title":"记一次线上JVM问题调试","date":"2019-02-27T03:21:32.000Z","excerpt":"<h3 id=\"发现java进程\">发现java进程<a href=\"post/记一次线上JVM问题调试#发现java进程\"></a></h3><ul>\n<li>使用linux命令：ps</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ps -ef | grep prcessName</span><br><span class=\"line\">[root@YZSJHL81-35 ~]# ps -ef | grep Bootstrap</span><br><span class=\"line\">root     118271      1 99 00:10 ?        3-16:08:07  Bootstrap start</span><br><span class=\"line\">root     197682 197016  0 17:08 pts/0    00:00:00 grep Bootstrap</span><br></pre></td></tr></table></figure>\n<ul>\n<li>使用java自带的检测工具 jps</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@YZSJHL81-35 ~]# jps</span><br><span class=\"line\">118271 Bootstrap</span><br><span class=\"line\">197101 Jps</span><br></pre></td></tr></table></figure>","slug":"记一次线上JVM问题调试","tags":["JVM问题调试"],"categories":["JVM"]},{"title":"辨析 Sass 中的 Map 和 List","date":"2015-10-21T02:34:12.000Z","excerpt":"<p>如果你使用过 Sass 3.3 之前的版本，那么你一定对那段时光颇有感触，那时候没有现如今这么好的条件，那时候的 Map 还只能用多重列表（lists of list）来模拟。多重列表可以实现复杂数据的嵌套定义，但却不是以键值对的形式实现的，所有当我们需要获取其中特定的某一项时就会比较麻烦。Map 这种数据类型天生就是基于键值对的形式，非常便于组织数据。</p>\n<p>自从可以使用 Map 之后，开发者们开始毫无顾忌地定义 Map 存储数据，比如断点宽度、颜色值、栅格布局等等响应式排版的细节，都被一股脑的塞进了 Map 中。</p>\n<p>那么，有了 Map 之后，我们还有必要使用 List 吗？可能某些人会觉得为了保持向后兼容应该继续使用多重列表模拟 Map，因为可能有些开发者仍然在使用老版本的 Sass 编译器，但实际上，这是多此一举了，Sass 的版本通常由 <code>package.json</code> 或者其他同类型的项目配置文件所控制，往往只需一条命令（<code>gem update sass</code>）即可更新 Sass 的版本，因此基本上无需考虑对老版本的兼容问题。</p>","slug":"demo","tags":["css"]}]}